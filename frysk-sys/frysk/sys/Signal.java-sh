#!/bin/sh
cat <<EOF
// This file is part of the program FRYSK.
//
// Copyright 2005, 2007, 2008, Red Hat Inc.
//
// FRYSK is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// FRYSK is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with FRYSK; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
// 
// In addition, as a special exception, Red Hat, Inc. gives You the
// additional right to link the code of FRYSK with code not covered
// under the GNU General Public License ("Non-GPL Code") and to
// distribute linked combinations including the two, subject to the
// limitations in this paragraph. Non-GPL Code permitted under this
// exception must only link to the code of FRYSK through those well
// defined interfaces identified in the file named EXCEPTION found in
// the source code files (the "Approved Interfaces"). The files of
// Non-GPL Code may instantiate templates or use macros or inline
// functions from the Approved Interfaces without causing the
// resulting work to be covered by the GNU General Public
// License. Only Red Hat, Inc. may make changes or additions to the
// list of Approved Interfaces. You must obey the GNU General Public
// License in all respects for all of the FRYSK code and other code
// used in conjunction with FRYSK except the Non-GPL Code covered by
// this exception. If you modify this file, you may extend this
// exception to your version of the file, but you are not obligated to
// do so. If you do not wish to provide this exception without
// modification, you must delete this exception statement from your
// version and license this file solely under the GPL without
// exception.
EOF

cat <<EOF

package frysk.sys;

import java.util.Map;
import java.util.WeakHashMap;

/**
 * Host signal handling.
 *
 * Need to use native calls to find out the current host's signal
 * values.
 */
public class Signal implements Comparable {
    private final int sig;
    private final String name;
    private Signal(int sig, String name) {
	this.sig = sig;
	this.name = name;
    }
    private Signal(int sig) {
        this.sig = sig;
        this.name = "SIG" + sig;
    }

    /**
     * Dump the signal to a string.  The format is "NAME(VALUE)".
     */
    public String toString() {
	return name + "(" + this.intValue() + ")";
    }

    /**
     * Hash on the Signal's intValue.
     */
    public int hashCode() {
	return intValue();
    }

    /**
     * Return the signal's numeric value as an integer.
     */
    public int intValue() {
        return sig;
    }

    /**
     * Comparison operations; use intValue() so that sub-classing can
     * provide a scratch int value.
     */
    public boolean equals(Object o) {
        return ((o instanceof Signal)
                && ((Signal) o).intValue() == this.intValue());
    }
    public boolean equals(int sig) {
	return this.intValue() == sig;
    }
    public int compareTo(Object o) {
	Signal rhs = (Signal)o; // exception ok
	return this.intValue() - rhs.intValue();
    }

    /**
     * Deliver SIG to process PID.
     */
    public void kill(int pid) {
	kill(pid, sig);
    }
    /**
     * Deliver SIG to process PID.
     */
    public void kill(ProcessIdentifier pid) {
	kill(pid.intValue(), this.intValue());
    }
    private static native void kill(int pid, int signum);
    /**
     * Deliver SIGNAL to task (or thread) LWP.
     */
    public final void tkill(int lwp) {
	tkill(lwp, this.intValue());
    }
    /**
     * Deliver SIGNAL to task (or thread) LWP.
     */
    public final void tkill(ProcessIdentifier lwp) {
	tkill(lwp.intValue(), this.intValue());
    }
    public static native void tkill(int lwp, int signum);

    /**
     * Momentarialy sets the signal handler for Sig to SIGIGN so that
     * any pending signals are discarded.
     */
    public final void drain() {
	drain(sig);
    }
    private static native void drain(int signum);

    /**
     * Return the known <b>host</b> signals as a SignalSet.
     */
    public static SignalSet getHostSignalSet() {
        return new SignalSet(signals);
    }

    /**
     * Return the <b>host</b> signal as a string.
     * 
     * For frysk what you instead want is a conversion from the
     * integer to the <b>target</b>'s string representation.
     * See the numbering described in signal(7) for the problems.
     */
    public static String toHostStringFIXME(int signal) {
        return valueOf(signal).toString();
    }

    /**
     * Given an integer, return the corresponding <b>host</b> signal.
     * If the signal is unknown, make one up.
     *
     * This is method is <b>package-private</b>.  If you need to convert
     * a target signal to a Signal object, see frysk.proc.Signal.
     */
    static Signal valueOf(int signum) {
	if (signum < 0) {
	    throw new NullPointerException("invalid signal: " + signum);
        } else if (signum < signals.length) {
            Signal signal = signals[signum];
            if (signal != null)
                return signal;
            // Fall through to bottom which will make up a signal.
        }
        // Unknown signal, fudge one up; beter than throwing
        // an exception.
        synchronized (unknownSignals) {
            scratchSignal.signum = signum;
            Signal signal = (Signal)unknownSignals.get(scratchSignal);
            if (signal != null)
                return signal;
            signal = new Signal(signum);
            unknownSignals.put(signal, signal);
            return signal;
        }
    }

    /**
     * A scratch value for searching the signal table.
     */
    private static class ScratchSignal extends Signal {
        ScratchSignal() {
           super(0, "<scratch signal>");
       }
        int signum;
        public int intValue() {
           return signum;
        }
    }
    private static final Map unknownSignals = new WeakHashMap();
    private static final ScratchSignal scratchSignal = new ScratchSignal();

    /**
     * Tables for looking up known signals; weak so that scratch
     * signals do not accumulate.
     */
    private static native int nsig();
    private static native int rtMin();
    private static native int rtMax();
    // Note: nsig()
    private static final Signal[] signals = new Signal[nsig()];
    /**
     * Create a signal, also enter the signal into the signals table
     * for later retrieval.
     */
    private static Signal signalFactory(int sig, String name) {
        if (sig < 0)
            return null;
        Signal signal = new Signal(sig, name);
        if (signals[sig] == null)
            signals[sig] = signal;
	return signal;
    }

    public static final Signal NONE = signalFactory(0, "SIGNONE");
EOF

for sig in \
  hup int_ quit ill abrt fpe kill segv pipe alrm term usr1 usr2 chld cont stop tstp ttin ttou \
  bus poll prof sys trap urg vtalrm xcpu xfsz \
  iot emt stkflt io cld pwr info lost winch unused
do
    SIG=`echo "${sig}" | tr '[a-z]' '[A-Z]' | sed 's/_$//'`
    echo "    private static native int ${sig}();"
    echo "    public static final Signal ${SIG} = signalFactory(${sig}(), \"SIG${SIG}\");"
done

cat <<EOF
    static {
        // Populate the run-time signal table.  XXX while signal(7)
        // seems to imply rtMax() is valid (cannot "exceed"), the code
        // suggests otherwise.
        for (int sig = rtMin(); sig < rtMax(); sig++) {
            signals[sig] = new Signal(sig, "SIGRT" + sig);
        }
    }
}
EOF
