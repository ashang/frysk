#!/usr/bin/expect --
# This file is part of the program FRYSK.
#
# Copyright 2006 Red Hat Inc.
#
# FRYSK is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# FRYSK is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with FRYSK; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
# 
# In addition, as a special exception, Red Hat, Inc. gives You the
# additional right to link the code of FRYSK with code not covered
# under the GNU General Public License ("Non-GPL Code") and to
# distribute linked combinations including the two, subject to the
# limitations in this paragraph. Non-GPL Code permitted under this
# exception must only link to the code of FRYSK through those well
# defined interfaces identified in the file named EXCEPTION found in
# the source code files (the "Approved Interfaces"). The files of
# Non-GPL Code may instantiate templates or use macros or inline
# functions from the Approved Interfaces without causing the
# resulting work to be covered by the GNU General Public
# License. Only Red Hat, Inc. may make changes or additions to the
# list of Approved Interfaces. You must obey the GNU General Public
# License in all respects for all of the FRYSK code and other code
# used in conjunction with FRYSK except the Non-GPL Code covered by
# this exception. If you modify this file, you may extend this
# exception to your version of the file, but you are not obligated to
# do so. If you do not wish to provide this exception without
# modification, you must delete this exception statement from your
# version and license this file solely under the GPL without
# exception.

#set up variables.
global objdir
global srcdir
global frysk_testsuite
load_lib frysk.exp
set pwd [eval pwd]
frysk_init

#start test program, and store pid.
set funit_pid [spawn $pwd/frysk/pkglibdir/funit-child 100 0 0]
set funit_sid $spawn_id

#start tester program with garbled input.
spawn $pwd/frysk/bindir/fcore "this is a bad argument"

#test output.
expect {	
    -re "fcore: Argument this is a bad argument does not appear to be a valid pid. Skipping."
    {pass test_fcore_bad_argument}
    default	{fail test_fcore_bad_argument}
}


#start tester program with valid pid, but wrong -c argument
spawn $pwd/frysk/bindir/fcore -c SILLY $funit_pid

#test output.
expect {	
    -re "fcore: Invalid log console: SILLY"
    {pass test_fcore_bad_console_log_argument}
    default	{fail test_fcore_bad_console_log_argument}
}

#start tester program with valid pid, but wrong -l argument
spawn $pwd/frysk/bindir/fcore -l SILLY $funit_pid

#test output.
expect {	
    -re "fcore: Invalid log level: SILLY"
    {pass test_fcore_bad_log_argument}
    default	{fail test_fcore_bad_log_argument}
}

#start tester program with valid pid, correct -c  but wrong -l argument
spawn $pwd/frysk/bindir/fcore -c ALL -l SILLY $funit_pid

#test output.
expect {	
    -re "fcore: Invalid log level: SILLY"
    {pass test_fcore_bad_log_correct_console_argument}
    default	{fail test_fcore_bad_log_correct_console_argument}
}

#start tester program with valid pid, wrong -c  and wrong -l argument
spawn $pwd/frysk/bindir/fcore -c SILLY -l ALL $funit_pid

#test output.
expect {	
    -re "fcore: Invalid log console: SILLY"
    {pass test_fcore_correct_log_bad_console_argument}
    default	{fail test_fcore_correct_log_bad_console_argument}
}

#start tester program with valid pid, wrong -c  but correct -l argument
spawn $pwd/frysk/bindir/fcore -c SILLY -l SILLY $funit_pid

#test output.
expect {
    -re "fcore: Invalid log console: SILLY"
    {pass test_fcore_bad_log_bad_console_argument}
    default     {fail test_fcore_bad_log_bad_console_argument}
}

#start tester program with invaalid argument
spawn $pwd/frysk/bindir/fcore -z  $funit_pid

#test output.
expect {
    -re "fcore: unrecognized option"
    {pass test_fcore_unrecognized_option}
    default     {fail test_fcore_unrecognized_option}
}

#start tester program with one invalid argument, one correct
spawn $pwd/frysk/bindir/fcore -z  -a $funit_pid

#test output.
expect {
    -re "fcore: unrecognized option"
    {pass test_fcore_unrecognized_with_valid_option}
    default     {fail test_fcore_unrecognized_with_valid__option}
}

#clean up.
tool_exit $funit_sid
frysk_term

