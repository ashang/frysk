2007-10-26  Mark Wielaard  <mwielaard@redhat.com>

	* RegsCase.java (IA32): Don't subtract one from EFLAGS bit mask.

2007-10-18  Sami Wagiaalla  <swagiaal@redhat.com>

	* RegsCase.java (testAccessRegisterRead): Marked 
	as unreslovedX8664.

2007-10-17  Andrew Cagney  <cagney@redhat.com>

	* Offspring.java: Update; import frysk.proc.FindHost.

2007-10-15  Andrew Cagney  <cagney@redhat.com>

	* RegsCase.java (taskObject(Task)): Delete.
	(access(Register,int,int,byte[],int,boolean)): Relace
	accessRegister(Object,Register,int,int,byte[],int,boolean).
	(Value, ByteValue, BigIntegerValue, MaskedValue, SymbolValue)
	(NoValue): New.
	(Values): Replace ValueMap.
	(IA32): Provide values for EIP and maksed EFLAGS.
	* TestRegs.java: Update.

2007-10-10  Mark Wielaard  <mwielaard@redhat.com>

	* RegsCase.java (IA32): Set EFLAGS value to null for now.
	See bug #5107.

2007-10-05  Andrew Cagney  <cagney@redhat.com>

	* RegsCase.java (X8664): New.
	(isaValues): Add X8664.
	(testAccessRegisterRead): Remove unresolved 5107.
	* TestRegs.java (checkRegisterGroupPresent): Clean up code
	formatting.

2007-10-04  Andrew Cagney  <cagney@redhat.com>

	* RegsCase.java (checkRegisterRead): New.
	(testAccessRegisterRead): Use.

2007-10-04  Sami Wagiaalla  <swagiaal@redhat.com>

	* CoreFileAtSignal.java: Use DeamonBlockedAtSignal instead of
	StoppedTestTaskFactory.
	* StoppedTestTaskFactory.java: Removed.

2007-10-04  Andrew Cagney  <cagney@redhat.com>

	* RegsCase.java: New file.
	* TestRegs.java: New file.

2007-10-04  Teresa Thomas  <tthomas@redhat.com>

	* FryskAsm.java (X8664): REG1, REG2 mapping fixed.

2007-10-03  Sami Wagiaalla  <swagiaal@redhat.com>

	Moved from StoppedTestTaskFactory frysk.debuginfo to frysk.testbed
	* CoreFileAtSignal.java: Updated.

2007-10-03  Andrew Cagney  <cagney@redhat.com>

	* TestFryskAsm.java: New.
	* FryskAsm.java: New.
	* DaemonBlockedAtEntry.java (DaemonBlockedAtEntry(String)): New.
	* DaemonBlockedAtSignal.java (DaemonBlockedAtSignal(String)): New.

2007-09-10  Sami Wagiaalla  <swagiaal@redhat.com>

	* CoreFileAtSignal.java (.execute): Replaced 
	ackProc.requestAbandonAndRunEvent with eventLoop.requestStop.

2007-09-06  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (tearDown): Call TearDownExpect.tearDown().

2007-08-30  Sami Wagiaalla  <swagiaal@redhat.com>

	* TestCoreFileAtSignal.java (testCoreFileAtSignal): Added
	comment to asserstions.

2007-08-28  Teresa Thomas  <tthomas@redhat.com>
	
	* DaemonBlockedAtSignal.java: Comments added.

	* TestDaemonBlockedAtSignal.java: New file. 
	* DaemonBlockedAtSignal.java: New file.

2007-08-22  Andrew Cagney  <cagney@redhat.com>

	* TestCoreFileAtSignal.java: Mark as unresolved, bug 4953.

2007-08-21  Andrew Cagney  <cagney@redhat.com>

	* CoreFileAtSignal.java (constructCore(File)): New.

2007-08-15  Mark Wielaard  <mwielaard@redhat.com>

	* TestLib.java (assertStatState): New static method.
	* LegacyOffspring.java (assertSendStop): Use TestLib
	assertStatState().
	* SlaveOffspring.java (assertSendStop): Likewise.

2007-08-10  Andrew Cagney  <cagney@redhat.com>

	* ExecOffspring.java (getCommandLine): Delete.
	(ExecOffspring(Command)): New.
	(ExecOffspring()): New.
	(ExecOffspring(String[]): Delete.
	(ExecOffspring(int,String[]): Delete.
	(ExecOffspring(int,File,String[]): Delete.
	* ExecCommand.java: New.
	* DaemonBlockedAtEntry.java: Update.

2007-08-10  Sami Wagiaalla  <swagiaal@toner.toronto.redhat.com>

	* TestCoreFileAtSignal.java: New file.
	* CoreFileAtSignal.java: New file.

2007-08-09  Andrew Cagney  <cagney@redhat.com>

	* SlaveOffspring.java (getExecutable): Run funit-slave instead of
	funit-child.
	(DEL_FORK_SIG): Change to SIGPROF.
	(funitSlaveCommand): Update options to match funit-slave; delete
	filenameArg.

	* LegacyOffspring.java: New; copy of SlaveOffspring; runs
	funit-legacy.
	
	* SlaveOffspring.java (getExecFile()): New.

	* SlaveOffspring.java (SlaveOffspring()): Delete.
	(SlaveOffspring(OffspringType)): Make private.
	(SlaveOffspring(boolean)): Delete.
	(SlaveOffspring(OffspringType,boolean)): Make private.
	
	* SlaveOffspring.java (createAttachedChild()): New.
	* TestLib.java (AttachedAckProcess): Delete.
	
	* SlaveOffspring.java (createDaemon): New.
	* TestLib.java (AckDaemonProcess): Delete.
	
	* SlaveOffspring.java: Make concrete (remove abstract).
	(createChild()): New.
	* TestLib.java (DetachedAckProcess): Delete.

	* TestLib.java (AttachedAckProcess(int)): Delete constructor.
	(AckDaemonProcess(int)): Delete constructor.
	(AckDaemonProcess(int,boolean)): Delete constructor.
	(DetachedAckProcess(int)): Delete constructor.
	* SlaveOffspring.java (assertSendAddClonesWaitForAcks): New.
	(SlaveOffspring(int)): Delete.
	(SlaveOffspring(OffspringType,int)): Delete.
	(SlaveOffspring(int,boolean): Delete.
	(SlaveOffspring(OffspringType,int,boolean): Delete.
	
	* SlaveOffspring.java (DEL_CLONE_SIG): Make private.
	(STOP_SIG, DEL_FORK_SIG, ZOMBIE_FORK_SIG, EXEC_CLONE_SIG): Ditto.
	* TestLib.java (parentAck, childAck): Delete.
	
	* SlaveOffspring.java (assertSendExecWaitForAcks(int)): Delete.
	(requestExec, requestFork, requestClone): New.
	(SPAWN_ACK): Rename spawnAck; make private.
	(EXEC_ACK): Rename execAck; make private.
	(ADD_FORK_SIG, ADD_CLONE_SIG, EXEC_SIG): Make private.
	* TestLib.java (spawnAck, execAck): Delete.
	(addForkSig, addCloneSig, execSig): Delete.
	
	* TestLib.java (ackSignal): Delete.
	(execCloneSig): Delete.
	(delForkSig): Delete.
	(zombieForkSig): Delete.
	(delCloneSig): Delete.
	(stopSig): Delete.
	
	* TestLib.java (AckProcess): Delete.
	(funitChildCommand): Delete.

2007-08-08  Andrew Cagney  <cagney@redhat.com>

	* OffspringType.java (ATTACHED_CHILD): Rename ATTACHED.
	* TestLib.java (AttachedAckProcess): Extend SlaveOffspring.
	(AttatchedAckProcess.createChild): Delete.
	
	* SlaveOffspring.java (SlaveOffspring(OffspringType)): New.
	(SlaveOffspring(OffspringType,int): New.
	(SlaveOffspring(OffspringType,boolean): New.
	(SlaveOffspring(OffspringType,int,boolean): New.
	* TestLib.java (DetachedAckProcess): Extend SlaveOffspring.
	(DetachedAckProcess.startChild): Delete.
	(DetachedAckProcess.reap): Delete.
	
	* ExecOffspring.java (assertRunThreadExec): New.
	(requestThreadExec): Rename requestRandomExec.
	(ExecOffspring(int,File,String[]): New.
	(getCommandLine): Change "exe" parameter type to a File.
	* TestLib.java (AckProcess(String,String[]): Delete.
	(DetachedAckProcess(String,String[]): Delete.
	
	* TestLib.java (AckDaemonProcess): Extend SlaveProcess.
	(AckDaemonProcess.startChild): Delete.

	* ExecOffspring.java: Rename FunitExecOffspring.java.
	* SlaveOffspring: Rename FunitSlaveOffspring.java.
	* DaemonBlockedAtEntry.java: Update.
	* TestLib.java: Update.

	* TestLib.java (AckProcess): Extend FunitSlaveOffspring.
	(AckProcess.spawn): Delete.
	(AckProcess.assertSendAddCloneWaitForAcks): Delete.
	(AckProcess.assertSendAddCloneWaitForAcks): Delete.
	(AckProcess.assertSendDelCloneWaitForAcks): Delete.
	(AckProcess.assertSendAddForkWaitForAcks): Delete.
	(AckProcess.assertSendAddForkWaitForAcks): Delete.
	(AckProcess.assertSendDelForkWaitForAcks): Delete.
	(AckProcess.assertSendZombieForkWaitForAcks): Delete.
	(AckProcess.assertSendFryParentWaitForAcks): Delete.
	(AckProcess.assertSendExecWaitForAcks): Delete.
	(AckProcess.assertSendExecWaitForAcks): Delete.
	(AckProcess.assertSendExecCloneWaitForAcks): Delete.
	(AckProcess.assertSendStop): Delete.

2007-08-07  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (Child): Delete.
	
	* TestLib.java (AckProcess): Extend Offspring.
	
	* TestLib.java (Child.signal(int,Sig)): Delete.

	* TestLib.java (Child.getArgv()): Delete.
	(Child.argv): Delete.

	* TestLib.java (Child): Make protected.

	* FunitSlaveOffspring.java (FunitSlaveOffspring(String,String[])):
	Delete.

	* DaemonBlockedAtEntry.java: Do not extend TestLib.
	(DaemonBlockedAtEntry(String[]): Use FunitExecOffspring.

	* ProcCounter.java (ProcCounter(int)): Replace
	ProcCounter(boolean); Check that Proc is a descendant of the
	process root.
	(ProcCounter()): Update.

2007-08-02  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Drain the IO signal.

2007-08-01  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (AckDaemonProcess(Sig,String[]): Delete.

	* FunitExecOffspring.java (getCommandLine): Replace constructArgs,
	make public.
	(assertRunExec): New.
	(requestExec): Send SIGINT.
	(requestRandomExec): Send SIGUSR1.

2007-07-31  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (DetachedAckProcess(Sig,String[])): Delete.

	* FunitThreadsOffspring.java (Type): Add enum-stype class
	containing BLOCK, CLONE, and LOOP.
	(FunitThreadsOffspring(int,Type): New constructor.
	
	* TestLib.java (funitThreadsCommand): Delete.
	(AckDaemonCloneProcess): Delete.

	* FunitExecOffspring.java: Rename FunitExec.java.
	* FunitThreadsOffspring.java: New file; based on
	TestLib.AckDaemonCloneProcess and TestLib.funitThreadsCommand.
	* FunitSlaveOffspring.java: New file; based on TestLib.AckProcess
	and SigAckProcess, SigAckDaemon, and SigAckChild.
	* SigAckChild.java: Delete.
	* SigAckDaemon.java: Delete.
	* SigAckProcess.java: Delete.
	
2007-07-28  Andrew Cagney  <cagney@redhat.com>

	* OffspringType.java: New file.
	* Offspring.java (logger): Add.
	* SynchronizedOffspring.java: New file.

	* TestLib.java (Child): Extend Offspring.
	(Child.assertFindProcAndTasks): Delete.
	(Child.findTaskUsingRefresh): Delete.
	(Child.kill, Child.signal): Delete.
	* Offspring.java: New file.
	
	* DaemonBlockedAtEntry.java (DaemonBlockedAtEntry(File)): New
	constructor.

2007-07-27  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (getExecPath): Use Config.getPkgLibFile.
	(getAbsolutePath, getExec32Path, getExec64Path): Delete.

	* TestLib.java (PidCounter): Delete; moved to PidCounter.java.
	* PidCounter.java: New file.

	* TestLib.java (TaskCounter): Delete; moved to TaskCounter.java.
	* TaskCounter.java: New file.

	* TestLib.java (ProcCounter): Delete; moved to ProcCounter.java.
	* ProcCounter.java: New file.

	* TestLib.java (StopEventLoopWhenProcRemoved): Delete.

	* StopEventLoopWhenProcRemoved.java: New file; extracted from
	TestLib.java.

2007-07-27  Mike Cvet  <mcvet@redhat.com>

	* TestfileTokenScanner.java: Added.

2007-07-27  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (StopEventLoopObserver): Delete.

	* TestLib.java (AttachedSyscallDaemonProcess): Delete.

2007-07-26  Andrew Cagney  <cagney@redhat.com>

	* SigAckProcess.java: New file.
	* SigAckDaemon.java: New file.
	* SigAckChild.java: New file.

	* DaemonBlockedAtEntry.java (ExecBlockingObserver): Private static
	class.  Only block the exec event the first time it fires.
	(execBlockingObserver, mainTask): Make private.
	
2007-07-26  Mark Wielaard  <mwielaard@redhat.com>

	* DaemonBlockedAtEntry.java: New file.

2007-07-25  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (AttatchedDaemonProcess): Moved to
	DaemonBlockedAtEntry.java.
	(ackSignal, childAck, parentAck, addCloneSig, delCloneSig)
	(stopSigaddForkSig, delForkSig, zombieForkSig, execSig)
	(execCloneSig, spawnAck, execAck): Make static.
	(DetachedAckProcess): Make static.
	(AckProcess): Make static.
	* DaemonBlockedAtEntry.java: New file.	

	* TestLib.java (TaskObserverBase): Move to TaskObserverBase.java.
	* TaskObserverBase.java: New.
	
	* TestLib.java (TaskSet): Move to TaskSet.java.
	* TaskSet.java: New.
	
	* TestLib.java (Fibonacci): Move to Fibonacci.java.
	* Fibonacci.java: New.

2007-07-24  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Moved to here from frysk.proc.TestLib.

2007-05-03  Tim Moore  <timoore@redhat.com>

	* SignalWaiter.java (constructor): Add a use of sigs to avoid an
	ecj warning.
	* TestSignalWaiter.java: Remove import of frys.event.Event.

2007-05-01  Andrew Cagney  <cagney@redhat.com>

	* SignalWaiter.java: New file.
	* TestSignalWaiter.java: New file.

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
End:
