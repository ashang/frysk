<?xml version='1.0'?> <!-- -*- xml -*- -->

<!--

 This file is part of the program FRYSK.

 Copyright 2006, 2007, 2008, Red Hat Inc.

 FRYSK is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
 the Free Software Foundation; version 2 of the License.

 FRYSK is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with FRYSK; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 
 In addition, as a special exception, Red Hat, Inc. gives You the
 additional right to link the code of FRYSK with code not covered
 under the GNU General Public License ("Non-GPL Code") and to
 distribute linked combinations including the two, subject to the
 limitations in this paragraph. Non-GPL Code permitted under this
 exception must only link to the code of FRYSK through those well
 defined interfaces identified in the file named EXCEPTION found in
 the source code files (the "Approved Interfaces"). The files of
 Non-GPL Code may instantiate templates or use macros or inline
 functions from the Approved Interfaces without causing the
 resulting work to be covered by the GNU General Public
 License. Only Red Hat, Inc. may make changes or additions to the
 list of Approved Interfaces. You must obey the GNU General Public
 License in all respects for all of the FRYSK code and other code
 used in conjunction with FRYSK except the Non-GPL Code covered by
 this exception. If you modify this file, you may extend this
 exception to your version of the file, but you are not obligated to
 do so. If you do not wish to provide this exception without
 modification, you must delete this exception statement from your
 version and license this file solely under the GPL without
 exception.

-->

<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"

 [
 <!ENTITY stackoptions SYSTEM "@abs_root_srcdir@/frysk-core/frysk/util/stack-options.xml">
 <!ENTITY standardoptions SYSTEM "@abs_root_srcdir@/frysk-core/frysk/util/standard-options.xml">
 <!ENTITY version SYSTEM "@abs_root_srcdir@/common/version.in">
 ]
>

<!-- http://docbook.sourceforge.net/snapshots/xsl/manpages/README -->

<refentry id="ftrace">

  <refentryinfo>
    <title>Frysk</title>
    <date>April 2008</date>
  </refentryinfo>
  
  <refmeta>
    <refentrytitle>ftrace</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class='source'>Frysk</refmiscinfo>
    <refmiscinfo class='version'>&version;</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>ftrace</refname>
    <refpurpose>trace system calls, function calls and signals</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>ftrace</command>
      <arg choice="opt">-c</arg>
      <arg choice="opt">-dl</arg>
      <arg choice="opt">-m</arg>
      <arg choice="opt">-o=<replaceable>FILE</replaceable></arg>
      <arg choice="opt" rep="repeat">-p=<replaceable>PID</replaceable></arg>
      <arg choice="opt">-pc</arg>
      <arg choice="opt">-sys=<replaceable>SYSCALL</replaceable>[,<replaceable>SYSCALL</replaceable>...]</arg>
      <arg choice="opt">-sig=<replaceable>SIG</replaceable>[,<replaceable>SIG</replaceable>...]</arg>
      <arg choice="opt">-sym=<replaceable>RULE</replaceable>[,<replaceable>RULE</replaceable>...]</arg>
      <arg choice="opt">-addr=<replaceable>RULE</replaceable>[,<replaceable>RULE</replaceable>...]</arg>
      <arg choice="opt">-stack</arg>
      <arg choice="opt">--</arg>
      <arg choice="plain"><replaceable>command</replaceable> <arg choice="opt"><replaceable>arguments</replaceable>...</arg></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  
  <refsect1>
    <title>DESCRIPTION</title>

    <para><function>ftrace</function> starts given
    <replaceable>command</replaceable> and according to tracing script
    given via command-line arguments, it traces its system calls,
    symbol entry points in general, and possibly other events as well.
    It uses the Frysk framework to implement tracing.</para>

    <para>The working set of events <function>ftrace</function> should
    trace is defined by the following arguments.</para>

    <refsect2>
	<title>Process Selection Options</title>

	<variablelist>
	    <varlistentry>
		<term>-p=<replaceable>PID</replaceable></term>
		<listitem>
		    <para>Attach to a process with given
		    <replaceable>PID</replaceable>.</para>
		</listitem>
	    </varlistentry>

	    <varlistentry>
		<term>-c</term>
		<listitem>
		    <para>Trace children: automatically attach to forks of
		    traced process.</para>
		</listitem>
	    </varlistentry>
    	</variablelist>
    </refsect2>

    <refsect2>
	<title>Symbol Tracing</title>

	<variablelist>
	  <varlistentry>
	    <term>-dl</term>
	    <listitem>
	      <para>Trace inside dynamic linker.  When this option is
	      not present, <function>ftrace</function> will function
	      as if -#INTERP#* rule was present at the end of each
	      tracing script.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>-sym=<replaceable>SYMBOL</replaceable>[,<replaceable>SYMBOL</replaceable>...]</term>
	    <listitem>
	      <para>Trace calls through the symbol entry points.
	      Ftrace displays a message each time a thread of
	      execution hits entry point of one of the traced
	      functions, and then when (if) the function returns.</para>

	      <para>If <replaceable>SYMBOL</replaceable> references
	      PLT slot, calls done through that PLT slot are recorded.
	      You then effectively trace calls done FROM given library
	      or executable, and generally can't say which library the
	      call leads TO.</para>

	      <para>When tracing ordinary symbol, catch all calls that
	      end up at this symbol.  That includes the calls that
	      don't go through PLT and as such are not intended as
	      inter-library calls, but rather intra-library
	      calls.</para>

	      <para>See below for detailed description of
	      <replaceable>SYMBOL</replaceable> rule syntax.</para>
	    </listitem>
	  </varlistentry>

	</variablelist>
    </refsect2>

    <refsect2>
	<title>Other Traceable Events</title>

	<variablelist>
	  <varlistentry>
	    <term>-sys=<replaceable>SYSCALL</replaceable>[,<replaceable>SYSCALL</replaceable>...]</term>
	    <listitem>
	      <para>Trace system calls that match given
	      <replaceable>SYSCALL</replaceable> ruleset.  See
	      below for description of
	      <replaceable>SYSCALL</replaceable> syntax.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>-sig=<replaceable>SIGNAL</replaceable>[,<replaceable>SIGNAL</replaceable>...]</term>
	    <listitem>
	      <para>Trace signals that match given
	      <replaceable>SIGNAL</replaceable> ruleset.  See
	      below for description of
	      <replaceable>SIGNAL</replaceable> syntax.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>-addr=<replaceable>RULE</replaceable>[,<replaceable>RULE</replaceable>...]</term>
	    <listitem>
	      <para>Trace addresses given by
	      <replaceable>RULE</replaceable>s.  See below for
	      description of address <replaceable>RULE</replaceable>
	      syntax. </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
    </refsect2>

    <refsect2>
	<title>Other Options</title>

	<variablelist>
	  <varlistentry>
	    <term>-m</term>
	    <listitem>
	      <para>Print each file mapped to or unmapped from address
    	      space of the traced process.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>-pc</term>
	    <listitem>
	      <para>Show the value of instruction pointer at each
	      reported event.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>-stack</term>
	    <listitem>
	      <para>Stack trace when traced symbol is hit.  Note that
	      this option also applies to traced system calls.  If you
	      need to cherry-pick which event should stack trace, use
	      # operator described in sections below.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
    </refsect2>

    &stackoptions;
    &standardoptions;

  </refsect1>

  <refsect1>
    <title>SYMBOL RULE SYNTAX</title>

    <para>To decide which PLT slots or entry points should be traced,
    following process takes place.  A set of symbols to trace
    ("working set") is initially empty.  Rules, if present, are then
    enumerated from left to right, and set is modified depending on
    the rules.  Rules are delimited by a comma.  Syntax of each rule
    is following:</para>

    <para>[-]<replaceable>pattern</replaceable>[/<replaceable>options</replaceable>]</para>

    <para>Without the optional &quot;-&quot; all symbols that match
    the <replaceable>pattern</replaceable> are added to the working
    set.  With &quot;-&quot;, matching symbols are removed.</para>

    <para>If &quot;/&quot; is present at the end of the rule,
    following letters are interpreted as rule flags.  Currently only
    one flag is available, &quot;s&quot;.  When present, it means
    ftrace should show a stack trace when it hits a symbol that
    matches this rule.</para>

    <para>When a &quot;-&quot; rule has an &quot;/s&quot; flag, the
    call should still be traced, but stack trace shouldn't be
    generated.</para>

    <para><replaceable>pattern</replaceable> defines which symbols or
    PLT slots from which libraries should be added or removed from
    working set.  Syntax of pattern is as follows:</para>

    <para><optional>#<replaceable>soname</replaceable>#</optional><!--
       --><optional><replaceable>filename.c</replaceable>#</optional><!--
       --><optional>(<replaceable>proc</replaceable>|<replaceable>line</replaceable>)#</optional><!--
       --><optional>plt:</optional>symbol<optional>@<replaceable>version</replaceable></optional></para>

    <para><replaceable>soname</replaceable> component is matched
    against a soname of a library in which we wish to trace the call.
    If the library has no associated soname (such as is usual in case
    of main executable), the match is done against the file name
    (without a path).  Two special sonames are distinguished: "MAIN",
    which always matches main executable; and "INTERP", which always
    matches ELF interpreter (dynamic linker) of the main executable.
    If the component is missing, then the rule is applicable in all
    libraries and in main executable.</para>

    <para><replaceable>filename.c</replaceable> component is matched
    against the name of a file where the symbol is defined.  NOTE:
    This is currently not implemented.</para>

    <para><replaceable>proc</replaceable> component is matched against
    the name of block surrounding the definition we wish to trace.  If
    the block doesn't have a name, you can instead refer to it with
    the <replaceable>line</replaceable> number that the block
    surrounds.  NOTE: This is currently not implemented.</para>

    <para><replaceable>symbol</replaceable> component is matched
    against the name of symbol under consideration.  If
    &quot;plt:&quot; prefix is present, the rule matches PLT entry
    associated with the symbol instead of the symbol itself.</para>

    <para><replaceable>version</replaceable> component is matched
    against version associated with symbol.  If the symbol has no
    associated version, it is considered to be an empty string.  (It
    is possible to request symbol without a version with the pattern
    "foo@".) NOTE: This is currently not implemented.</para>

    <para>All components are presented in glob syntax.  See glob(7)
    manual page for more details.  See below for examples.</para>
  </refsect1>

  <refsect1>
    <title>SYSCALL AND SIGNAL RULE SYNTAX</title>

    <para>Under the presence of the <option>-sys</option> (or
    <option>-sig</option>) option, ALL system calls (or signals) are
    ALWAYS traced.  This is a limitation of the ptrace layer.  The
    system call and signal rules however serve as a simple way of
    filtering out the output that you are not interested in.  In
    following paragraphs, the word &quot;event&quot; will be used to
    mean &quot;signal or syscall, whatever applies&quot;.</para>

    <para>The system call and signal rule syntax and semantics are the
    same as the symbol rule syntax:</para>

    <para>[-]<replaceable>pattern</replaceable>[/<replaceable>options</replaceable>]</para>

    <para>Event selection pattern syntax is then as follows:</para>

    <para><optional><replaceable>event name</replaceable>|<replaceable>event number</replaceable></optional></para>

    <para>When the pattern is empty, it matches all events known to
    frysk.  When the pattern is simple number (e.g.  &quot;12&quot;),
    then the pattern matches the event with the given number.
    Otherwise the pattern is considered to be case-insensitive glob,
    and matched against event names.  Whole name has to match for
    event to be a part of working set.</para>

    <para>Signal can be given both with and without leading
    &quot;sig&quot; (e.g. &quot;sigkill&quot; as well as
    &quot;kill&quot;).</para>
  </refsect1>

  <refsect1>
    <title>ADDRESS RULE SYNTAX</title>

    <para>The process of establishing a working set of addresses that
    should be traced is the same as for symbol rules, and the general
    syntax reflects that.  Each rule looks like this:</para>

    <para>[-]<replaceable>pattern</replaceable>[/<replaceable>options</replaceable>]</para>

    <para>Each pattern then looks like this:</para>

    <para><optional>#<replaceable>soname</replaceable>#</optional><optional>0x</optional><replaceable>address</replaceable></para>

    <para>Addresses are always given in hexadecimal notation, even if
    initial 0x is missing.</para>

    <para><replaceable>soname</replaceable> component is the same as
    in symbol tracing, i.e. it's matched against a soname of a library
    in which we wish to trace the address.  Same rules apply regarding
    INTERP and MAIN meta-sonames.  Refer to the chapter "SYMBOL RULE
    SYNTAX" for detailed description.</para>

    <para>Even though <replaceable>soname</replaceable> is optional,
    at least one soname has to be specified at the beginning of the
    <option>-addr</option> command.  That's because in general it
    makes no sense to want to trace the same address in ALL object
    files at once.  The components that are soname-less are assumed to
    have a soname of the previous component that has soname.</para>

    <informalexample>
      <para>For example, this will trace two addresses from the main
      binary, and stack trace one of them:</para>
      <cmdsynopsis><command>ftrace -addr=#MAIN#0x08052780/s,08049314 -- ls</command></cmdsynopsis>
    </informalexample>

    <para>If you need to trace the same address in several files, you
    can use the fact that the soname pattern is a glob.</para>

    <para>The addresses are assumed to be copied from readelf or
    objdump.  ftrace biases the value accordingly depending on where
    the module is actually mapped.</para>

  </refsect1>

  <refsect1>
    <title>EXAMPLES</title>

    <informalexample>
      <para>Trace all system calls:</para>
      <cmdsynopsis><command>ftrace -sys= ls</command></cmdsynopsis>
      <para>Trace variants of stat system call and moreover a system call #3:</para>
      <cmdsynopsis><command>ftrace -sys=&apos;*stat*,3&apos; ls</command></cmdsynopsis>
      <para>Various ways to tell ftrace that you want to stack trace on SIGUSR1:</para>
      <cmdsynopsis><command>ftrace -sig=USR1/s,usr1/s,SIGUSR1/s,sigusr1/s,10/s ~/sig</command></cmdsynopsis>
      <para>Trace all library calls:</para>
      <cmdsynopsis><command>ftrace -sym=plt:* ls</command></cmdsynopsis>
      <para>Trace all library calls to functions that contain
      substring "write" in their names:</para>
      <cmdsynopsis><command>ftrace -sym=plt:*write* ls</command></cmdsynopsis>
      <para>Trace memory functions done from libraries, i.e. not from
      main executable:</para>
      <cmdsynopsis><command>ftrace -sym=&apos;plt:*alloc,plt:free,-#MAIN#plt:*&apos; ls</command></cmdsynopsis>
      <para>Stack trace on everything, except for memory allocation
      functions (which should still be traced):</para>
      <cmdsynopsis><command>ftrace -sym=&apos;plt:*/s,-plt:*alloc/s,-plt:free/s&apos; ls</command></cmdsynopsis>
    </informalexample>

  </refsect1>

  <!-- refsect1>
    <title>EXIT STATUS</title>
    <para></para>
  </refsect1 -->
  
  <!-- refsect1>
    <title>RETURN VALUES</title>
    <para></para>
  </refsect1 -->
  
  <!-- refsect1>
    <title>ENVIRONMENT</title>
    <para></para>
  </refsect1 -->
  
  <!-- refsect1>
    <title>FILES</title>
    <para></para>
  </refsect1 -->

  <!-- refsect1>
    <title>DIAGNOSTICS</title>
    <para></para>
  </refsect1 -->
  
  <!-- refsect1>
    <title>ERRORS</title>
      <para></para>   
  </refsect1 -->    

  <refsect1>
    <title>SEE ALSO</title>
    <para>frysk(7), glob(7)</para>
  </refsect1>
  
  <!-- refsect1>
    <title>STANDARDS</title>
    <para></para>
  </refsect1 -->
  
  <!-- refsect1>
    <title>HISTORY</title>
    <para></para>
  </refsect1 -->
  
  <!-- refsect1>
    <title>AUTHORS</title>
    <para></para>
  </refsect1 -->
  
  <refsect1>
    <title>BUGS</title>
    <para>The option parser is greedy when looking for options so running ftrace on a program that uses options can be a problem, use -- to split between ftrace and the program. So change from:</para>
    <screen>~/prefix/bin/ftrace ~/prefix/lib64/frysk/funit --arch 32 frysk.proc.TestAbandon</screen>
    <para>to</para>
    <screen>~/prefix/bin/ftrace -- ~/prefix/lib64/frysk/funit --arch 32 frysk.proc.TestAbandon</screen>

    <para>Report bugs to <ulink url="http://sourceware.org/frysk"/></para>
  </refsect1>
  
  <!-- refsect1>
    <title>SECURITY CONSIDERATIONS</title>
  </refsect1 -->

</refentry>
