2007-09-06  Andrew Cagney  <cagney@redhat.com>

	* LinuxWaitBuilder.java (logMissing): New.
	(terminated(int,boolean,int,boolean)): Use.
	(exitEvent(pid,boolean,int,boolean): Use.
	
2007-08-15  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (Stepping.handleTrappedpEvent): Always check
	steppingBreakpoint.
	(checkBreakpointStepping): New helper method.
	(handleSignaledEvent): Use checkBreakpointStepping before continuing.
	(handleStoppedEvent): Likewise.

2007-08-02  Mark Wielaard  <mwielaard@redhat.com>

	* AddressSpaceByteBuffer.java (mem): New field.
	(pokesRequest): Likewise.
	(AddressSpaceByteBuffer): Initialize mem and pokesRequest.
	(PeeksRequest.peek): New method.
	(PeeksRequest.execute): use peek().
	(PeeksRequest.request): Likewise.
	(PokesRequest): New inner class.
	(poke): New method.
	* LinuxTask.java (getRawMemory): Use AddressSpaceByteBuffer.
	* LogicalMemoryBuffer.java (poke): New methods marked as unsupported.
	* MemorySpaceByteBuffer.java: Removed.
	* RegisterSetByteBuffer.java (peek): Use System.arraycopy().
	(poke): New method.
	* TestMemorySpaceByteBuffer.java: Removed.
	* TestByteBuffer.java: Merged in TestMemorySpaceByteBuffer tests,
	made test more generic to test all possible buffers, add bulk put
	tests.

2007-07-30  Mark Wielaard  <mwielaard@redhat.com>

	* AddressSpaceByteBuffer.java (Request): Make length and offset ints.
	(peek): Likewise.
	* LinuxTask.java (sendrecMemory): Set memory order.
	* LogicalMemoryBuffer.java (order): Remove field.
	(LogicalMemoryBuffer): Don't set order.
	(peek): Make length and offset ints.
	(subBuffer): Don't pass order.
	* MemorySpaceByteBuffer.java (Request): Make length and offset ints.
	(peek): Likewise.
	* TestMemorySpaceByteBuffer.java (AsyncPeeks): Make length int.

2007-07-23  Mark Wielaard  <mwielaard@redhat.com>

	* package.html: New file describing implementation details of
	Instruction and Code observers.

2007-07-20  Mark Wielaard  <mwielaard@redhat.com>

	* AddressSpaceByteBuffer.java (addressSpace): Now protected.
	(pid): Likewise.
	(AddressSpaceByteBuffer): Likewise.
	* LinuxTask.java (getRawMemory): New method name for sendrecMemory.
	(sendrecMemory): Implement through LogicalMemoryBuffer.
	* LogicalMemoryBuffer.java: New class.
	
2007-07-18  Andrew Cagney  <cagney@redhat.com>

	* MemorySpaceByteBuffer.java: Replace StatelessFile with Mem.
	(MemorySpaceByteBuffer): Remove AddressSpace parameter.
	(PeekRequest, PeeksRequest, PokeRequest): Make static.  Add local
	pid field.
	(PeeksRequest): Always use Mem when available.
	* LinuxTask.java: Update constructor call.
	* TestMemorySpaceByteBuffer.java: Ditto.
	* TestByteBuffer.java: Ditto.

	* LinuxProc.java: Use frysk.sys.proc.Exe.get.  Validate the
	returned string, returning NULL when a problem.

	* MemorySpaceByteBuffer.java: Revert below change.
	
	* MemorySpaceByteBuffer.java: Replace StatelessFile with Mem.
	(MemorySpaceByteBuffer): Remove AddressSpace parameter.
	(PeekRequest, PeeksRequest, PokeRequest): Make static.  Add local
	pid field.
	(PeeksRequest): Always use Mem when available.

2007-07-16  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxProc.java (sendrecExe): Use File.getCanonicalPath().

2007-07-09  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (wantToAttachContinue): Add
	handleAddObservation() and handleUnblock().
	
2007-07-05  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java: Replace frysk.proc.TaskEvent with
	frysk.event.Event.

2007-06-27  Mark Wielaard  <mwielaard@redhat.com>

	* Breakpoint.java (prepareStep): Don't reset pc.
	(stepDone): Only set breakpoint back when installed.

	* LinuxTaskState.java (Running.setupSteppingBreakpoint):
	New method.
	(Running.sendContine): Prepare breakpoint step when breakpoint
	is installed and about to be stepped.
	(Running.handleTrappedEvent): Call setupSteppingBreakpoint.
	(Stepping.handleTrappedEvent): Likewise.

2007-06-18  Andrew Cagney  <cagney@redhat.com>

	* Rename package frysk.proc.ptrace to frysk.proc.live.

2007-06-25  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTask.java (sendContinue): Don't set step_send.
	(sendSyscallContinue): Likewise.
	(sendStepInstruction): Likewise.
	* LinuxTaskState.java (sendContinue): Mark package private. Return
	state based on observers and just send ptrace command.
	(blockedContinue): Mark package private.
	(Running.handleTrapped): Factor out stepping related handling.
	(Stepping): New subclass of Running which handles all stepping
	logic in handleTrappedEvent().

2007-06-22  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java (AsyncModify): Make local to
	verifyAsyncModify.
	(verifyAsyncModify): Replace AsyncModify.call.  Call
	EventLoop.runPending.  Check for timeout.
	(testAsyncRegisterSet, testAsyncAddressSpace)
	(testAsyncMemorySpace): Call verifyAsyncModify.

2007-06-21  Kris Van Hees  <kris.van.hees@oracle.com>

	* TestMemorySpaceByteBuffer.java: Added test case for sync and async
	multi-byte MemorySpaceByteBuffer peek requests.  Currently uses an ugly
	trick to get around a problem in frysk.event.EventLoop to ensure that
	the event loop TID is always set correctly.

2007-06-20  Kris Van Hees  <kris.van.hees@oracle.com>

	* MemorySpaceByteBuffer.java: PeeksRequest.request(...) was not setting
	the instance variables of the PeeksRequest in the case where the code
	is not executing on the event loop thread.

2007-06-20  Chris Moller  <cmoller@redhat.com>

	* LinuxTask.java (sendrecMemory): Replaced AddressSpaceByteBuffer
	with the faster pread-based MemorySpaceByteBuffer

2007-06-20  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java
	(blockOrAttachContinue): Set just_started marker.
	(sendContinue): Reset just_started marker unless first step.
	(Running.handleTrapped): Check and reset just_started marker.

2007-06-19  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (clonedState): No more syscallRunning and
	inSyscallRunningTraced.
	(transitionToRunningState): Use Running.sendContinue() return value.
	(attemptContinue): Likewise.
	(blockedOffspring.handleUnblock): Likewise.
	(Running.syscalltracing): Removed.
	(Running): Removed syscalltracing argument.
	(sendContinue): Return new state. Check number of syscallObservers.
	(handleSignaledEvent): Return sendContinue value.
	(handleStoppedEvent(: Likewise.
	(handleTerminatingEvent): Likewise.
	(handleExecedEvent): Simplify logic, don't check observer, but use
	sendContinue.
	(handleClonedEvent): Return sendContinue value.
	(handleForkedEvent): Likewise.
	(handleTrappedEvent): Likewise.
	(handleSyscalledEvent): Check number of syscallObservers and return
	sendContinue value.
	(syscallRunning): Removed.
	(inSyscallRunningTraced): Removed.
	(BlockedSignal.handleUnblock): Return sendContinue value.

2007-06-14  Tim Moore  <timoore@redhat.com>

	* LinuxTaskState.java: (BlockedSignal.handleUnblock): At FINEST
	logging levels print out the blocker.

2007-06-12  Nurdin Premji  <npremji@redhat.com>

	* LinuxTask.java (sendContinue): Call incrementMod() to show task has been
	modified.
	(sendStepInstruction): Ditto.
	(sendSyscallContinue): Ditto.

2007-05-25  Tim Moore  <timoore@redhat.com>

	* LinuxTaskState.java (BlockedSignal.handleTerminatedEvent): New
	method, copied from Running state.

2007-05-22  Chris Moller  <moller@mollerware.com>

	* MemorySpaceByteBuffer.java: Provides a new class that is a plug-in
	replacement for AddressSpaceByteBuffer except that it attempts to
	pread() /proc/<pid>/mem (via the StatelessFile class) when doing
	multi-word peeks.  If that attempt fails, it falls back on
	multiple peeks.  All other operations, including single-word
	peeks, are identical to those in AddressSpaceByteBuffer.
	* TestByteBuffer.java: Adds tests for MemorySpaceByteBuffer.  Also
	changes the strategy for the verifySlice(...) method to use
	multi-word peeks.  This has the effect of using the pread() stuff
	for MemorySpaceByteBuffer and pushing the peek-loop downstream for
	AddressSpaceByteBuffer. 

2007-05-19  Andrew Cagney  <cagney@redhat.com>

	* LinuxTaskState.java (handleAttachedTerminated, detached)
	(attaching, Attached, StartMainTask, StartClonedTask, Running)
	(running, syscallRunning, inSyscallRunning)
	(inSyscallRunningTraced, detaching, BlockedSignal,
	(blockedContinue, SyscallBlockedInSyscall)
	(syscallBlockedInSyscallContinue, blockedInExecSyscall)
	(disappeared, getDestroyed, destroyed): Move to here from
	frysk.proc.LinuxPtraceTaskState.

2007-05-18  Andrew Cagney  <cagney@redhat.com>

	* LinuxProcState.java: Move to here from
	frysk.proc.LinuxPtraceProcState.
	* LinuxProc.java: Update.

	* LinuxTask.java (sendContinue, sendStepInstruction, sendStop)
	(sendSetOptions, sendAttach, sendDetach, sendSyscallContinue)
	(startTracingSyscalls, stopTracingSyscalls): Delete.

2007-05-17  Andrew Cagney  <cagney@redhat.com>

	* LinuxHost.java (ProcChanges, sendRefresh)
	(sendCreateAttachedProc, sendrecSelf, sendGetProc): Move to here
	from frysk.proc.LinuxPtraceHost.

	* LinuxProc.java (sendrecCommand, getStat, getInitialState)
	(sendRefresh): Move to here from frysk.proc.LinuxPtraceProc.

	* LinuxTask.java (sendContinue, sendSyscallContinue)
	(sendStepInstruction, sendStop, sendSetOptions, sendAttach)
	(sendDetach, startTracingSyscalls, stopTracingSyscalls): Move to
	here from frysk.proc.LinuxPtraceTask.

2007-05-16  Andrew Cagney  <cagney@redhat.com>

	* LinuxProc.java (sendrecAuxv, sendrecMaps, sendrecCmdLine)
	(sendrecGID, sendrecUID, sendrecExe, sendrecIsa): Move to here
	from frysk.proc.LinuxPtraceProc.

	* LinuxTask.java (sendrecRegisterBanks, sendrecMemory)
	(sendrecIsa): Move to here from frysk.proc.LinuxPtraceTask.

2007-05-15  Andrew Cagney  <cagney@redhat.com>

	* LinuxHost.java: Add LinuxWaitBuilder to event-loop.
	* LinuxWaitBuilder.java: Moved to here from
	frysk.proc.LinuxPtraceWaitBuilder.
	* LinuxTask.java (processExecedEvent, processTerminatedEvent)
	(processSyscalledEvent, processDisappearedEvent)
	(processTerminatingEvent, processSignaledEvent)
	(processTrappedEvent, processStoppedEvent, processForkedEvent)
	(processClonedEvent): Move to here in from frysk.proc.Task.

	* LinuxProc.java: New file.

2007-05-14  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java: New file.
	* LinuxTaskState.java: New file.	

	* LinuxHost.java: New file.

2007-05-07  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java: Rename .memoryByteBuffer to
	.addressSpaceByteBuffer.

2007-05-02  Andrew Cagney  <cagney@redhat.com>

	* AddressSpaceByteBuffer.java: Eliminate use of
	frysk.sys.PtraceServer by using frysk.sys.Ptrace.AddressSpace
	.peek and .poke methods.
	* RegisterSetByteBuffer.java: Ditto using
	frysk.sys.Ptrace.RegisterSet.

2007-04-19  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java (memoryByteBuffer, registerByteBuffer): Add.
	(setUp): Set.  For registerByteBuffer, only when REGS is valid.
	(verifySlice): New.
	(testSliceAddressSpace, testSliceRegisterSet): Use verifySlice.
	(verifyModify, testModifyRegisterSet, testModifyAddressSpace): New.
	(AsyncModify, testAsyncRegisterSet, testAsyncAddressSpace): New.
	* RegisterSetByteBuffer.java (GetRegs.execute, SetRegs.execute):
	Use the PtraceServer.
	(GetRegs.request, SetRegs.request): Call execute.

2007-04-18  Andrew Cagney  <cagney@redhat.com>

	* AddressSpaceByteBuffer.java (PeekRquest, PokeRequest)
	(PeeksRequest): New classes.  Use to route peek/poke requests
	through the event-loop thread.
	* RegisterSetByteBuffer.java (GetRegs, SetRegs): Ditto.
	
2007-04-15  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java: New file.
	* RegisterSetByteBuffer.java (subBuffer): Add.
	* AddressSpaceByteBuffer.java (subBuffer): Ditto.

	* AddressSpaceByteBuffer.java (peek(long,byte[],long,long): Add.

2007-04-13  Andrew Cagney  <cagney@redhat.com>

	* AddressSpaceByteBuffer.java: New.
	* RegisterSetByteBuffer.java: New.

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
End:
