2008-01-14  Phil Muldoon  <pmuldoon@redhat.com>

	* LinuxPtraceProc.java (getMaps): Remove if maps == null.
	Rewrite using better variable names.

2008-01-11  Andrew Cagney  <cagney@redhat.com>

	* TestTaskObserverCode.java: Move from
	frysk.proc.TestTaskObserverCode.
	* LinuxPtraceTask.java (getRawMemory()): Make package-private.
	* LiveTask.java (getRawMemory()): Declare.
	* Breakpoint.java: Update.
	* Instruction.java: Update.
	
	* LiveTask.java (handleAddObservation(TaskObservation))
	(handleDeleteObservation(TaskObservation)): Declare.
	* TaskObservation.java: Move from frysk.proc.TaskObservation.
	* TaskObservable.java: Move from frysk.proc.TaskObservable.
	* LinuxPtraceTask.java (handleAddObservation(TaskObservation))
	(handleDeleteObservation(TaskObservation)): Make pakage-private.
	* LinuxPtraceProc.java: Update.
	* LinuxPtraceTaskState.java: Update.

2008-01-07  Andrew Cagney  <cagney@redhat.com>

	* LinuxPtraceHost.java (requestProc(ProcId,FindProc)): Replace
	sendRefresh(ProcId,FindProc).

	* LinuxPtraceHost.java: Update; implement FindProc.
	(sendGetProc): Delete.
	
	* Breakpoint.java: Moved from frysk.proc.live.
	* BreakpointAddress.java: Ditto.
	* Isa.java: Ditto.
	* LinuxIA32.java: Ditto.
	* LinuxX8664.java: Ditto.
	* IsaPowerPC.java: Ditto.
	* LinuxPPC32.java: Ditto.
	* LinuxPPC64.java: Ditto.
	* IsaFactory.java: Ditto.
	* Instruction.java: Ditto.
	* IA32InstructionParser.java: Ditto.
	* X8664InstructionParser.java: Ditto.
	* Proc.java (getOutOfLineAddress()): Move from frysk.proc.Proc.
	(breakpoints): Ditto.
	(requestedOutofLineAddresses): Ditto.
	(outOfLineAddresses): Ditto.
	(doneOutOfLine()): Ditto.
	* LinuxPtraceTask.java (steppingBreakpoint): Move from
	frysk.proc.Task.
	* TestByteBuffer.java: Update.
	* LogicalMemoryBuffer.java: Update.
	* LinuxPtraceTaskState.java: Update.
	
	* LinuxPtraceTask.java (getIsaFIXME()): Rename sendrecIsa().
	* LinuxPtraceTaskState.java: Update.

	* LinuxPtraceProc.java (getIsa(), isaXXX): Delete.

	* LinuxPtraceTask.java (setPC(long), getPC()): New.
	(pcRegister, pcRegister()): New.
	
	* LinuxPtraceTask.java (clearIsa()): New.

	* LinuxPtraceTaskState.java: Update; Use Task.setPC(long).

	* State.java: Moved from frysk.proc.State.
	* LinuxPtraceProcState.java: Update.
	* LinuxPtraceTaskState.java: Update.

	* LinuxPtraceTask.java (modCount, incrementMod(), getMod()): New.

	* LinuxPtraceProc.java (getCommand()): Replace sendrecCommand().
	(getExe()): Replace sendrecExe().
	(getUID()): Replace sendrecUID().
	(getGID()): Replace sendrecGID().
	(getCmdLine()): Replace sendrecCmdLine().
	(getMaps()): Replace sendrecMaps().
	(getAuxv()): Replace sendrecAuxv().
	(getIsa()): Replace sendrecIsa().
	
	* LinuxPtraceProc.java (requestAddObserver): Make package-private.
	(requestAddSyscallObserver): Ditto.
	(requestDeleteObserver): Ditto.
	(requestDeleteSyscallObserver): Ditto.
	(requestAddCodeObserver): Ditto.
	(requestDeleteCodeObserver): Ditto.
	(requestAddInstructionObserver): Ditto.
	(requestDeleteInstructionObserver): Ditto.
	* LinuxPtraceTask.java: Update.

	* LinuxPtraceTask.java (justStartedXXX): Move to here from
	Task.just_started.
	(sigSendXXX): Move to here from Task.sig_send.
	(syscallSigretXXX): Move to here from Task.syscall_sigret.
	* LinuxPtraceTaskState.java: Update.

2008-01-04  Andrew Cagney  <cagney@redhat.com>

	* LinuxPtraceTask.java (terminatingObservers): New.
	(notifyTerminating(boolean,int)): New.
	(terminatedObservers, notifyTerminated(boolean,int)): New.
	(execedObservers, notifyExeced()): New.
	(signaledObservers, notifySignaled(int)): New.
	(syscallObservers, notifySyscallEnter(), notifySyscallExit()): New.
	(clonedObservers, notifyClonedParent(Task))
	(notifyClonedOfspring()): New.
	(forkedObservers, notifyForkedParent(Task))
	(notifyForkedOfspring()): New.
	(instructionObservers, notifyInstruction()): New.
	(attachedObservers, notifyAttached()): New.
	(codeObservers, notifyCodeBreakpoint()): New.
	* LinuxPtraceProc.java: Update.
	
	* LinuxPtraceTask.java (removeObservers()): Copied to here from
	frysk.proc.Task.

	* LinuxPtraceProc.java (performRemoval()): Make package-private.
	(performTaskAttachCompleted(Task)): Ditto.
	(performTaskDetachCompleted(Task)): Ditto.
	(performTaskDetachCompleted(Task,Task)): Ditto.
	* LinuxPtraceTaskState.java: Update.
	* LinuxPtraceHost.java: Update.

	* LinuxPtraceProc.java (SyscallAction): Replace Task with
	LinuxPtraceTask.
	
	* LinuxPtraceTask.java (performRemoval()): Make package-private..
	(performContinue()): Ditto.
	(performAttach(boolean)): Ditto.
	(performDetach(boolean)): Ditto.
	(handleUnblock(TaskObserver)): Ditto..
	* LinuxPtraceProc.java: Update.	

	* LinuxPtraceTaskState.java: Replace Task with LinuxPtraceTask and
	Proc with LinuxPtraceProc.
	* LinuxPtraceProcState.java: Ditto.
	* LinuxPtraceProc.java: Update.
	* LinuxPtraceTask.java: Update.

	* LinuxPtraceHost.java (getSelf()): Replace sendrecSelf(). 
	
	* LinuxPtraceHost.java (requestRefreshXXX()): New.
	(sendRefresh(boolean)): Make private.
	
	* LinuxPtraceHost.java (requestCreateAttachedProc(String,String,String,String[],Attached)): New.
	(sendCreateAttachedProc(String,String,String,String[],Attached)): Delete.
	* LinuxPtraceProcState.java: Merge in deleted
	frysk.proc.TaskState.
	* LinuxPtraceProc.java: Update.

	* LinuxPtraceTaskState.java: Merge in deleted
	frysk.proc.TaskState.
	* LinuxPtraceTask.java: Update.

	* LiveProc.java: Move all state code from here ...
	* LinuxPtraceProc.java: ... to here.

	* LiveTask.java: Move all state code from here ...
	* LinuxPtraceTask.java: ... to here.

2008-01-03  Andrew Cagney  <cagney@redhat.com>

	* LiveTask.java (requestAddInstructionObserver(TaskObserver.Instruction)): New.
	(requestDeleteInstructionObserver(TaskObserver.Instruction)): New.

2008-01-02  Andrew Cagney  <cagney@redhat.com>

	* LinuxPtraceHost.java: Rename LinuxHost.java.
	* LinuxPtraceProc.java: Rename LinuxProc.java.
	* LinuxPtraceTask.java: Rename LinuxTask.java.
	* LinuxPtraceProcState.java: Rename LinuxProcState.java.
	* LinuxPtraceTaskState.java: Rename LinuxTaskState.java.
	* LinuxWaitBuilder.java: Update.

	* LiveTask.java: Set newState in constructor.
	(set(TaskState)): Make package private.

	* LinuxProcState.java (initial(boolean)): Replace
	initial(Proc,boolean).
	(Detaching()): New constructor.
	* LiveProc.java (setStateFIXME(ProcState)): Delete.
	(LiveProc(Host,Proc,ProcId,ProcState)): Replace
	LiveProc(Host,Proc.ProcId).
	(LiveProc(Task,ProcId,ProcState)): Replace LiveProc(Task,ProcId).
	* LinuxProc.java (getInitialState(boolean)): Delete.

	* LinuxTask.java (LinuxTask(LiveProc,Attached)): Rename
	LinuxTask(Proc,TaskObserver.Attached).
	* LiveProc.java (handleAddObservation(TaskObservation)): Make
	package private.
	* LiveTask.java (LiveTask(LiveProc,Attached,TaskState)): Rename
	LiveTask(Proc,Attached,TaskState); call
	LiveProc.handleAddObservation.
	* LinuxHost.java: Update.
	* LinuxWaitBuilder.java: Update.

	* LiveProc.java (oldState, newState): New.
	(BreakpointAction): New.
	(InstructionAction): New.
	(SyscallAction): New.
	(getStateFIXME()): New.
	(handleAddObservation(TaskObservation)): New.
	(oldState()): New.
	(performDetach()): New.
	(performRemoval()): New.
	(performTaskAttachCompleted(Task)): New.
	(performTaskDetachCompleted(Task)): New.
	(performTaskDetachCompleted(Task,Task)): New.
	(requestAddCodeObserver(Task,TaskObservable,TaskObserver.Code,long)): New.
	(requestAddInstructionObserver(Task,TaskObservable,TaskObserver.Instruction)): New.
	(requestAddObserver(Task,TaskObservable,TaskObserver)): New.
	(requestAddSyscallObserver(Task,TaskObservable,TaskObserver)): New.
	(requestDeleteCodeObserver(Task,TaskObservable,TaskObserver.Code,long)): New.
	(requestDeleteInstructionObserver(Task,TaskObservable,TaskObserver.Instruction)): New.
	(requestDeleteObserver(Task,TaskObservable,TaskObserver)): New.
	(requestDeleteSyscallObserver(Task,TaskObservable,TaskObserver)): New.
	(requestRefresh()): New.
	(setStateFIXME(ProcState)): New.

	* TestByteBuffer.java: Update; frysk.proc.dummy.Proc renamed to
	DummyProc.

	* LiveTask.java (requestUnblock(TaskObserver)): New.
	(requestAddClonedObserver(TaskObserver.Cloned)): New.
	(requestDeleteClonedObserver(TaskObserver.Cloned)): New.
	(requestAddAttachedObserver(TaskObserver.Attached)): New.
	(requestDeleteAttachedObserver(TaskObserver.Attached)): New.
	(requestAddForkedObserver(TaskObserver.Forked)): New.
	(requestDeleteForkedObserver(TaskObserver.Forked)): New.
	(requestAddTerminatedObserver(TaskObserver.Terminated)): New.
	(requestDeleteTerminatedObserver(TaskObserver.Terminated)): New.
	(requestAddTerminatingObserver(TaskObserver.Terminating)): New.
	(requestDeleteTerminatingObserver(TaskObserver.Terminating)): New.
	(requestAddExecedObserver(TaskObserver.Execed)): New.
	(requestDeleteExecedObserver(TaskObserver.Execed)): New.
	(requestAddSyscallsObserver(TaskObserver.Syscalls)): New.
	(requestDeleteSyscallsObserver(TaskObserver.Syscalls)): New.
	(requestAddSignaledObserver(TaskObserver.Signaled)): New.
	(requestDeleteSignaledObserver(TaskObserver.Signaled)): New.
	(requestAddCodeObserver(TaskObserver.Code)): New.
	(requestDeleteCodeObserver(TaskObserver.Code)): New.

	* LiveTask.java (handleAddObservation(TaskObservation)): New.
	(handleDeleteObservation(TaskObservation)): New.
	(performContinue()): New.
	(performRemoval()): New.
	(performAttach()): New.
	(performDetach(boolean)): New.
	(newState): New.
	(oldState): New.
	(getState()): New.
	(set(TaskState)): New.
	(oldState()): New.
	(handleUnblock(TaskObserver)): New.
	(getStateFIXME()): New.

2007-12-20  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java (sendrecRegisterBuffersFIXME()): Delete.

2007-12-19  Andrew Cagney  <cagney@redhat.com>

	Bank register code moved to frysk.bank.
	* LinuxTask.java: Update.
	* PtraceRegisterBanksFactory.java: Update.

2007-12-05  Jose Flavio Aguilar Paulino <joseflavio@gmail.com>

	* PtraceRegisterBanksFactory.java: Removing PowerPC useless
	debug information.

2007-12-04  Andrew Cagney  <cagney@redhat.com>

	Merge frysk.sys.Sig into frysk.sys.Signal.
	* LinuxWaitBuilder.java: Update.
	* LinuxTask.java: Update.
	* LinuxTaskState.java: Update.

2007-12-03  Andrew Cagney  <cagney@redhat.com>

	* TestRegs.java (testFloatRegisters()): Delete.
	
	* TestRegs.java (testVectorRegisters()): Delete.

2007-11-29  Andrew Cagney  <cagney@redhat.com>

	* TestCoreRegs.java (testFloatRegisters())
	(testVectorRegisters()): New; mark as unresolved.

	* TestRegs.java: Moved from frysk.proc.TestRegs.

2007-11-27  Jose Flavio Aguilar Paulino <joseflavio@gmail.com>

	* PtraceRegisterBanksFactory.java: Putting single PowerPC ptrace
	register bank (holds all registers with different sizes, even
	floating pointer ones and vector register.

2007-11-22  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java (testMemoryBufferCapacity()): Mark as
	unresolved, bug 5394.:

2007-11-22  Zhao Shujing  <pearly.zhao@oracle.com>
	
	* TestByteBuffer.java(testMemoryBufferCapacity()): New test.

2007-10-29  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (sendContinue): Add logging.
	
2007-10-20  Mark Wielaard  <mwielaard@redhat.com>

	Fixes bug #5201
	* LogicalMemoryBuffer.java (poke): Allow poke when no breakpoints
	in the way.
	* TestByteBuffer.java: Enable LogicalMemoryBuffer write tests.

2007-10-17  Andrew Cagney  <cagney@redhat.com>

	* LiveHost.java: New.
	* LiveProc.java: New.
	* LiveTask.java: New.
	* LinuxHost.java: Extend LiveHost.
	* LinuxProc.java: Extend LiveProc.
	* LinuxTask.java: Extend LiveTask.

	* LinuxHost.java: Update; import frysk.proc.FindProc.

2007-10-14  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java: Update; use ISA's order().

2007-10-12  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java (sendrecRegisterBanks()): Implement.

	* PtraceRegisterBanksFactory.java: New file.

	* LinuxTask.java: Update; renamed sendrecRegisterBanks() to
	sendrecRegisterBuffersFIXME.

2007-10-02  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java (sendrecISA()): New.

2007-09-21  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java: Update; LocalMemory's getVal* and getFunc*
	renamed to getData* and getCode*.

2007-09-07  Andrew Cagney  <cagney@redhat.com>

	* LinuxWaitBuilder.java (logMissing): Expand log message.

2007-09-06  Andrew Cagney  <cagney@redhat.com>

	* LinuxWaitBuilder.java (logMissing): New.
	(terminated(int,boolean,int,boolean)): Use.
	(exitEvent(pid,boolean,int,boolean): Use.
	
2007-08-15  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (Stepping.handleTrappedpEvent): Always check
	steppingBreakpoint.
	(checkBreakpointStepping): New helper method.
	(handleSignaledEvent): Use checkBreakpointStepping before continuing.
	(handleStoppedEvent): Likewise.

2007-08-02  Mark Wielaard  <mwielaard@redhat.com>

	* AddressSpaceByteBuffer.java (mem): New field.
	(pokesRequest): Likewise.
	(AddressSpaceByteBuffer): Initialize mem and pokesRequest.
	(PeeksRequest.peek): New method.
	(PeeksRequest.execute): use peek().
	(PeeksRequest.request): Likewise.
	(PokesRequest): New inner class.
	(poke): New method.
	* LinuxTask.java (getRawMemory): Use AddressSpaceByteBuffer.
	* LogicalMemoryBuffer.java (poke): New methods marked as unsupported.
	* MemorySpaceByteBuffer.java: Removed.
	* RegisterSetByteBuffer.java (peek): Use System.arraycopy().
	(poke): New method.
	* TestMemorySpaceByteBuffer.java: Removed.
	* TestByteBuffer.java: Merged in TestMemorySpaceByteBuffer tests,
	made test more generic to test all possible buffers, add bulk put
	tests.

2007-07-30  Mark Wielaard  <mwielaard@redhat.com>

	* AddressSpaceByteBuffer.java (Request): Make length and offset ints.
	(peek): Likewise.
	* LinuxTask.java (sendrecMemory): Set memory order.
	* LogicalMemoryBuffer.java (order): Remove field.
	(LogicalMemoryBuffer): Don't set order.
	(peek): Make length and offset ints.
	(subBuffer): Don't pass order.
	* MemorySpaceByteBuffer.java (Request): Make length and offset ints.
	(peek): Likewise.
	* TestMemorySpaceByteBuffer.java (AsyncPeeks): Make length int.

2007-07-23  Mark Wielaard  <mwielaard@redhat.com>

	* package.html: New file describing implementation details of
	Instruction and Code observers.

2007-07-20  Mark Wielaard  <mwielaard@redhat.com>

	* AddressSpaceByteBuffer.java (addressSpace): Now protected.
	(pid): Likewise.
	(AddressSpaceByteBuffer): Likewise.
	* LinuxTask.java (getRawMemory): New method name for sendrecMemory.
	(sendrecMemory): Implement through LogicalMemoryBuffer.
	* LogicalMemoryBuffer.java: New class.
	
2007-07-18  Andrew Cagney  <cagney@redhat.com>

	* MemorySpaceByteBuffer.java: Replace StatelessFile with Mem.
	(MemorySpaceByteBuffer): Remove AddressSpace parameter.
	(PeekRequest, PeeksRequest, PokeRequest): Make static.  Add local
	pid field.
	(PeeksRequest): Always use Mem when available.
	* LinuxTask.java: Update constructor call.
	* TestMemorySpaceByteBuffer.java: Ditto.
	* TestByteBuffer.java: Ditto.

	* LinuxProc.java: Use frysk.sys.proc.Exe.get.  Validate the
	returned string, returning NULL when a problem.

	* MemorySpaceByteBuffer.java: Revert below change.
	
	* MemorySpaceByteBuffer.java: Replace StatelessFile with Mem.
	(MemorySpaceByteBuffer): Remove AddressSpace parameter.
	(PeekRequest, PeeksRequest, PokeRequest): Make static.  Add local
	pid field.
	(PeeksRequest): Always use Mem when available.

2007-07-16  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxProc.java (sendrecExe): Use File.getCanonicalPath().

2007-07-09  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (wantToAttachContinue): Add
	handleAddObservation() and handleUnblock().
	
2007-07-05  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java: Replace frysk.proc.TaskEvent with
	frysk.event.Event.

2007-06-27  Mark Wielaard  <mwielaard@redhat.com>

	* Breakpoint.java (prepareStep): Don't reset pc.
	(stepDone): Only set breakpoint back when installed.

	* LinuxTaskState.java (Running.setupSteppingBreakpoint):
	New method.
	(Running.sendContine): Prepare breakpoint step when breakpoint
	is installed and about to be stepped.
	(Running.handleTrappedEvent): Call setupSteppingBreakpoint.
	(Stepping.handleTrappedEvent): Likewise.

2007-06-18  Andrew Cagney  <cagney@redhat.com>

	* Rename package frysk.proc.ptrace to frysk.proc.live.

2007-06-25  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTask.java (sendContinue): Don't set step_send.
	(sendSyscallContinue): Likewise.
	(sendStepInstruction): Likewise.
	* LinuxTaskState.java (sendContinue): Mark package private. Return
	state based on observers and just send ptrace command.
	(blockedContinue): Mark package private.
	(Running.handleTrapped): Factor out stepping related handling.
	(Stepping): New subclass of Running which handles all stepping
	logic in handleTrappedEvent().

2007-06-22  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java (AsyncModify): Make local to
	verifyAsyncModify.
	(verifyAsyncModify): Replace AsyncModify.call.  Call
	EventLoop.runPending.  Check for timeout.
	(testAsyncRegisterSet, testAsyncAddressSpace)
	(testAsyncMemorySpace): Call verifyAsyncModify.

2007-06-21  Kris Van Hees  <kris.van.hees@oracle.com>

	* TestMemorySpaceByteBuffer.java: Added test case for sync and async
	multi-byte MemorySpaceByteBuffer peek requests.  Currently uses an ugly
	trick to get around a problem in frysk.event.EventLoop to ensure that
	the event loop TID is always set correctly.

2007-06-20  Kris Van Hees  <kris.van.hees@oracle.com>

	* MemorySpaceByteBuffer.java: PeeksRequest.request(...) was not setting
	the instance variables of the PeeksRequest in the case where the code
	is not executing on the event loop thread.

2007-06-20  Chris Moller  <cmoller@redhat.com>

	* LinuxTask.java (sendrecMemory): Replaced AddressSpaceByteBuffer
	with the faster pread-based MemorySpaceByteBuffer

2007-06-20  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java
	(blockOrAttachContinue): Set just_started marker.
	(sendContinue): Reset just_started marker unless first step.
	(Running.handleTrapped): Check and reset just_started marker.

2007-06-19  Mark Wielaard  <mwielaard@redhat.com>

	* LinuxTaskState.java (clonedState): No more syscallRunning and
	inSyscallRunningTraced.
	(transitionToRunningState): Use Running.sendContinue() return value.
	(attemptContinue): Likewise.
	(blockedOffspring.handleUnblock): Likewise.
	(Running.syscalltracing): Removed.
	(Running): Removed syscalltracing argument.
	(sendContinue): Return new state. Check number of syscallObservers.
	(handleSignaledEvent): Return sendContinue value.
	(handleStoppedEvent(: Likewise.
	(handleTerminatingEvent): Likewise.
	(handleExecedEvent): Simplify logic, don't check observer, but use
	sendContinue.
	(handleClonedEvent): Return sendContinue value.
	(handleForkedEvent): Likewise.
	(handleTrappedEvent): Likewise.
	(handleSyscalledEvent): Check number of syscallObservers and return
	sendContinue value.
	(syscallRunning): Removed.
	(inSyscallRunningTraced): Removed.
	(BlockedSignal.handleUnblock): Return sendContinue value.

2007-06-14  Tim Moore  <timoore@redhat.com>

	* LinuxTaskState.java: (BlockedSignal.handleUnblock): At FINEST
	logging levels print out the blocker.

2007-06-12  Nurdin Premji  <npremji@redhat.com>

	* LinuxTask.java (sendContinue): Call incrementMod() to show task has been
	modified.
	(sendStepInstruction): Ditto.
	(sendSyscallContinue): Ditto.

2007-05-25  Tim Moore  <timoore@redhat.com>

	* LinuxTaskState.java (BlockedSignal.handleTerminatedEvent): New
	method, copied from Running state.

2007-05-22  Chris Moller  <moller@mollerware.com>

	* MemorySpaceByteBuffer.java: Provides a new class that is a plug-in
	replacement for AddressSpaceByteBuffer except that it attempts to
	pread() /proc/<pid>/mem (via the StatelessFile class) when doing
	multi-word peeks.  If that attempt fails, it falls back on
	multiple peeks.  All other operations, including single-word
	peeks, are identical to those in AddressSpaceByteBuffer.
	* TestByteBuffer.java: Adds tests for MemorySpaceByteBuffer.  Also
	changes the strategy for the verifySlice(...) method to use
	multi-word peeks.  This has the effect of using the pread() stuff
	for MemorySpaceByteBuffer and pushing the peek-loop downstream for
	AddressSpaceByteBuffer. 

2007-05-19  Andrew Cagney  <cagney@redhat.com>

	* LinuxTaskState.java (handleAttachedTerminated, detached)
	(attaching, Attached, StartMainTask, StartClonedTask, Running)
	(running, syscallRunning, inSyscallRunning)
	(inSyscallRunningTraced, detaching, BlockedSignal,
	(blockedContinue, SyscallBlockedInSyscall)
	(syscallBlockedInSyscallContinue, blockedInExecSyscall)
	(disappeared, getDestroyed, destroyed): Move to here from
	frysk.proc.LinuxPtraceTaskState.

2007-05-18  Andrew Cagney  <cagney@redhat.com>

	* LinuxProcState.java: Move to here from
	frysk.proc.LinuxPtraceProcState.
	* LinuxProc.java: Update.

	* LinuxTask.java (sendContinue, sendStepInstruction, sendStop)
	(sendSetOptions, sendAttach, sendDetach, sendSyscallContinue)
	(startTracingSyscalls, stopTracingSyscalls): Delete.

2007-05-17  Andrew Cagney  <cagney@redhat.com>

	* LinuxHost.java (ProcChanges, sendRefresh)
	(sendCreateAttachedProc, sendrecSelf, sendGetProc): Move to here
	from frysk.proc.LinuxPtraceHost.

	* LinuxProc.java (sendrecCommand, getStat, getInitialState)
	(sendRefresh): Move to here from frysk.proc.LinuxPtraceProc.

	* LinuxTask.java (sendContinue, sendSyscallContinue)
	(sendStepInstruction, sendStop, sendSetOptions, sendAttach)
	(sendDetach, startTracingSyscalls, stopTracingSyscalls): Move to
	here from frysk.proc.LinuxPtraceTask.

2007-05-16  Andrew Cagney  <cagney@redhat.com>

	* LinuxProc.java (sendrecAuxv, sendrecMaps, sendrecCmdLine)
	(sendrecGID, sendrecUID, sendrecExe, sendrecIsa): Move to here
	from frysk.proc.LinuxPtraceProc.

	* LinuxTask.java (sendrecRegisterBanks, sendrecMemory)
	(sendrecIsa): Move to here from frysk.proc.LinuxPtraceTask.

2007-05-15  Andrew Cagney  <cagney@redhat.com>

	* LinuxHost.java: Add LinuxWaitBuilder to event-loop.
	* LinuxWaitBuilder.java: Moved to here from
	frysk.proc.LinuxPtraceWaitBuilder.
	* LinuxTask.java (processExecedEvent, processTerminatedEvent)
	(processSyscalledEvent, processDisappearedEvent)
	(processTerminatingEvent, processSignaledEvent)
	(processTrappedEvent, processStoppedEvent, processForkedEvent)
	(processClonedEvent): Move to here in from frysk.proc.Task.

	* LinuxProc.java: New file.

2007-05-14  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java: New file.
	* LinuxTaskState.java: New file.	

	* LinuxHost.java: New file.

2007-05-07  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java: Rename .memoryByteBuffer to
	.addressSpaceByteBuffer.

2007-05-02  Andrew Cagney  <cagney@redhat.com>

	* AddressSpaceByteBuffer.java: Eliminate use of
	frysk.sys.PtraceServer by using frysk.sys.Ptrace.AddressSpace
	.peek and .poke methods.
	* RegisterSetByteBuffer.java: Ditto using
	frysk.sys.Ptrace.RegisterSet.

2007-04-19  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java (memoryByteBuffer, registerByteBuffer): Add.
	(setUp): Set.  For registerByteBuffer, only when REGS is valid.
	(verifySlice): New.
	(testSliceAddressSpace, testSliceRegisterSet): Use verifySlice.
	(verifyModify, testModifyRegisterSet, testModifyAddressSpace): New.
	(AsyncModify, testAsyncRegisterSet, testAsyncAddressSpace): New.
	* RegisterSetByteBuffer.java (GetRegs.execute, SetRegs.execute):
	Use the PtraceServer.
	(GetRegs.request, SetRegs.request): Call execute.

2007-04-18  Andrew Cagney  <cagney@redhat.com>

	* AddressSpaceByteBuffer.java (PeekRquest, PokeRequest)
	(PeeksRequest): New classes.  Use to route peek/poke requests
	through the event-loop thread.
	* RegisterSetByteBuffer.java (GetRegs, SetRegs): Ditto.
	
2007-04-15  Andrew Cagney  <cagney@redhat.com>

	* TestByteBuffer.java: New file.
	* RegisterSetByteBuffer.java (subBuffer): Add.
	* AddressSpaceByteBuffer.java (subBuffer): Ditto.

	* AddressSpaceByteBuffer.java (peek(long,byte[],long,long): Add.

2007-04-13  Andrew Cagney  <cagney@redhat.com>

	* AddressSpaceByteBuffer.java: New.
	* RegisterSetByteBuffer.java: New.

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
End:
