2005-11-19  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Delete .Daemon.
	
	* TestLib.java: Delete .AttachedChild.  Add multi-thread
	constructor to .AttachedAckProcess.
	* TestProcStates.java: Use .AttachedAckProcess.
	
	* TestLib.java: Delete .DetachedChild.  Add .reap to
	DetachedAckProcess.
	* TestRefresh.java: Use DetachedAckProcess.
	* TestProcGet.java: Ditto.

	* TestLib.java: Merge .CloneDaemon into .Daemon.
	* TestProgGet.java, TestProcStates.java, TestTaskObserver.java:
	Use AckDaemonProcess.
	
	* TestLib.java: Replace ZombieDaemon with AckProcess, and
	AckDaemonProcess.  Add AckAttachedProcess, and AckDetachedProcess.
	* TestRefresh.java: Update.

2005-11-18  Jeff Johnston  <jjohnstn@redhat.com>

	* TestSyscallInterrupt.java: New test.

2005-11-17  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Replace .Child .setupAckHandler and .waitForAck,
	with .AckHandler class.  Update all calls.

	* TestLib.java: Make functions static to work around gcc bug, see
	frysk-imports/tests/nestedcall/Nest.java.

	* Task.java: Do not print the proc.
	
	* Observer.java: Replace .added, and .deleted with .addedTo,
	.deletedFrom, and .addedFailed.
	* Observable.java (fail): Add.
	* TaskObservable.java (TaskObservable(Task)): Add consructor.
	* Task.java: Update.
	* TestLib.java: Update.
	* TestTaskObserver.java: Update.

	* TestLib.java: Refactor DaemonChild into Daemon, CloneDaemon, and
	ZombieDaemon.  Delete ZombieChild.
	* frysk/proc/TestProcGet.java: Update.
	* frysk/proc/TestProcStates.java: Update.
	* frysk/proc/TestRefresh.java: Update.
	* frysk/proc/TestTaskObserver.java: Update.

2005-11-17  Jeff Johnston  <jjohnstn@redhat.com>

	* TestSyscall2.java: Re-enable and drop loop count down to
	much lower number to ensure test runs in allotted time.

2005-11-17  Andrew Cagney  <cagney@redhat.com>

	* TestTaskAttachedObserver.java: Delete.  Fold into ...
	* TestTaskObserver.java: Merge in TestTaskAttachedObserver.

2005-11-16  Stam Cox  <scox@redhat.com>

	* Host.java (Host): Add logger.
	(add,remove,removeTasks,get,getProc,requestRefresh,execute)
	(requestRefresh,requestCreateAttachedProc): Add logging.
	* HostState.java (HostState): Add logger.
	(process*): Add logging.
	* LinuxHost.java (LinuxHost): Add logger.
	(sendCreateAttachedProc,PollWaitOnSigChld,waitObserver,forkEvent)
	(exitEvent,execEvent,disappeared,syscallEvent,stopped,terminated):
	Add logging.
	* LinuxProc.java (LinuxProc): Add logger.
	(LinuxProc,sendNewAttachedTask): Add logging.
	* LinuxTask.java (LinuxTask): Add logger.
	(send*): Add logging.
	* Proc.java (Proc): Add logger.
	(execute,add,remove,notify,retain): Add logging.
	* ProcEvent.java (ProcEvent): Add logger.
	(getProc,getProcFromTaskId): Add logging.
	* ProcState.java (ProcState): Add logger.
	(ProcState,isStopped,process*,state): Add logging.
	* Task.java (Task): Add logger.
	(requestStop,request*,execute): Add logging.
	* TaskEvent.java (TaskEvent): Add logger.
	(getTask): Add logging.
	* TaskState.java (TaskState): Add logger.
	(process*): Add logging.

2005-11-11  Jeff Johnston  <jjohnstn@redhat.com>

	* TestSyscallOpen.java: Remove updateSyscallXXX reference.

2005-11-11  Andrew Cagney  <cagney@redhat.com>

	* LinuxX8664.java, LinuxPowerPc.java: Delete.  Re-instate once Isa
	code stable.

2005-11-10  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Delete Child.stopEventLoopOnDestroy.
	* TestStep.java: Replace stopEventLoopOnDestroy with
	StopEventLoopWhenChildProcRemoved.

	* ProcState.java: Delete "stop" variable.  Delete delete states
	.stopped, and .ContinuingAllTasks.

	* TestTaskAttachedObserver.java: Add .testDeletedAttachOtherTask,
	and .testBackToBackAttachDetachOtherTask.
	* ProcState.java (Detaching.state(Proc,Collection): Add.  When
	part way through an attach, only detach attached tasks.

	* TestSyscall2.java: Disable for moment.

	* TestTaskAttachedObserver.java: Add .attachDetachTask,
	.detachExitingTask, .attachDeadTask, .attachDieingTask,
	.attachToAttachedTask, .backToBackAttachAttachTask,
	.backToBackAttachDetachTask, .deletedAttachTask.  Refactor
	existing tests to use.

2005-11-10  Jeff Johnston  <jjohnstn@redhat.com>

	* LinuxHost.java: Revert previous change to Wait.Observer.syscallEvent
	function to remove syscall event type parameter.
	* TestLib.java: Ditto.
	* Task.java (performSyscalled): Revert previous change and remove
	syscallType parameter.
	(notifySyscallXXX): Removed.
	* TaskObserver.java (updateSyscallXXX): Removed.
	(stopping.processPerformSyscalled): New member function.
	(detaching.processPerformSyscalled): Ditto.
	(running.processPerformSyscalled): Change to notify for syscall
	entry and then return runningInSyscall state.
	(runningInSyscall, detachingInSyscall, stoppingInSyscall): New states.
	* TestI386Modify.java: Modify to use updateSyscallEnter () and
	updateSyscallExit () rather than updateSyscallXXX ().
	* TestI386Regs.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestSyscallOpen.java: Ditto.

2005-11-09  Andrew Cagney  <cagney@redhat.com>

	* ProcState.java: Refactor .DetachingAllTasks into Detaching that
	contains .state and .AllTasks.  When attaching handle the deletion
	of an observer.
	* TaskState.java: Add transitions between attaching and detaching
	states.
	* TestTaskAttachedObserver.java: Add .testDeletedAttach,
	.testBackToBackAttachAttachMainTask, and
	.testBackToBackAttachDetachMainTask.

	* ProcState.java: Refactor .AttachingToMainTask, and
	.AttachingToOtherTasks into .Attaching class containing .state,
	.allAttached, .ToMainTask and .ToOtherTasks.

2005-11-08  Andrew Cagney  <cagney@redhat.com>

	* TestTaskAttachedObserver.java: Add testAttachToAttached.
	
	* TaskState.java: In destroyed state, abandon attempt to add an
	observation.
	* ProcState.java: In unattached state, recover from a missing
	task.
	* Observation.java: Add .fail.
	* TestTaskAttachedObserver.java: Add .FailedObserver,
	.testAttachDieingOtherTask, .testAttachDieingMainTask, and
	.testAttachDeadMainTask.
	
	* TestTaskAttachedObserver.java: Add .assertTaskGone, use.  For
	testAttachDetachManyTasks, only create 20 tasks.  Rename
	testDetachExitingTask to testDetachExitingMainTask.

	* TestLib.java: Add Child.findTaskUsingRefresh, and .getPid.  Add
	.isChildOf, and isDescendantOf.  Delete .sigKill.
	* TestTaskAttachedObserver.java: Update.
	* TestRefresh.java: Update.

	* TaskObservation.java: New.
	* TaskState.java: Add .processPerformAddObservation.
	* Task.java: Add .performAddObservation.
	* ProcState.java: Use Observation.requestAdd
	* Observation.java: Add abstract method .requestAdd.

	* Task.java: Replace .performZombied with .performDisappeared.
	Update instances of Wait.Observer interface to match changes to
	disappeared method.
	* TestLib.java: Ditto.
	* LinuxTask.java: Ditto.
	* LinuxHost.java: Ditto..

	* TestAttachCloningThreads.java: Delete.

2005-11-07  Jeff Johnston  <jjohnstn@redhat.com>

	* SyscallEventInfo.java (ENTRY, EXIT, UNKNOWN): New constants.
	* Task.java (performSyscalled): Add additional syscallType
	parameter.
	* TaskState.java (processPerformSyscalled): Ditto.
	* TestLib.java: Change Wait.Observer classes to add
	additional parameter to syscallEvent member functions.
	* LinuxHost.java: Add additional parameter to Wait.Observer
	syscallEvent member function.
	* TestSyscall2.java: Lower repetition count to 5000 so
	test doesn't fail due to time limitation.

2005-11-07  Andrew Cagney  <cagney@redhat.com>

	* TestTaskAttachedObserver.java: Add
	.ttestAttachDetachExitingTask.
	* TaskState.java: For "detaching", handle
	.processPerformTerminating.
	
	* TestTaskAttachedObserver.java: Refactor .attachDetach, adding
	separate .attach and .detach methods that all take a Task[].  Add
	testAttachDetachManyTasks.

	* TestLib.java: For DaemonChild, add a constructor that starts its
	argument as the program.

	* LinuxProc.java: Delete unused .auxv.

	* TestTaskAttachedObserver.java: Add .attachDetach and
	.testAttachDetachOtherTask.

	* Proc.java: Rename .observableAttachedContinue, and
	.observableDetachedContinue to .observableAttached, and
	.observableDetached.
	* ProcState.java: Update.
	* TestProcStates.java: Update.

2005-11-06  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Delete .observableAttachedStop.
	* ProcState.java: Delete reference.

	* ProcState.java: Use Proc.getTasks, use Collection.

	* Task.java: Delete .stopEvent.
	* TaskState.java: Update.

	* TaskEvent.java: Delete .Trapped.
	* TestSyscall.java, TestSyscallOpen.java: Delete
	stoppedTaskEventCount.  Do not monitor Task.stopEvent.

	* TaskEvent.java: Delete .Stopped.
	* TaskState.java: Update.

	* TestStep.java: In StepEventObserver, cast obj to a Task.
	* TaskState.java: Pass the Task, not TaskEvent, to
	Task.stepEvent.notify.
	
	* Task.java: Make parameter to .TaskEventObservable.notify an
	Object.
	* TestStopAndStop.java (TaskEventObserver): Cast obj to a Task.
	* TaskState.java: Pass Task to .requestedStopEvent.

	* Proc.java: Delete .requestAttachedStop.
	* TestProcStates.java: Delete .requestAttachedStop.
	* ProcState.java: Delete .processRequestAttachedStop, and
	.StoppingAllTasks.

	* TestTaskAttachedObserver.java: Replace
	.testAddObserverToOneMainDetachedTask with
	testAttachDetachMainTask.
	* Observation.java: Add .delete.
	* ProcState.java: In "running" state, handle
	.processPerformDeleteObservation.
	* Observable.java: Notify when an observer is deleted.

	* TaskState.java: Add state "attached".
	* ProcState.java: When unattached, and RequestAddObserver
	transition to attached state.  Delay enabling Observations until
	after the attach has completed.
	* TestTaskAttachedObserver.java: New.

	* TaskState.java: Delete .processRequestAddObserver, and
	.processRequestDeleteObserver.
	* Task.java: Re-implement .requestAddObserver and
	.requestDeleteObserver to pass the request, as an Observation, to
	the Task's Proc.
	* ProcState.java: Add .processPerformAddObservation.
	* Proc.java: Add .observations, .performAddObservation, and
	.performDeleteObservation.
	* Observation.java: New.
	
2005-11-05  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Replace TaskObservable, and ProcObservable with
	ObservableXXX.
	* Host.java: Replace ProcObservable with ObservableXXX.
	* ProcObservable.java: Delete.
	* TaskObservable.java: Refactor, creating Observable.
	* Observable.java: New.

2005-11-04  Jeff Johnston  <jjohnstn@redhat.com>

	* LinuxIa32.java: Add constructor that sets
	wordSize and byteOrder.
	* LinuxX8664.java: Ditto plus add in register
	and SyscallEventInfo data.

2005-11-04  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Add .getTasks, and .getChildren.  Replace .children
	with private .childPool.
	* TestProcGet.java: Test Proc.getTasks and .getChildren.
	* TestRefresh.java: Update.

2005-11-03  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Refactor constructors.
	* LinuxProc.java: Update.  Delete LinuxProc(Proc,ProcId,boolean).

	* LinuxHost.java (sendCreateAttachedProc): Find and pass this task
	to LinuxProc.
	* TestI386Regs.java: Delete check of the manager's taskPool size.
	* TestSyscall.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestSyscallOpen.java: Ditto.
	* TestI386Modify.java: Ditto.
	* TestModify.java: Ditto.

	* LinuxHost.java: Replace .getSelf with .sendrecSelf.
	* Host.java: Make .getSelf a method, add .sendrecSelf.

	* TestLib.java (TaskCounter, ProcCounter): Simplify, add variant
	that only counts descendants.
	* TestExec.java: Update.  Only count child tasks.
	* TestRefresh.java: Update.

	* Proc.java (sendNewAttachedChild(ProcId)): Delete.
	* LinuxProc.java (sendNewAttachedChild(ProcId)): Delete.

	* Task.java (Task(Task,TaskId)): Delete.
	* LinuxTask.java (Task(Task,TaskId)): Delete.
	* LinuxHost.java: Use Task(Proc,TaskId,boolean).
	* LinuxProc.java: Ditto.

	* Task.java: Drop running parameter from constructor.
	* TaskState.java: Delete running parameter from .initial.  Delete
	startStopped state.
	* LinuxTask.java: Update.

	* Proc.java: Delete running parameter from constructor and
	.sendNewAttachedTask, and .sendNewAttachedProc.
	* LinuxProc.java: Update.
	* ProcState.java: Drop running parameter from .initial; delete
	startStopped state.

	* HostState.java: Replace processPerformCreateAttachedProc with
	processRequestCreateAttachedProc.  Drop sendCreateAttachedProc's
	running parameter.
	* Host.java: Fold processCreateAttachedProc into
	requestCreateAttachedProc.
	* LinuxHost.java: Update.

	* Host.java (requestCreateAttachedStoppedProc): Delete.
	* TaskState.java: When notifyAttached has blockers and a trap,
	transition a startRunning task to blockedContinue.
	* TestRun.java: Re-implement testCreateAttachedStoppedProc to use
	TaskObserver.Attached.

	* Host.java (requestCreateAttachedProc): Rename
	requestCreateAttachedContinuedProc.
	* TestExec.java, TestI386Modify.java, TestI386Regs.java,
	TestLib.java, TestModify.java, TestProcGet.java, TestRun.java,
	TestStep.java, TestSyscall.java, TestSyscall2.java,
	TestSyscallOpen.java, TestTaskClonedObserver.java,
	TestTaskForkedObserver.java, TestTaskObserver.java,
	TestTaskTerminateObserver.java: Update.

	* Proc.java (Proc(Task,ProcId): New constructor.
	* LinuxProc.java (Proc(Task,ProcId): Ditto.
	* Task.java (Task(Task,TaskId)): New constructor.
	* LinuxTask.java (Task(Task,TaskId)): Ditto.
	* LinuxHost.java: Use new LinuxProc and LinuxTask constructors.

	* Proc.java (sendAttach(boolean)): Delete.
	* LinuxProc.java (sendAttach(boolean)): Ditto.

	* Proc.java: Reduce constructors to just one.
	* Task.java: Reduce constructors to just one.
	* LinuxTask.java: Update.
	* LinuxProc.java: Update.

2005-11-02  Andrew Cagney  <cagney@redhat.com>

	* LinuxProc.java: Update, add .buildDimensions to BuildAuxv.

2005-11-01  Jeff Johnston  <jjohnstn@redhat.com>

	* TestGoAndGo.java: Wrap internal counters, timers, etc.. in
	a class so initialization occurs each time test is run.
	* TestModify.java: Ditto.
	* TestPaused.java: Ditto.
	* TestStep.java: Ditto.
	* TestStop.java: Ditto.
	* TestStopAndGo.java: Ditto.
	* TestStopAndStop.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestUnpaused.java: Ditto.
	* TestSyscallOpen.java: Ditto.  Also use SyscallNum to reference
	open syscall number.
	* TestI386Modify.java: Ditto, plus add check for isa and abort
	test if not ia32.
	* TestI386Regs.java: Ditto.

2005-10-31  Andrew Cagney  <cagney@redhat.com>

	* TestProcGet.java: For ./prog/print/auxv, set STDERR to
	/dev/null.
	* LinuxProc.java: Update BuildAuxv, add bigEndian parameter to
	buildBuffer.

2005-10-31  Phil Muldoon  <pmuldoon@redhat.com>

	* Host.java (getName): Added getName function.
	
	* Task.java (getName): Added getName function.

2005-10-31  Andrew Cagney  <cagney@redhat.com>

	* LinuxProc.java: Update BuildAuxv, replace buildDimensions with
	buildBuffer.

	* Isa.java: Add .getSyscallEventInfo.
	* LinuxIa32.java: Implement getSyscallEventInfo.
	* LinuxPowerPc.java: Delete unimplemented .SyscallEventInfo.
	* LinuxX8664.java: Ditto.
	* TestSyscallOpen.java: Update.
	* TestI386Regs.java: Update.
	* TestI386Modify.java: Update.

	* LinuxIa32.java: Fold inner Isa class into main class.
	* LinuxX8664.java: Ditto.
	* LinuxPowerPc.java: Ditto.
	* TestI386Regs.java, TestI386Modify.java: Update.

2005-10-30  Andrew Cagney  <cagney@redhat.com>

	* LinuxIa32.java: Delete class .Task.
	* LinuxTask.java: Implement .sendrecIsa.  Add method setupMaps,
	use in constructors.
	* Task.java: Add abstract method .sendrecIsa.  Make .getIsa final.
	* LinuxProc.java, LinuxHost.java: Create LinuxTask, not
	LinixIa32.Task.

	* LinixIa32.java, LinuxPowerPc.java, LinuxX8664.java: Rename
	I386Linux.java, PowerPcLinux.java, X8664Linux.java:
	* LinuxHost.java: Update.
	* LinuxProc.java: Update.
	* TestI386Modify.java: Update.
	* TestI386Regs.java: Update.
	* TestSyscallOpen.java: Update.

	* TestSyscallOpen.java: Simplify, use SyscallEventInfo, not
	I386Linux .SyscallEventInfo.
	* TestI386Regs.java, TestI386Modify.java: Ditto.

	* LinuxHost.java: Update to track frys.sys.proc changes,
	AuxvBuilder and IdBuilder replacing ScanDir and
	AuxiliaryVectorBuilder.
	* LinuxProc.java: Ditto.
	
	* TestProcGet.java: Fix typo, auxv.val not auxv.type.
	* Proc.java: Add .sendrecAuxv.  Implement .getAuxv locally.
	* LinuxProc.java: Replace .getAuxv with .sendrecAuxv.  Use
	frysk.sys.proc.AuxiliaryVectorBuilder to construct the auxv.
	* Auxv.java: Simplify.

	* TestLib.java: Fix tipo, TaskObserverBase, not TaskObserverBaseX.
	* TestProcGet.java: Reimplement CaptureAuxv by extending TestLib
	.AutoAddTaskObserverBase.
	* TestUnpaused.java: For TaskObserver's extend TaskObserverBase.
	* TestSyscallOpen.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestStep.java: Ditto.
	* TestModify.java: Ditto.
	* TestI386Regs.java: Ditto.
	* TestI386Modify.java: Ditto.

	* TestLib.java: Split .TaskObserverBase, creating
	.AutoAddTaskObserverBase sub-class.  Use AutoAddTaskObserverBase
	throughout.
	* TestUnpaused.java, TestTaskTerminateObserver.java,
	TestTaskObserver.java, TestTaskForkedObserver.java,
	TestTaskClonedObserver.java, TestStop.java, TestStopAndStop.java,
	TestStopAndGo.java, TestStep.java, TestPaused.java,
	TestGoAndGo.java: Ditto.
	
	* TestLib.java: Split out .TaskSet from .TaskObserverBase.
	* TestTaskObserver.java, TestTaskForkedObserver.java,
	TestTaskClonedObserver.java: Update, add explict TaskSet.
	
	* TestUnpaused.java, TestStep.java, TestModify.java,
	TestI386Regs.java, TestI386Modify.java: Replace TaskEvent
	.Signaled, with TaskObserver .Signaled.
	* TaskObserver.java: Fix typo, rename .Signaled updateTerminated
	to .updateSignaled.
	* Task.java: Add .signaledObservers, .notifySignaled,
	.requestDeleteSignaledObserver, .requestAddSignaledObserver.
	* TaskState.java: Add class .BlockedSignal.  Rename .blocked to
	.blockedContinue.  Handle .processRequestAddObserver in .unpaused
	state.
	* TaskEvent.java: Delete .Signaled.

	* TestTaskObserver.java: Add .testGetBlocked.
	* TestLib.java: Add method .getTasks to TaskObserverBase.
	* Task.java: Add .getBlockers.

2005-10-26  Andrew Cagney  <cagney@redhat.com>

	* TestTaskObserver.java: New.
	* TaskState.java: Handle .processRequestAddObserver in "running"
	state.
	
	* TaskEvent.java: Delete .Terminated.
	* TaskObservable.java: Call TaskObserver .add from here.
	* TaskState.java: Allow processRequestAddObserver in .unattached
	state.
	* TestPaused.java: Make TaskDestroyedObserver an extension of
	TaskObserverBase, implementing TaskObserver.Terminated.
	* TestUnpaused.java: Ditto.
	* TestStop.java: Ditto.
	* TestStopAndStop.java: Ditto.
	* TestStopAndGo.java: Ditto.
	* TestGoAndGo.java: Ditto.
	* TestStep.java: Ditto.

2005-10-26  Jeff Johnston  <jjohnstn@redhat.com>

	* TestModify.java: Fix comment.  Also fix modification code to
	index by 4 when writing ints as opposed to using word size which
	may vary from platform to platform.

2005-10-26  Andrew Cagney  <cagney@redhat.com>
	
	* TaskEvent.java: Delete TaskEvent .Execed, .Exiting, .Exited, and
	.Zombied.
	
	* Task.java: Delete .syscallEvent.  Add .notifySyscallXXX.
	* TaskEvent.java: Delete .Syscall.
	* TaskObserver.java: Add Syscall .updateSyscallXXX.
	* TestI386Regs.java: Add .updateSyscallXXX, .updateSyscallEnter,
	.updateSyscallExit, .added, and .deleted, to .TaskEventObserver.
	* TestI386Modify.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscallOpen.java: Ditto.
	* TaskState.java: Replace Task .syscallEvent with
	.notifySyscallXXX.
	
	* Task.java: Add .notifySyscall, .requestAddSyscallObserver,
	.requestDeleteSyscallObserver, and .syscallObservers.
	* TaskObserver.java: Simplify .Syscall interface.

2005-10-25  Andrew Cagney  <cagney@redhat.com>

	* TestTaskTerminateObserver.java: Enable all tests.
	
	* TaskObservable.java: New file.
	* TestTaskTerminateObserver.java, TestTaskForkedObserver.java,
	TestTaskClonedObserver.java, TestProcGet.java, TestModify.java:
	Update.
	* TestLib.java: Make .TaskObserverBase abstract adding .updateTask
	method; have it register itself as a task-added observer.  Delete
	AddTaskObserver.
	* TaskState.java: Update .processRequestAddObserver, and
	.processRequestDeleteObserver to take a TaskObservable.
	* Task.java: Add .clonedObservers, .requestAddClonedObserver,
	requestDeleteClonedObserver, .attachedObservers,
	.requestAddAttachedObserver, .requestDeleteAttachedObserver,
	.forkedObservers, .requestAddForkedObserver,
	.requestDeleteForkedObserver, .terminatedObservers,
	.requestAddTerminatedObserver, .requestDeleteTerminatedObserver,
	.terminatingObservers, .requestAddTerminatingObserver,
	.requestDeleteTerminatingObserver, .execedObservers,
	.requestAddExecedObserver, .requestDeleteExecedObserver.  Make
	.requestAddObserver, and .requestDeleteObserver private.

2005-10-24  Andrew Cagney  <cagney@redhat.com>

	* TestTaskTerminateObserver.java: New.
	* TestExiting.java: Delete.
	* TestTerminated.java: Delete.

	* Action.java: New.  * TaskObserver.java: Change doc so that
	observers return Action.BLOCK to to block.
	* Task.java: Update .notifyCloned, .notifyAttached, .notifyForked,
	.notifyTerminated, .notifyTerminating, .notifyExeced; have them
	return the block count.
	* TestTerminated.java, TestTaskForkedObserver.java,
	TestTaskClonedObserver.java, TestProcGet.java, TestModify.java,
	TestLib.java, TestExiting.java, TaskState.java: Update.

2005-10-23  Andrew Cagney  <cagney@redhat.com>

	* Task.java: Fold in TaskEventObservable.
	* TaskEventObservable.java: Delete file.

	* TestLib.java: Use TaskObserver .Execed.
	* Task.java: Add .notifyExeced.
	* TaskState.java: Replace Proc ..taskExeced with Task
	.notifyExeced.
	* Proc.java: Delete .taskExeced.
	
	* Proc.java: Delete .taskExiting.
	* Task.java: Add .notifyTerminating.
	* TestExiting.java: Use TaskObserver .Terminating.
	* TaskState.java: Replace Proc .taskExiting, with Task
	.notifyTerminating.
	
	* Proc.java: Delete .taskDestroyed.
	* TaskState.java: Replace Proc .taskDestroyed, with Task
	.notifyTerminated.
	* Task.java: Add .notifyTerminated.
	* TestTerminated.java, TestModify.java, TestExiting.java: Use
	TaskObserver .Terminated.

	* TaskState.java: When fork, call Task .notifyForked.
	* Task.java: Add .notifyForked.
	* TestTaskForkedObserver.java: New.
	* TestFork.java: Delete.

	* TestLib.java: Add .StopEventLoopWhenChildProcRemoved, replaces
	.addStopEventLoopOnChildProcRemovedObserver.
	* TestTerminated.java: Update.
	* TestTaskClonedObserver.java: Update.
	* TestRun.java: Update.
	* TestProcGet.java: Update.
	* TestFork.java: Update.
	* TestExiting.java: Update.
	* TestExec.java: Update.
	
	* TestTaskClonedObserver.java: Use TestLib's .AddTaskObserver, and
	TaskObserverBase.
	* TestLib.java: Add method .isDescendantOfMine.  Add classes
	AddTaskObserver, and TaskObserverBase.
	(setUp): Register any descendant process.

	* TaskState.java: Handle .processPerformTerminating in
	startRunning, and zombied states.  Do not pass the terminating
	exit status to Task .sendContinue.
	* LinuxTask.java: Always enable exit tracing.
	* Task.java: Delete .traceExit.
	
	* Task.java: Merge .performExited into .performTerminated.
	Replace .performExiting into .performTerminating.
	* LinuxHost.java: Update.
	* TaskState.java: Replace .processPerformExiting with
	.processPerformTerminating.  Merge .processPerformExited into
	.processPerformTerminated.

	* TestLib.java, LinuxHost.java: Update Wait .Observer objects so
	that .eventExit has additional signal, and coreDumped parameters,
	and .exited is merged into .terminated.

	* TaskObserver.java: Replace .Exiting with .Terminating; Merge
	.Exited into .Terminated.

2005-10-22  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Delete .taskDiscovered.
	* TaskObservable.java: Delete, merged into Proc.java.
	* TaskObserver.java: Add .Attached.
	* TaskState.java: Replace Proc .taskDiscovered, with Task
	.notifyAttached.
	* Task.java: Update; add .notifyAttached.
	
	* Observer.java: New file.
	* TaskObserver.java: Extend Observer.

	* Task.java: Delete .traceFork.
	* TestLib.java: Update.
	* LinuxTask.java: Assume fork tracing.

	* TestTaskClonedObserver.java: Rename TestClone.java.

	* TaskObserver.java: Update names, .Step to .Instruction,
	.Breakpoint to .Code.

2005-10-21  Andrew Cagney  <cagney@redhat.com>

	* TaskObserver.java: Add .Forked, .Execed, .Exiting, .Exited,
	.Terminated, .Signaled, .Syscall, .Step, and .Breakpoint.
	
	* TestClone.java: Replace .testClone with .testTaskCloneObserver,
	and .testBlockingTaskClonedObserver.
	* TaskState.java: Add new state .blocked.  Add methods
	.processRequestUnblocked, .processRequestAddObserver, and
	.processRequestDeleteObserver.
	* Task.java: Add methods .requestUnblock, .requestAddObserver,
	.requestDeleteObserver, and .notifyCloned.  Add local fields
	.observers, and .blockers.
	* TaskObserver.java: New file.

2005-10-18  Jeff Johnston  <jjohnstn@redhat.com>

	* TestModify.java: New platform-independent test that
	verifies memory modification.

2005-10-11  Andrew Cagney  <cagney@redhat.com>

	* LinuxTask.java: Use .performZombied.
	* TaskState.java: Handle .performZombied, .performSyscalled,
	.performExited, .performTerminated, and .performExeced, instead of
	TaskEvent .Zombied, .Syscall, .Terminated, .Exited, and .Execed.
	* Task.java: Add .performZombied, .performSyscalled,
	.performExited, .performTerminated, and .performExeced.
	* LinuxHost.java: Use Task .performZombied, .performSyscalled,
	.performExited, .performTerminated, and .performExeced.
	* TaskEvent.java: Simplify .Zombied, .Syscall, .Exited,
	.Terminated, and .Execed.
	
	* TaskState.java: Handle .performExiting, instead of TaskEvent
	.Exiting.
	* TaskEvent.java: Simplify .Exiting.
	* Task.java: Add .performExiting.
	* LinuxHost.java: Use Task .performExiting.
	
	* TaskState.java: Handle .processPerformedCloned,
	.processPerformedTrapped, and .processPerformedSignaled, instead
	of TaskEvent .Stopped, .Trapped, and .Signaled.
	* Task.java: Add .performSignaled, .performStopped, and
	.performTrapped.
	* LinuxHost.java: Use Task .performStopped, .performTrapped, and
	.performSignaled.
	* TaskEvent.java: Simplify .Stopped, .Trapped and .Signaled.

	* TaskState.java: Handle processPerformForked, instead of
	TaskEvent .Forked.
	* ProcState.java: Delete code handling ProcEvent.TaskForked.
	* ProcEvent.java: Delete TaskForked.
	* TaskEvent.java: Delete Forked.
	* Task.java: Add performForked.
	* LinuxHost.java: Use Task .performForked.

	* TaskState.java: Handle processPerformCloned, instead of
	TaskEvent.Cloned.
	* TaskEvent.java: Delete Cloned.
	* Task.java: Add performCloned.
	* ProcState.java: Delete code handling TaskCloned.
	* ProcEvent.java: Delete TaskCloned.
	* LinuxHost.java: Use Task .performCloned.

2005-10-09  Andrew Cagney  <cagney@redhat.com>

	* LinuxProc.java, LinuxHost.java: Use frysk.sys.proc.ScanDir.

	* LinuxHost.java, LinuxProc.java: Use frysk.sys.proc.Stat.  Better
	handle a lost /proc/PID/stat file.

2005-10-07  Andrew Cagney  <cagney@redhat.com>

	* Host.java, LinuxHost.java, LinuxTask.java, Proc.java, Task.java:
	Update, EventLoop .appendEvent renamed to .add.

	* TestLib.java, LinuxHost.java: Update, EventLoop .addHandler
	renamed to .add.

	* TestAttachCloningThreads.java, TestExiting.java,
	TestGoAndGo.java, TestPaused.java, TestStep.java, TestStop.java,
	TestStopAndGo.java, TestStopAndStop.java, TestTerminated.java,
	TestUnpaused.java: Update, EventTimer .addTimerEvent renamed to
	.add.

2005-10-06  Andrew Cagney  <cagney@redhat.com>

	* TestRun.java: Rename testRun to testCreateAttachedContinuedProc.
	Add testCreateAttachedStoppedProc.
	* Host.java: Add requestCreateAttachedStoppedProc.
	* ProcState.java, TaskState.java: Simplify startRunning state.
	Fix startStopped state.

	* Proc.java: Rename newAttachedTask to sendNewAttachedTask.
	* LinuxProc.java, ProcState.java: Update.

	* TestLib.java: In setUp, add an observer that registers any child
	process.
	
	* TestLib.java: Change children to a set.  Replace
	StopEventLoopOnProcDestroy with
	addStopEventLoopOnChildProcRemovedObserver.
	* TestTerminated.java, TestRun.java, TestProcGet.java,
	TestFork.java, TestExiting.java, TestExec.java, TestClone.java:
	Update.

	* Task.java: Replace getPid with getTid.  Make getTid, and
	getTaskId final.
	* LinuxTask.java: Delete "pid", "addMemoryAndRegisters", and
	"ptraceAttached".  Use getTid.
	* I386Linux.java, ProcState.java, LinuxProc.java: Update.
	
	* Host.java, HostState.java, I386Linux.java, LinuxHost.java,
	LinuxProc.java, LinuxTask.java, Proc.java, ProcState.java,
	Task.java, TaskState.java: Replace "runnable" with "attached" and
	"running", pass through out.  Replace newTask with
	newAttachedTask.  Further consolidate Task, Proc, and Host
	constructors.  Add startRunning and startStopped to Proc states.
	
	* TaskState.java, ProcState.java, HostState.java: Add method
	initial, make all state variables and classes private.
	* TestPaused.java, TestRefresh.java, TestStop.java,
	TestStopAndStop.java, TestUnpaused.java: Use .getStateString when
	comparing states.
	* Task.java, Proc.java, Host.java: Use State .initial.  Add method
	getStateString.
	* State.java: Change toString to return the simple name.

2005-10-05  Andrew Cagney  <cagney@redhat.com>

	* LinuxHost.java: In sendCreateAttachedProc, set the sub-processes
	parent.

	* TestLib.java: Add method isChildOfMine.  Use.
	* TestTerminated.java, TestSyscallOpen.java, TestSyscall.java,
	TestSyscall2.java, TestI386Regs.java, TestI386Modify.java,
	TestStep.java, TestExiting.java: Use.

	* Host.java, Task.java, Proc.java: Include the super's name in
	toString.
	
	* Proc.java, LinuxProc.java: Rationalize constructor methods.
	* LinuxHost.java: Update.
	
	* TestLib.java: For StopEventLoopOnProcDestroy, check that the
	proc is a child of frysk using getSelf.
	* TestExiting.java, TestTerminated.java: Ditto for
	ProcCreatedObserver.
	
	* TestLib.java: For ProcCounter, replace numberAdded and
	numberRemoved with getAdjustNumberAdded and
	getAdustedNumberRemoved.  Add getAdjustedHostProcPoolSize.
	* TestRun.java, TestFork.java: Update.
	
2005-10-05  Phil Muldoon  <pmuldoon@redhat.com>

	* TaskEvent.java: Change class scope to public.

2005-10-04  Andrew Cagney  <cagney@redhat.com>

	* TestHostGet.java: New.
	* Host.java: Add getSelf.
	* LinuxHost.java: Implement getSelf.  Refactor updateProc into
	ProcChanges.

	* LinuxHost.java, Host.java: Delete sendAttachProc.
	
	* Host.java: Delete requestAttachProc.
	* HostState.java: Update.
	* TestUnpaused.java, TestStop.java, TestStopAndStop.java,
	TestStopAndGo.java, TestPaused.java, TestGoAndGo.java,
	TestAttachCloningThreads.java: Replace Host .requestAttachProc,
	with Proc .requestAttach.
	
	* TestAttachCloningThreads.java, TestGoAndGo.java,
	TestPaused.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestUnpaused.java: Use TestLib .PidChild.
	Parameterize ProcCreatedObserver with the process pid.  Delete
	registerChild call, handled by PidChild.

	* TestStep.java: Move PidChild call to ProcCreatedObserver, delete
	global "pid".
	* TestLib.java: In class Child, always register the pid.

	* TestStep.java, TestAttachCloningThreads.java: Replace
	StopEventLoopOnProcDestroy with PidChild and Child
	.stopEventLoopOnDestroy.
	* TestLib.java: Add class PidChild.  Add method
	stopEventLoopOnDestroy to Child class.

	* Host.java, HostState.java: Add "Perform" prefix to
	PerformCreateAttachedProc event.

	* Host.java: Replace sendCreateProc with sendCreateAttachedProc.
	Replace requestCreateProc with requestCreateAttachedContinuedProc,
	and the private performCreateAttachedProc.
	* TestTerminated.java, TestSyscallOpen.java, TestSyscall.java,
	TestSyscall2.java, TestStep.java, TestRun.java, TestProcGet.java,
	TestLib.java, TestI386Regs.java, TestI386Modify.java,
	TestFork.java, TestExiting.java, TestExec.java, TestClone.java,
	LinuxHost.java, HostState.java: Update.

	* Host.java: Create nested HostEvents.
	* HostState.java: Replace existing "process" methods with
	"processRequestRefresh", "processRequestCreateProc", and
	"processRequestAttachProc".
	* HostEvent.java: Delete RequestRefresh, RequestCreateProc, and
	RequestAttachProc.

2005-10-03  Andrew Cagney  <cagney@redhat.com>

	* TestTerminated.java, TestSyscallOpen.java, TestSyscall.java,
	TestSyscall2.java, TestStep.java, TestStopAndStop.java,
	TestStopAndGo.java, TestGoAndGo.java, TestI386Regs.java,
	TestI386Modify.java, TestAttachCloningThreads.java,
	TestExiting.java, TestPaused.java, TestStop.java,
	TestUnpaused.java: Replace Proc .taskDiscovered with Proc
	.observableTaskAdded.

	* TaskState.java: Move observableTaskAdded from here ...
	* Task.java (Task): ... and from here ...
	* Proc.java (add (Task)): .. to here.

	* TestStep.java: Inline call to stopAllTasks.
	* Proc.java: Delete startAllTasks, and stopAllTasks.

	* LinuxHost.java: Delete unused local "searchId".
	* Syscall.java: Delete unused local "index".
	* TestExec.java: Delete unused local "procCounter".
	* TestI386Modify.java, TestI386Regs.java: Delete unused local
	"ste", "ch", "arg1", "arg2", and "index".
	* TestLib.java: Delete unused locals "proc", and "ignoreWaits".
	* TestGoAndGo.java, TestPaused.java, TestStep.java, TestStop.java,
	TestStopAndGo.java, TestUnpaused.java: Delete unused local "e".
	* TestSyscall.java: Delete unused local "ste".
	* TestSyscallOpen.java: Delete unused local "ste", "syscall", "ch",
	"arg1", "arg2", and "index".
	
2005-09-30  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Delete stopObserver.
	* ProcEvent.java, ProcState.java: Delete AllStopped.

	* ProcState.java: Delete method "stop", and state "stopping".
	* Proc.java: Delete "stop", and allStopped.
	* TestStep.java: Replace call to Proc .stop with Proc
	.stopAllTasks.
	* TestUnpaused.java: Delete AllStoppedObserver.

2005-09-29  Andrew Cagney  <cagney@redhat.com>

	* TestProcStates.java: Add
	testMultiTaskAttachedContinueToAttachedContinue, and
	testMultiTaskAttachedStopToAttachedStop.
	* ProcState.java: When stopped, handle processRequestAttachedStop;
	and when running, handle processRequestAttachedContinue.
	
	* TestProcStates.java: Refactor.  Add
	testSingleTaskAttachedStopToDetachedContinue, and
	testMultiTaskAttachedStopToDetachedContinue.
	* ProcState.java: Handle processRequestDetachedContinue when in
	stopped state.
	* TaskState.java: Handle processPerformDetach when in stopped
	state.
	* TestLib.java: Add RequestEventLoopStopObserver.

	* Proc.java: Delete method "go".
	* ProcState.java: Delete code handling "go".

	* TestProcStopAndGo2.java, TestProcStopAndStop.java,
	TestProcStopAndGo.java, TestProcStop.java: Delete, replaced by
	TestProcStates.java.
	* TestProcStates.java: Add notes listing more tests.

	* ProcState.java: Handle requestAttachedStop.
	* TestProcStates.java: Add
	testSingleTaskDetachedContinueToAttachedStop, and
	testMultiTaskDetachedContinueToAttachedStop.

2005-09-28  Andrew Cagney  <cagney@redhat.com>

	* TestPaused.java, TestUnpaused.java: Eliminate call to "Proc
	.detach".
	* TestLib.java: Detach all processes.
	* LinuxProc.java, Proc.java: Delete "detach".

	* TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndStop.java, TestProcStopAndGo2.java: Eliminate call
	to "Proc .detach".

	* TestGoAndGo.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java: Eliminate call to "Proc .detach".

	* TestLib.java: Add AttachedChild constructor for creating a
	busy-loop process.

	* Proc.java: In "toString", print the current "state".
	
	* TaskState.java: Handle processPerformStop, and
	processPerformContinue, add state performingStop.
	* Task.java: Add performStop, and performContinue.
	* ProcState.java: Handle processPerformTaskStopCompleted, and
	processPerformTaskContinueCompleted.  Add states StoppingAllTasks,
	and ContinuingAllTasks.
	* Proc.java: Add performTaskStopCompleted,
	performTaskContinueCompleted, and observableAttachedStop.
	* TestProcStates.java: Add
	testSingleTaskAttachedContinueAndAttachedStop, and
	testMultiTaskAttachedContinueAndAttacheStop.

	* Proc.java: Replace requestRemoval, with performRemoval.
	* ProcState.java, LinuxHost.java: Update.

	* Proc.java: Delete TaskForcedStopObserver.
	
	* Proc.java: Make detach package local.
	
	* Task.java: Add performAttach, performDetach, and performRemoval.
	* Proc.java: Add performTaskAttachCompleted, and
	performTaskDetachCompleted.
	* ProcEvent.java: Delete TaskAttached, and TaskDetached.
	* TaskState.java, ProcState.java, LinuxProc.java: Update.

2005-09-27  Andrew Cagney  <cagney@redhat.com>

	* TestProcStates.java: Add tests
	testOneTaskAttachedContinueToDetachedContinue, and
	testMultiTaskAttachedContinueToDetachedContinue.
	* TestLib.java: Add class AttachedChild.
	* TaskState.java: Add state "detaching"; handle
	processRequestDetach.
	* Task.java: Add "sendDetach", and "requestDetach".
	* ProcState.java: Add state DetachingAllTasks; handle
	ProcEvent.TaskDetached, and processRequestDetachedContinue.
	* ProcEvent.java: Add "TaskDetached".
	* Proc.java: Add "observableDetachedContinue".
	* LinuxTask.java: Implement "sendDetach".

	* HostEvent.java, HostState.java, Isa.java, LinuxHost.java,
	LinuxProc.java, LinuxTask.java, Proc.java, TestClone.java,
	TestExec.java, TestExiting.java, TestFork.java, TestGoAndGo.java,
	TestI386Modify.java, TestI386Regs.java, TestPaused.java,
	TestProcGet.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestRun.java,
	TestStep.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestSyscall.java, TestSyscall2.java,
	TestSyscallOpen.java, TestTerminated.java, TestUnpaused.java: More
	comment tweaks.
	
	* Manager.java: Delete procRemoved.
	* Host.java, TestI386Modify.java, TestI386Regs.java, TestLib.java,
	TestSyscall.java, TestSyscall2.java, TestSyscallOpen.java: Instead
	of Manager .procRemoved, use Host .observableProcRemoved.
	
	* Manager.java: Delete procDiscovered.
	* Host.java, TestAttachCloningThreads.java, TestExiting.java,
	TestGoAndGo.java, TestI386Modify.java, TestI386Regs.java,
	TestPaused.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestStep.java,
	TestStop.java, TestStopAndGo.java, TestStopAndStop.java,
	TestSyscall.java, TestSyscall2.java, TestSyscallOpen.java,
	TestTerminated.java, TestUnpaused.java: Instead of Manager
	.procDiscovered, use Host .observableProcAdded.

	* Proc.java: Rename taskAdded to observableTaskAdded, and
	taskRemoved to observableTaskRemoved.
	* Task.java, TaskState.java, TestGoAndGo.java, TestLib.java,
	TestPaused.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestStep.java,
	TestStop.java, TestStopAndGo.java, TestStopAndStop.java,
	TestUnpaused.java: Update.
	
	* TestAttachThreads.java, TestAttach.java: Delete, replaced by
	TestProcStates.java.

	* TaskObservable.java: New, moved from Proc.java.
	* ProcObservable.java: New, moved from Manager.java.
	* Proc.java: Update.	
	* TestLib.java: Update.
	* Manager.java: Update.
	* TestProcGet.java: Update.
	* TestRefresh.java: Update.
	* Host.java: Rename procAdded and procRemoved to
	observableProcAdded and observableProcRemoved.

	* Proc.java: Add observableAttachedContinue.
	* ProcState.java: Notify observableAttachedContinue.
	* TestProcStates.java: New file.

2005-09-26  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Replace Child.findProc with
	Child.findProcUsingRefresh.
	* TestRefresh.java, TestProcGet.java: Update.

2005-09-23  Jeff Johnston  <jjohnstn@redhat.com>

	* TestI386Modify.java: Reenabled now that poke logic has
	been updated and test works.

2005-09-23  Andrew Cagney  <cagney@redhat.com>

	* State.java: Add String parameter to "unhandled" method.
	* TaskState.java, ProcState.java: Use.

2005-09-21  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java (tearDown): Simplify reap / detach code.

	* TestI386Modify.java: Disable for moment.

2005-09-20  Jeff Johnston  <jjohnstn@redhat.com>

	* TestLib.java (ExitWaitObserver): New class to wait for exit-type
	events.
	(tearDown): Fix kill / waiting logic to prevent infinite waits.
	* TestExiting.java: Register the test pid for tear down purposes.
	* TestI386Regs.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestSyscallOpen.java: Ditto.
	* TestTerminated.java: Ditto.
	* TestI386Modify.java: Ditto.  As well, uncomment out the test as
	the new TestLib tearDown logic can now handle this.

2005-09-19  Andrew Cagney  <cagney@redhat.com>

	* Auxv.java, I386Linux.java, Isa.java, LinuxProc.java,
	LinuxTask.java, Register.java, Syscall.java, Task.java,
	TestProcGet.java, TestSyscallOpen.java: Import inua instead of
	util.

2005-09-18  Andrew Cagney  <cagney@redhat.com>

	* package.html: Add more detail.
	* doc-files/task-tree.fig: New file.
	* doc-files/proc-tree.fig: Simplify.

2005-09-16  Andrew Cagney  <cagney@redhat.com>

	* doc-files/proc-tree.fig, doc-files/proc-state.fig: New files.
	* package.html: New file.

2005-09-13  Andrew Cagney  <cagney@redhat.com>

	* I386Linux.java, Isa.java, Manager.java, Proc.java,
	ProcEventObservable.java, Register.java, Task.java,
	TaskEventObservable.java, TestAttach.java,
	TestAttachCloningThreads.java, TestAttachThreads.java,
	TestExiting.java, TestGoAndGo.java, TestI386Modify.java,
	TestI386Regs.java, TestPaused.java, TestProcStop.java,
	TestProcStopAndGo.java, TestProcStopAndGo2.java,
	TestProcStopAndStop.java, TestStep.java, TestStop.java,
	TestStopAndGo.java, TestStopAndStop.java, TestSyscall.java,
	TestSyscall2.java, TestSyscallOpen.java, TestTerminated.java,
	TestUnpaused.java: Replace util.eio.* and java.util.* with
	explicit imports.

2005-09-10  Andrew Cagney  <cagney@redhat.com>

	* Proc.java: Delete stray semicolons.

2005-09-09  Andrew Cagney  <cagney@redhat.com>

	* Move com/redhat/fedora/frysk/proc/ to frysk/proc/.

2005-09-07  Andrew Cagney  <cagney@redhat.com>
	
	* Proc.java, ProcEvent.java, Task.java, TaskEvent.java: Simplify,
	exploit nested classes ability to access containg classes
	variables.

	* Host.java, Manager.java: Move taskPool to Host.
	* Proc.java, ProcEvent.java, ProcState.java, Task.java,
	TaskEvent.java, TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestExiting.java, TestGoAndGo.java,
	TestI386Regs.java, TestPaused.java, TestProcStop.java,
	TestProcStopAndGo.java, TestProcStopAndGo2.java,
	TestProcStopAndStop.java, TestRun.java, TestStop.java,
	TestStopAndGo.java, TestStopAndStop.java, TestSyscall.java,
	TestSyscall2.java, TestSyscallOpen.java, TestTerminated.java:
	Update.

2005-09-06  Andrew Cagney  <cagney@redhat.com>

	* Proc.java, ProcState.java, Task.java, TaskEvent.java,
	TaskState.java, TestGoAndGo.java, TestStep.java,
	TestStopAndGo.java, TestUnpaused.java: Replace request events with
	anonymous objects.

	* TaskState.java: Add attaching state; handle RequestAttach.
	* ProcState.java: Add states AttachingToMainTask, and
	AttachingToOtherTasks; handle requestAttachingContinue.
	* LinuxTask.java, Task.java: Add sendAttach.

2005-09-06  Andrew Cagney  <cagney@redhat.com>

	* HostState.java, LinuxHost.java, Proc.java, ProcEvent.java,
	ProcState.java, State.java: Replace request events with anonymous
	objects.

	* ProcState.java, TaskState.java, LinuxProc.java, LinuxHost.java:
	Instead of the state machine, make requestRefresh responsible for
	removing the child.

2005-09-05  Andrew Cagney  <cagney@redhat.com>

	* Task.java: Delete traceExec.
	* LinuxTask.java, TestLib.java: Update.
	
	* LinuxTask.java: Always enable traceClone.
	* Task.java: Delete traceClone.
	* TestLib.java, TestAttachCloningThreads.java, TestStep.java:
	Update.

	* ProcState.java, ProcEvent.java: Add and handle TaskAttached.

	* TaskState.java, TaskEvent.java, TaskState.java: Add and handle
	RequestAttach.

2005-09-01  Andrew Cagney  <cagney@redhat.com>
	
	* PsEvent.java, PsListener.java, PsObserver.java: Delete.

	* TestTerminated.java, TestSyscallOpen.java, TestSyscall.java,
	TestSyscall2.java, TestStep.java, TestI386Regs.java,
	TestI386Modify.java, TestExiting.java: Remove try / catch wrapping
	Host.requestCreateProc.

	* TestLib.java: Add methods assertRunUntilStop and runPending.
	
	* TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestClone.java, TestExec.java,
	TestExiting.java, TestFork.java, TestGoAndGo.java,
	TestI386Modify.java, TestI386Regs.java, TestPaused.java,
	TestProcGet.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestRun.java,
	TestStep.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestSyscall.java, TestSyscall2.java,
	TestSyscallOpen.java, TestTerminated.java, TestUnpaused.java: Use.

2005-08-31  Jeff Johnston  <jjohnstn@redhat.com>

	* TestAttach.java: Change to not use static variables or classes.
	* TestAttachCloningThreads.java: Ditto.
	* TestAttachThreads.java: Ditto.
	* TestExiting.java: Ditto.
	* TestGoAndGo.java: Ditto.
	* TestI386Modify.java: Ditto.
	* TestI386Regs.java: Ditto.
	* TestPaused.java: Ditto.
	* TestProcStop.java: Ditto.
	* TestProcStopAndGo.java: Ditto.
	* TestProcStopAndGo2.java: Ditto.
	* TestProcStopAndStop.java: Ditto.
	* TestStep.java: Ditto.
	* TestStop.java: Ditto.
	* TestStopAndGo.java: Ditto.
	* TestStopAndStop.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestSyscallOpen.java: Ditto.
	* TestTerminated.java: Ditto.
	* TestUnpaused.java: Ditto.

2005-08-31  Andrew Cagney  <cagney@redhat.com>

	* TaskState.java: Add method processAttachedDestroy, use
	throughout.

2005-08-30  Andrew Cagney  <cagney@redhat.com>

	* TestRefresh.java: Add	testRefreshZombie.
	* TaskState.java: When requestRemove, and a process with no
	threads, do not remove it from its parent.
	
	* Proc.java: Move code removing a process with no tasks from here
	...
	* TaskState.java: ... to here.

	* Proc.java: Move calls to taskDestroyed.notify from here ...
	* TaskState.java: To here.

	* Proc.java: Add procDestroyed observer.  Change procRemoved to a
	simple TaskObserver.
	* TestAttach.java, TestAttachThreads.java, TestExiting.java,
	TestLib.java, TestTerminated.java: Update.
	
	* TestI386Modify.java: Disable for moment.

2005-08-30  Jeff Johnston  <jjohnstn@redhat.com>

	* TestI386Modify.java: Use runPolling to put upper limit on time
	for test to complete.

2005-08-30  Jeff Johnston  <jjohnstn@redhat.com>

	* I386Linux.java: Specify little-endianness for generic memory.
	* Register.java: Add put method.
	* TestI386Modify.java: New test.

2005-08-30  Andrew Cagney  <cagney@redhat.com>

	* TaskState.java: Rename state "dead" to "destroyed".
	* TestRefresh.java: Update.

	* TestLib.java, LinuxHost.java: Update to match changes to
	Wait.java, vis rename wait to waitAll, waitNohang to
	waitAllNoHang, signaled to terminated, and zombied to disappeared.

	* TestProcGet.java: Add testGetCommand.
	* Proc.java: Make getCommand abstract.
	* LinuxProc.java: Add getStat and getCommand.

2005-08-30  Jeff Johnston  <jjohnstn@redhat.com>

	* TestLib.java (tearDown): Add comments regarding use of SIGCONT.

2005-08-30  Andrew Cagney  <cagney@redhat.com>
	
	* TestLib.java: Add ZombieChild.fryParent.
	* LinuxProc.java: Don't crash when a process has no tasks.
	* LinuxHost.java: Handle a process becomming a daemon
	(re-parenting).  Refresh all processes not just the added ones.
	* TestRefresh.java: Add testRefreshDaemon.

2005-08-29  Andrew Cagney  <cagney@redhat.com>

	* TestRefresh.java: Add "testParentChild".
	* Proc.java: Add constructor parameterized by Host, ProcId, and
	Stat.
	* LinuxHost.java: Add "updateProc".  Use LinuxProc.Stat to get the
	parent ID.  Update a process parent first.
	* LinuxProc.java: Add "Stat".  Add constructor parameterized by
	Host, ProcId, and Stat.
	
	* Linux.java: Break up.
	* LinuxProc.java: New.
	* LinuxTask.java: New.
	* LinuxHost.java, I386Linux.java, TestUnpaused.java: Update.

2005-08-26  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Make DetachedChild a sub-class of DaemonChild.
	Add ZombieChild.
	* TestRefresh.java: Update.

	* TestRefresh.java: Add testRepeatedHostRefresh.  Add class
	ChildTracker, use.
	* LinuxHost.java: In sendRefresh, use a ProcId, instead of TaskId,
	when searching for a process.

2005-08-26  Jeff Johnston  <jjohnstn@redhat.com>

	* TestLib.java (tearDown): Fix to wait indefinitely for all events
	before verifying that a particular registered child is gone.
	* TestStep.java: Switch over to use TestLib registerChild and
	StopEventLoopOnProcDestroy methods.

2005-08-26  Andrew Cagney  <cagney@redhat.com>

	* Id.java: Fix "equals", cast to an Id not TaskId.
	* Host.java, HostEvent.java, HostState.java, Linux.java,
	LinuxHost.java, Proc.java, ProcEvent.java, TaskEvent.java,
	TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestGoAndGo.java, TestPaused.java,
	TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java,
	TestRefresh.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestUnpaused.java: Use ProcId instead of
	TaskId where applicable.

	* ProcId.java: New.

	* Id.java: New file.
	* TaskId.java: Extend Id.

	* Proc.java: Replace requestAttach, and requestDetach with
	requestAttachedCont, requestAttachedStop and requestDetachedCont.
	* HostState.java, LinuxHost.java, ProcEvent.java, ProcState.java:
	Update to match.
	
	* Manager.java: Note that Host.procAdded and Host.procRemoved are
	prefered.
	* Proc.java: Add taskAdded observer.
	* Host.java: Add procAdded and procRemoved observers.
	* Task.java, TaskState.java, TestClone.java, TestExec.java,
	TestFork.java, TestLib.java, TestProcGet.java, TestRefresh.java,
	TestRun.java: Use.

2005-08-25  Jeff Johnston  <jjohnstn@redhat.com>

	* TestAttachCloningThreads.java: Change to use TestLib
	registerChild and StopEventLoopOnProcDestroy methods.
	* TestAttach.java: Ditto.
	* TestAttachThreads.java: Ditto.
	* TestExiting.java: Ditto.
	* TestGoAndGo.java: Ditto.
	* TestPaused.java: Ditto.
	* TestProcStopAndGo2.java: Ditto.
	* TestProcStopAndGo.java: Ditto.
	* TestProcStopAndStop.java: Ditto.
	* TestProcStop.java: Ditto.
	* TestStopAndGo.java: Ditto.
	* TestStopAndStop.java: Ditto.
	* TestStop.java: Ditto.
	* TestTerminated.java: Ditto.
	* TestUnpaused.java: Ditto plus change testcase to properly stop
	and detach program.
	* TestLib.java (tearDown): Add issuing a SIGCONT before SIGKILL so
	that any processes stuck with pending SIGSTOPs will get the
	SIGKILL and die properly.

2005-08-25  Andrew Cagney  <cagney@redhat.com>

	* TestRefresh.java: Add testRefreshAll.
	* HostState.java: Pass refreshAll to sendRefresh.
	* LinuxHost.java: Add refreshAll to sendRefresh.
	* Host.java: Add refreshAll parameter to requestRefresh and
	sendRefresh.

	* TestRefresh.java: Extend testProcRefresh to check that the task
	list tracks task creation and deletion.
	
	* Linux.java: Request that any lost tasks be removed.  When
	applicable, create a detached task.
	* Task.java: Add "requestRemoval" and a detached constructor.
	* TaskEvent.java: Add RequestRemoval.
	* TaskState.java: Handle RequestRemoval.

	* TestLib.java: For TaskCounter and ProcCounter, add LinkedLists
	"discovered" and "removed" that contain the added and removed
	tasks/procs/.  Change numberDiscovered and numberRemoved to
	methods.
	* TestClone.java, TestExec.java, TestFork.java, TestLib.java,
	TestRun.java: Update.

	* TestLib.java: Refactor DetachedChild into Child, DetachedChild,
	and DaemonChild.  Implement using prog/kill/detach.

2005-08-24  Jeff Johnston  <jjohnstn@redhat.com>

	* TestAttach.java: Fix comments.
	* TestPaused.java: Ditto.
	* TestProcStopAndGo2.java: Ditto.
	* TestUnpaused.java: Ditto.

2005-08-24  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Replace WatchForProc with PidCounter.  Add
	DetachedChild.reap.
	* TestRefresh.java: Really add file.
	
2005-08-23  Jeff Johnston  <jjohnstn@redhat.com>

	* TestAttach.java: Switch to JUnit and remove println messages.
	* TestAttachCloningThreads.java: Ditto.
	* TestAttachThreads.java: Ditto.
	* TestExiting.java: Ditto.
	* TestGoAndGo.java: Ditto.
	* TestI386Regs.java: Ditto.
	* TestPaused.java: Ditto.
	* TestProcStopAndGo2.java: Ditto.
	* TestProcStopAndGo.java: Ditto.
	* TestProcStopAndStop.java: Ditto.
	* TestProcStop.java: Ditto.
	* TestStep.java: Ditto.
	* TestStopAndGo.java: Ditto.
	* TestStopAndStop.java: Ditto.
	* TestStop.java: Ditto.
	* TestSyscall2.java: Ditto.
	* TestSyscall.java: Ditto.
	* TestSyscallOpen.java: Ditto.
	* TestTerminated.java: Ditto.
	* TestUnpaused.java: Ditto.

2005-08-23  Andrew Cagney  <cagney@redhat.com>

	* Manager.java: Replace	"procDestroyed" with "procRemoved".
	* Proc.java: Replace taskDestroyed with taskRemoved.
	* Host.java, TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestClone.java, TestExec.java,
	TestExiting.java, TestFork.java, TestGoAndGo.java,
	TestI386Regs.java, TestLib.java, TestPaused.java,
	TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestRun.java,
	TestStep.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestSyscall.java, TestSyscall2.java,
	TestSyscallOpen.java, TestTerminated.java, TestUnpaused.java:
	Update.

	* TestHost.java: Replace with ...
	* TestRefresh.java: New file.
	* ProcEvent.java: Add RequestRemoval.
	* ProcState.java: Add "destroyed" state, handle RequestRemoval
	event.
	* LinuxHost.java: Send a RequestRemoval message to each removed
	process.
	* TestLib.java: Add WatchForProc.  Make ProcCounter implement
	Cloneable, add "save" method.

	* TestLib.java: For TaskCounter and ProcCounter, rename
	numberCreated to numberDiscovered.
	* TestRun.java, TestFork.java, TestClone.java, TestExec.java:
	Update.

	* Proc.java: Rename taskCreated to taskDiscovered.
	* TaskState.java, TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestExiting.java, TestGoAndGo.java,
	TestI386Regs.java, TestLib.java, TestPaused.java,
	TestProcGet.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestStep.java,
	TestStop.java, TestStopAndGo.java, TestStopAndStop.java,
	TestSyscall.java, TestSyscall2.java, TestSyscallOpen.java,
	TestTerminated.java, TestUnpaused.java: Update.

2005-08-22  Andrew Cagney  <cagney@redhat.com>

	* Linux.java: Implement Proc .sendRefresh".  In Proc .sendAttach,
	also add the main task.
	* Proc.java: Add requestRefresh, and sendRefresh.  In Proc, only
	add the main task when attached.
	* ProcEvent.java: Add RequestRefresh.
	* ProcState.java: Handle RequestRefresh.
	* TestHost.java: Add testProcRefresh.

	* TestPaused.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestStop.java,
	TestStopAndStop.java, TestUnpaused.java: Compare TaskId values,
	instead of TaskId addresses.

	* TestLib.java: Add DetachedChild constructor with "clones"
	parameter.

	* TestLib.java: In tearDown, discard any Errno.Echild when killing
	processes.

	* Manager.java: Rename "procCreated" to "procDiscovered".
	* Host.java, TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestExiting.java, TestGoAndGo.java,
	TestI386Regs.java, TestLib.java, TestPaused.java,
	TestProcGet.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java, TestStep.java,
	TestStop.java, TestStopAndGo.java, TestStopAndStop.java,
	TestSyscall.java, TestSyscall2.java, TestSyscallOpen.java,
	TestTerminated.java, TestUnpaused.java: Update.

	* TestLib.java, LinuxHost.java: Update to match event changes.

2005-08-19  Andrew Cagney  <cagney@redhat.com>

	* TestHost.java: Don't import com.redhat.fedora.frysk.sys.Pid,
	com.redhat.fedora.frysk.sys.Fork, or
	com.redhat.fedora.frysk.event.SignalEvent.
	* TestExec.java: Don't import java.util.Observer, or
	java.util.Observable.

	* LinuxHost.java: Add PollWaitOnSigChld, based on
	PollWaitPidEvent.
	* Manager.java: Update.
	* Linux.java: Delete EventLoop and PollWaitPidEvent.

	* TaskEvent.java: Delete .detachHackXXX.
	* TaskState.java: Update.
	* TestAttachSuspended.java, TestDetach.java,
	TestDetachThreads.java, TestReattachThreads.java: Delete.

	* TestLib.java: Add DetachedChild.
	* TestHost.java: Use DetachedChild.

	* Task.java: Add getProc, getEntryPointAddress, and getPid.  Make
	"proc" and "id" protected.

2005-08-18  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Add ExecCounter.
	* TestThreadExec.java: Delete.
	* TestExec.java: Merge in TestThreadExec, rewrite using JUnit,
	check that the exec'd program did run.

	* TestProcGet.java: New.
	* TestLib.java: Add TmpFile.getFile.
	* TestAuxv.java: Delete.

2005-08-18  Andrew Cagney  <cagney@redhat.com>

	* TestClone.java: Delete println call, Enable commented out
	assertEquals calls.
	* TestRun.java: Delete unused
	java.io.File import.
	
	* TestLib.java: Add TmpFile.
	* TestRun.java: Use.

2005-08-17  Andrew Cagney  <cagney@redhat.com>

	* TestLib.java: Add TaskCounter.
	* TestFork.java: Delete unused import of java.io;
	* TestClone.java: Convert to JUnit.

	* TestLib.java: Add Fibonacci.
	* TestFork.java: Convert to JUnit, simplify.

	* TestFork.java: Extend LibTest.
	* TestClone.java: Extend LibTest.

	* TestLib.java: Add ProcCounter.
	* TestRun.java: Use.

	* TestLib.java: Replace addStopEventLoopOnProcDestroy with the
	class StopEventLoopOnProcDestroy.
	* TestRun.java: Update.

	* Proc.java: Add requestDetach.
	* ProcState.java: Handle RequestDetach.
	* ProcEvent.java: Add RequestDetach.

2005-08-16  Andrew Cagney  <cagney@redhat.com>

	* TestStep.java, TaskState.java: Delete calls to
	isNewTaskLeftStopped.
	* ProcState.java, Proc.java: Delete isNewTaskLeftStopped.
	
	* ProcState.java: Simplify "unattached" state, when "running"
	handle TaskForked.
	* Proc.java: Add "attached" parameter to constructors, set initial
	state to "running" when "attached".
	* Host.java: Delete "createProc".
	* LinuxHost.java, LinuxHost.java: Update.

	* Linux.java: For fork, create both ProcEvent.TaskForked and
	TaskEvent.Forked events.
	* ProcState.java: Handke ProcEvent.TaskForked.
	* ProcEvent.java: Add TaskForked.
	* TaskState.java: Do not add the forked process.
	
	* ProcState.java: Create the new task as runnable.
	* Task.java: Add "runnable" parameter to Task constructor, set
	"state" accordingly.
	* I386Linux.java: Add "runnable" parameter to Task constructor.
	* Linux.java: Replace "createTask" with "newTask" add "runnable"
	to Task constructor.
	* Proc.java: Replace "createTask" with "newTask".
	* TaskState.java: Replace state "starting" with "startRunning" and
	"startStopped".
	
	* Proc.java: Add dummy versions of getCommand, and getPid.

	* TaskState.java: For Cloned, don't add the new task.
	* ProcState.java: Handle TaskCloned.
	* TaskEvent.java: Add TaskCloned.
	* Linux.java: For clone, create both ProcEvent.TaskCloned and
	TaskEvent.cloned events.
	
	* TaskEvent.java: Make all variable members protected, add public
	accessors.  Add Task parameterized constructor.
	* TaskState.java: Update.
	
	* TaskEvent.java: Parameterize event constructors with the TaskId,
	find the corresponding task during "execute".
	* Linux.java: Delete local event classes, create TaskEvents, with
	taskId's, instead.

2005-08-15  Andrew Cagney  <cagney@redhat.com>

	* ProcState.java: Move "go", "stop" and AllStopped to the states
	that they apply to.

	* TestLib.java: Add "sigKill" method.
	* Task.java: Delete "kill".
	* Linux.java: Delete "kill".
	* TestAttach.java, TestAttachCloningThreads.java,
	TestAttachThreads.java, TestDetachThreads.java, TestExiting.java,
	TestPaused.java, TestReattachThreads.java, TestTerminated.java,
	TestUnpaused.java: Use Signal.kill instead.

	* TestPsObserver.java: Delete.

2005-08-14  Andrew Cagney  <cagney@redhat.com>

	* ProcEvent.java: Add "unattached" state, handle RequestAttach.
	* Proc.java: Add "requestAttach" and
	"sendAttach", default "state" to "unattached".
	* LinuxHost.java: For "sendAttachProc", send the request to the
	just-created process.
	* Linux.java: Add "sendAttach".
	* HostState.java: For RequestAttach, when the process already
	exists, just pass the request on.

	* ProcEvent.java: Parameterize constructors with "proc".
	* Proc.java: Delete "process", pass "proc" to ProcEvent
	constructors.
	* ProcState.java: Update.

	* Host.java: Add "sendAttachProc", for "requestAttachProc", append
	a RequestAttachProc event.
	* HostEvent.java: Add RequestAttachProc.
	* HostState.java: Handle RequestAttachProc.
	* LinuxHost.java: Replace "equestAttachProc" with
	"sendAttachProc".
	
	* Host.java: Replace "attachProc" with "requestAttachProc".
	* LinuxHost.java: Update.
	* TestAttach.java, TestAttachCloningThreads.java,
	TestAttachSuspended.java, TestAttachThreads.java,
	TestDetachThreads.java, TestGoAndGo.java, TestPaused.java,
	TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java,
	TestReattachThreads.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestUnpaused.java: Simplify.
	
	* LinuxHost.java: Replace "createProc" by "sendCreateProc".
	* HostState.java: Handle "RequestCreateProc".
	* HostEvent.java: Add "RequestCreateProc".
	* Host.java: Replace "createProc" with "sendCreateProc" and
	"requestCreateProc".
	* TestAuxv.java, TestClone.java, TestDetach.java, TestExec.java,
	TestExiting.java, TestFork.java, TestI386Regs.java, TestRun.java,
	TestStep.java, TestSyscall.java, TestSyscall2.java,
	TestSyscallOpen.java, TestTerminated.java, TestThreadExec.java:
	Update.

	* Manager.java: Add "resetXXX".
	* TestLib.java: Add "addStopEventLoopOnProcDestroy", make
	"tearDown" more robust, have "setUp" call "resetXXX".
	* TestRun.java: Convert to JUnit.

	* TestAttach.java, TestAttachCloningThreads.java,
	TestAttachSuspended.java, TestAttachThreads.java, TestAuxv.java,
	TestClone.java, TestDetach.java, TestDetachThreads.java,
	TestExec.java, TestExiting.java, TestFork.java, TestGoAndGo.java,
	TestHost.java, TestI386Regs.java, TestPaused.java,
	TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java,
	TestPsObserver.java, TestReattachThreads.java, TestRun.java,
	TestStep.java, TestStop.java, TestStopAndGo.java,
	TestStopAndStop.java, TestSyscall.java, TestSyscall2.java,
	TestSyscallOpen.java, TestTerminated.java, TestThreadExec.java,
	TestUnpaused.java: Update to match event/ changes.

	* TaskEvent.java: Add "execute" to all classes.
	* Linux.java: Update.
	* Task.java: Delete "process".
	* LinuxHost.java: Update.
	* HostState.java: Update.
	* HostEvent.java: Call state.process directly.
	* Host.java: Rename "refresh" to "sendRefresh".  Delete "process".

	* Task.java: Add "send" prefix to cont, stepi, step, and
	setOptions.
	* Linux.java: Update.
	* TaskState.java: Update.
	
2005-08-13  Andrew Cagney  <cagney@redhat.com>

	* Task.java: Make cont, stepi, and setOptions return void.
	* Task.java: Only return the zombied state when a zombied event.
	* Linux.java: For cont ,stepi, and setOptions, instead of
	returning -1, append a Zombied event to the event queue.
	
	* Linux.java: Wrap ptrace calls in try catch block.
	
	* Linux.java: Delete Proc.attached.
	* Host.java: Update.

	* TestHost.java: Delete junit.framework.TestCase import.
	* TestAttachCloningThreads.java: Delete
	com.redhat.fedora.frysk.sys.Signal import.

	* TestLib.java: New.
	* TestHost.java: Extend TestLib, simplify.

2005-08-12  Jeff Johnston  <jjohnstn@redhat.com>

	* Linux.java (Linux.Task): Change cont, stepi, and setOptions
	methods to return an int.
	(Linux.PollWaitPidEvent): Fix all TaskEvent execute methods to
	verify a task is non-null before accessing its process method.
	(Linux.PollWaitPidEvent.ZombiedTaskEvent): New TaskEvent class.
	* Proc.java: Change add (Task) method to not notify observers
	about Task creation.
	* PsObserver.java: Comment out debugging println.
	* Task.java: Add the new Task to the Proc at the point of
	construction.  Change the prototypes of the cont, stepi, and
	setOptions methods to return an int.  Add new process method to
	handle a TaskEvent.Zombied event.  Change the toString method to
	print out the Task's state.
	* TaskEvent.java (TaskEvent.Zombied): New class.
	* TaskState.java: Add zombied state support.  Change every call to
	Ptrace.cont(), Ptrace.setOptions(), and Ptrace.stepi() to check
	for a return code and to change to zombied state should the call
	fail.  For starting state, the first StoppedEvent now results in
	notifying observers of a newly created Task.  Previously, this
	action added the Task to the Proc, but this is now done in Task
	construction.  Add multiple additional process events for starting
	state.  Add new zombied state that waits for termination or exit.
	* TestHost.java: Add new zombied observer.
	* TestPsObserver.java: Change test to no longer be threaded and
	instead use timer support.
	* TestAttachCloningThreads.java: New test.

2005-08-12  Andrew Cagney  <cagney@redhat.com>

	* LinuxHost.java: Delete unused import of java.util.Set.

2005-08-10  Andrew Cagney  <cagney@redhat.com>

	* TestHost.java: New.
	* HostState.java: Handle RefreshRequest.
	* HostEvent.java: Add sub-class RequestRefresh.
	* Host.java: Make "state" protected.  Add abstract method
	"refresh", and method requestRefresh.

	* Host.java: Change procPool to a Map, add "getProc" method.

	* Linux.java: Remove "unknown" from Wait.Observer.

2005-08-08  Andrew Cagney  <cagney@redhat.com>

	* HostState.java: New.
	* HostEvent.java: New.
	* Host.java: Add HostState.

	* State.java: New.
	* ProcState.java,
	* TaskState.java: Extend State.

	* Manager.java: Move procSet to...
	* Host.java: ... here.
	* Proc.java, TestAttach.java, TestAttachSuspended.java,
	TestAttachThreads.java, TestDetach.java, TestDetachThreads.java,
	TestExiting.java, TestGoAndGo.java, TestI386Regs.java,
	TestPaused.java, TestProcStopAndGo2.java, TestProcStopAndGo.java,
	TestProcStopAndStop.java, TestProcStop.java,
	TestReattachThreads.java, TestRun.java, TestStep.java,
	TestStopAndGo.java, TestStopAndStop.java, TestStop.java,
	TestSyscall2.java, TestSyscall.java, TestSyscallOpen.java,
	TestTerminated.java: Update.

2005-08-07  Andrew Cagney  <cagney@redhat.com>

	* Linux.java: Delete unused imports.

	* Proc.java: Add "host" to constructor.
	* Linux.java, LinuxHost.java: Update.

	* Proc.java: Add createTask.
	* TaskFactory.java: Delete.
	* I386Linux.java Linux.java LinuxHost.java Manager.java
	TaskState.java TestI386Regs.java TestStep.java
	TestSyscallOpen.java: Update.

	* Proc.java: Add "host".
	* TaskFactory.java: Delete createProc, moved to Host.
	* Host.java: Add createProc.
	* Linux.java, TaskState.java, LinuxHost.java: Update.
	* Proc.java: Make "parent" private.  Replace getPid with
	getTaskId: Update.

	* ProcFactory.java: Delete.
	* LinuxHost.java: New.
	* Manager.java: Replace "procFactory" with Host.
	* Linux.java: Delete "ProcFactory".
	* Host.java, TestAttach.java, TestAttachSuspended.java,
	TestAttachThreads.java, TestAuxv.java, TestClone.java,
	TestDetach.java, TestDetachThreads.java, TestExec.java,
	TestExiting.java, TestFork.java, TestGoAndGo.java,
	TestI386Regs.java, TestPaused.java, TestProcStopAndGo2.java,
	TestProcStopAndGo.java, TestProcStopAndStop.java,
	TestProcStop.java, TestReattachThreads.java, TestRun.java,
	TestStep.java, TestStopAndGo.java, TestStopAndStop.java,
	TestStop.java, TestSyscall2.java, TestSyscall.java,
	TestSyscallOpen.java, TestTerminated.java, TestThreadExec.java,
	TestUnpaused.java: Update.

2005-08-06  Andrew Cagney  <cagney@redhat.com>

	* Host.java: New.

	* EventLoop.java: Delete.
	* Linux.java: Extend event.EventLoop instead of proc.EventLoop.
	* Manager.java: Update.

2005-08-05  Andrew Cagney  <cagney@redhat.com>

	Fix problems building under eclipse.
	* .cvsignore: New.
	* EventLoop.java, Linux.java, Manager.java, ProcFactory.java,
	PsObserver.java, TestGoAndGo.java: Fix ECJ build errors.

	* Linux.java: Clean up imports - explicitly import Wait, File,
	Iterator, and Collection.

2005-08-04  Andrew Cagney  <cagney@redhat.com>

	* AllStoppedProcEvent.java: Delete.
	* ProcEvent.java: Add AllStopped sub-class.
	* Proc.java, ProcState.java, TestProcStop.java,
	TestProcStopAndGo.java, TestProcStopAndGo2.java,
	TestProcStopAndStop.java, TestStep.java: Update.
	
2005-08-03  Andrew Cagney  <cagney@redhat.com>

	* ProcState.java: New file.
	* Proc.java: Copy state code to ProcState.
	* ClonedTaskEvent.java, ExecedTaskEvent.java,
	ExitedTaskEvent.java, ExitingTaskEvent.java, ForkedTaskEvent.java,
	RequestGoTaskEvent.java, RequestStepiTaskEvent.java,
	RequestStopTaskEvent.java, SignaledTaskEvent.java,
	StoppedTaskEvent.java, SyscallTaskEvent.java,
	TerminatedTaskEvent.java, TrappedTaskEvent.java: Delete ...
	* TaskEvent.java: .. moved into here.
	* Linux.java, Task.java, TaskState.java, TestAttach.java,
	TestAttachSuspended.java, TestAttachThreads.java, TestDetach.java,
	TestDetachThreads.java, TestExiting.java, TestGoAndGo.java,
	TestI386Regs.java, TestPaused.java, TestProcStopAndGo2.java,
	TestProcStopAndGo.java, TestProcStopAndStop.java,
	TestProcStop.java, TestReattachThreads.java, TestStep.java,
	TestStopAndGo.java, TestStopAndStop.java, TestStop.java,
	TestSyscall2.java, TestSyscall.java, TestSyscallOpen.java,
	TestTerminated.java, TestUnpaused.java: Update.

	* TaskState.java: New file.
	* Task.java: Move state machine to TaskState.
	* TestUnpaused.java, TestPaused.java, TestStop.java,
	TestStopAndStop.java: Update.

2005-08-02  Andrew Cagney  <cagney@redhat.com>

	* Task.java: Delete unused variables startRequest, stopRequest,
	and stepRequest from the state machine.

	* Linux.java, Task.java: Delete stopTask, make operation names
	consistent.
	* TestAttach.java, TestAttachThreads.java, TestDetachThreads.java,
	TestExiting.java, TestPaused.java, TestReattachThreads.java,
	TestTerminated.java, TestUnpaused.java: Update.

	* RequestStepiTaskEvent.java: New.
	* Task.java: Replace "step" with "requestStepi".  Inject a
	RequestStepiTaskEvent into the event queue and handle in the state
	machine.
	* TestStep.java: Update.

	* RequestGoTaskEvent.java: New.
	* Task.java: Replace "go" with "requestGo".  Inject a
	RequestGoTaskEvent into the event queue and handle in the state
	machine.
	* TestUnpaused.java, TestGoAndGo.java, TestStopAndGo.java,
	TestGoAndGo.java, TestStep.java, Proc.java: Update.

	* RequestStopTaskEvent.java: New.
	* Task.java: Replace "stop" with "requestStop".  Inject a
	RequestStopTaskEvent into the event queue and handle in the state
	machine.
	* TestUnpaused.java, TestPaused.java, TestStopAndStop.java,
	TestStop.java, TestStopAndGo.java, TestGoAndGo.java, Proc.java:
	Update.

2005-08-01  Andrew Cagney  <cagney@redhat.com>

	* Linux.java: Convert SIGSTOP into StoppedTaskEvent.
	* TestDetachThreads.java, TestDetach.java,
	TestAttachSuspended.java: Check for StoppedTaskEvent instead of
	SignaledTaskEvent.
	* Task.java: Handle StoppedTaskEvent.
	* StoppedTaskEvent.java: Add member detachHackXXX.
	* TestReattachThreads.java: Simplify.
	
	* TestSyscallOpen.java, TestSyscall.java: Instead of
	SignaledTaskEvent, check for TrappedTaskEvent.
	* Proc.java, TestStep.java: Instead of SignaledTaskEvent, cast to
	TaskEvent,
	* Task.java: For State, handle TrappedTaskEvent, delete
	unnecessary SignalledTaskEvent cases.
	* Linux.java: For stop with SIGTRAP, create a TrappedTaskEvent.

2005-07-31  Andrew Cagney  <cagney@redhat.com>

	* Linux.java: Parameterize the TaskEvent constructors.

	* Task.java: For State, add "name" member, set using an explicit
	 constructor parameter.  Clean up toString methods.

	* Linux.java: Delete the one parameter "stopped" observer.

	* Task.java: Add "process" methods for SignaledTaskEvent and
	TrappedTaskEvent.
	* Linux.java: Add local SignaledTaskEvent and TrappedTaskEvent
	methods.

	* SignaledTaskEvent.java: New.
	* TrappedTaskEvent.java: New.
	* Linux.java, Proc.java, StoppedTaskEvent.java, Task.java,
	TestAttachSuspended.java, TestDetach.java, TestDetachThreads.java,
	TestI386Regs.java, TestReattachThreads.java, TestStep.java,
	TestSyscall.java, TestSyscallOpen.java, TestUnpaused.java: Replace
	StoppedTaskEvent with SignaledTaskEvent.

	* ClonedTaskEvent.java, ExecedTaskEvent.java,
	ExitedTaskEvent.java, ExitingTaskEvent.java, ForkedTaskEvent.java,
	StoppedTaskEvent.java, SyscallTaskEvent.java, TaskEvent.java,
	TerminatedTaskEvent.java: Delete unnecessary public constructor
	and unused "execute" method.
	* EventLoop.java: Delete unused
	TaskEvent instances.

2005-07-30  Andrew Cagney  <cagney@redhat.com>

	* Linux.java, Task.java: Delete "isTrapSig" and "isStopSig".

	* SysUtils.Java, cni/SysUtils.cxx: Delete files, signal functions
	replaced by sys.Sig.
	* Linux.java, Task.java, TestAttach.java, TestAttachThreads.java,
	TestDetach.java, TestDetachThreads.java, TestExiting.java,
	TestPaused.java, TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java,
	TestReattachThreads.java, TestStep.java, TestStop.java,
	TestStopAndGo.java, TestStopAndStop.java, TestTerminated.java,
	TestUnpaused.java: Use sys.Sig.

	* SysUtils.java, cni/SysUtils.cxx: Delete "infLoop",
	"infThreadLoop", and "suspendedProg"; moved to sys.XXX.
	* TestDetachThreads.java, TestUnpaused.java,
	TestProcStopAndGo2.java, TestReattachThreads.java,
	TestAttachThreads.java, TestAttach.java, TestProcStop.java,
	TestPaused.java, TestStop.java, TestStopAndStop.java,
	TestProcStopAndStop.java, TestStopAndGo.java,
	TestAttachSuspended.java, TestGoAndGo.java,
	TestProcStopAndGo.java: Update to use sys.XXX.

	* SysUtils.java, cni/SysUtils.cxx: Delete "kill" and "tkill".
	* TestAttachSuspended.java, TestDetach.java,
	TestDetachThreads.java, TestGoAndGo.java, TestPaused.java,
	TestProcStop.java, TestProcStopAndGo.java,
	TestProcStopAndGo2.java, TestProcStopAndStop.java,
	TestReattachThreads.java, TestStep.java, TestStop.java,
	TestStopAndGo.java, TestStopAndStop.java, TestUnpaused.java: Use
	Signal.kill.

	* cni/SysUtils.cxx, SysUtils.java: Add sigchld.
	* Linux.java: Use SysUtils.
	* cni/Linux.cxx: Delete.
	
	* cni/Linux.cxx: Don't include "Linux$EventLoop$WaitEvent.h".

2005-07-29  Andrew Cagney  <cagney@redhat.com>

	* cni/Linux.cxx: Delete "WaitEvet.execute" and corresponding
	support routines.
	* Linux.java: Replace WaitEvent observer with individual
	Wait.Observer's.

2005-07-28  Andrew Cagney  <cagney@redhat.com>
	    Jeff Johnston  <jjohnstn@redhat.com>
	    Sami Wagiaalla  <swagiaal@redhat.com>
	
	* AllStoppedProcEvent.java: New file.
	* Auxv.java: New file.
	* ByteOrder.java: New file.
	* ClonedTaskEvent.java: New file.
	* EventLoop.java: New file.
	* ExecedTaskEvent.java: New file.
	* ExitedTaskEvent.java: New file.
	* ExitingTaskEvent.java: New file.
	* ForkedTaskEvent.java: New file.
	* I386Linux.java: New file.
	* Isa.java: New file.
	* Linux.java: New file.
	* Manager.java: New file.
	* PowerPcLinux.java: New file.
	* Proc.java: New file.
	* ProcEvent.java: New file.
	* ProcEventObservable.java: New file.
	* ProcFactory.java: New file.
	* PsEvent.java: New file.
	* PsListener.java: New file.
	* PsObserver.java: New file.
	* Register.java: New file.
	* StoppedTaskEvent.java: New file.
	* SysUtils.java: New file.
	* Syscall.java: New file.
	* SyscallEventInfo.java: New file.
	* SyscallTaskEvent.java: New file.
	* Task.java: New file.
	* TaskEvent.java: New file.
	* TaskEventObservable.java: New file.
	* TaskFactory.java: New file.
	* TaskId.java: New file.
	* TerminatedTaskEvent.java: New file.
	* TestAttach.java: New file.
	* TestAttachSuspended.java: New file.
	* TestAttachThreads.java: New file.
	* TestAuxv.java: New file.
	* TestClone.java: New file.
	* TestDetach.java: New file.
	* TestDetachThreads.java: New file.
	* TestExec.java: New file.
	* TestExiting.java: New file.
	* TestFork.java: New file.
	* TestGoAndGo.java: New file.
	* TestI386Regs.java: New file.
	* TestPaused.java: New file.
	* TestProcStop.java: New file.
	* TestProcStopAndGo.java: New file.
	* TestProcStopAndGo2.java: New file.
	* TestProcStopAndStop.java: New file.
	* TestPsObserver.java: New file.
	* TestReattachThreads.java: New file.
	* TestRun.java: New file.
	* TestStep.java: New file.
	* TestStop.java: New file.
	* TestStopAndGo.java: New file.
	* TestStopAndStop.java: New file.
	* TestSyscall.java: New file.
	* TestSyscall2.java: New file.
	* TestSyscallOpen.java: New file.
	* TestTerminated.java: New file.
	* TestThreadExec.java: New file.
	* TestUnpaused.java: New file.
	* X8664Linux.java: New file.
	* cni/Linux.cxx: New file.
	* cni/SysUtils.cxx: New file.
