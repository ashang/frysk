2008-04-25  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java: Only warn about breakpoint address mismatch if
	the breakpoint falls outside the borders of the traced symbol.

2008-04-25  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java: Fix logging.

2008-04-17  Andrew Cagney  <cagney@redhat.com>

	* TestMappingGuard.java: Use frysk.config.Prefix.

2008-04-16  Mark Wielaard  <mwielaard@redhat.com>

	* TaskTracer.java (getReturnAddress): Fetch the return address
	through outer frame address again.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java
	(FunctionReturnObserver.handleReturn): New function, refactored
	from updateHit.
	(FunctionReturnObserver.updateHit): Handle the case where one
	return address hit signalizes two return events: from PLT and from
	function.
	(TracePoint): Support chaining.
	(TracePoint.getLibraryName): Moved here from TaskTracer class.
	(TracePoint.toString): Event name formatting moved here.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java (getReturnAddress): Fetch the return address
	from Arch code again, before reliable data can be got from prev
	frame computation.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java (updateHit): Changed the way of PLT denotation
	from plt(*) to plt:*

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java (updateHit): Pass the right token to the
	shouldStackTraceOn* query.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* Reporter.java (repeat): Moved to frysk.util.ArchFormatter.
	(formatTaskPC): Call out to ArchFormatter to get value padded to
	architecture word width.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java: Support PLT tracing.
	* FtraceController.java: Likewise.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Mostly complete rewrite to use frysk breakpoint
	infrastructure.

2008-04-06  Petr Machata  <pmachata@redhat.com>

	* SymbolRule.java (checkVersionMatches): Uncomment, but make is a
	dummy that always answers true.  Make protected.
	(checkNameMatches): Make protected.
	* PLTRule.java: New file.

2008-04-04  Petr Machata  <pmachata@redhat.com>

	* SymbolRule.java: Comment out unsupported alias and symbol
	version features.

2008-04-03  Petr Machata  <pmachata@redhat.com>

	* TaskTracer.java: New file.  Mix of code from
	Ftrace.TracePointWorkingSet and former Ltrace.java.
	Most of symbol tracing is performed here.

2008-04-03  Petr Machata  <pmachata@redhat.com>

	* MappingGuard.java: Realize observation in separate thread, not
	to clash with locks indirectly grabbed by symtab.getAddresses.

2008-04-03  Petr Machata  <pmachata@redhat.com>

	* FunctionObserver.java: Drop.
	* Ltrace.java: Drop.
	* Symbol.java: Drop.
	* TestLtrace.java: Drop.
	* TracePoint.java: Drop.
	* TracePointFilter.java: Drop.
	* TracePointOrigin.java: Drop.

2008-04-03  Petr Machata  <pmachata@redhat.com>

	* MemoryMapping.java: Use String instead of java.io.File

2008-04-03  Petr Machata  <pmachata@redhat.com>

	* MappingGuard.java: Use symtab.SymbolFactory to find
	_dl_debug_state.

2008-04-02  Petr Machata  <pmachata@redhat.com>

	* FtraceController.java: Start using DwflSymbol instead of
	TracePoint.  Drop PLT support for now.

2008-04-02  Petr Machata  <pmachata@redhat.com>

	* ObjectFile.java: Strip down and move to frysk.dwfl

2008-04-02  Petr Machata  <pmachata@redhat.com>

	* FtraceController.java: Drop dynamic entry point tracing.

2008-04-02  Petr Machata  <pmachata@redhat.com>

	* FtraceLogger.java: Deleted.
	* Ftrace.java: Likewise.
	* FtraceController.java: Introduce local loggers, use them.
	* ObjectFile.java: Likewise.

2008-03-31  Petr Machata  <pmachata@redhat.com>

	* Reporter.java (ctor Reporter): New parameter "showPC"
	(formatTaskPC): New private function
	(eventEntry, eventLeave, eventSingle): Call formatTaskPC
	* Ftrace.java (setShowPC): New function.
	(ctor Ftrace): Move reporter initialization...
	(init): ...here

2008-03-31  Andrew Cagney  <cagney@redhat.com>
	
	* Ftrace.java (trace(Proc)): Replace trace(String[]).

2008-03-28  Petr Machata  <pmachata@redhat.com>
	
	* Arch.java (getReturnAddress): Drop "symbol" parameter.
	* X8664Arch.java (getReturnAddress): Likewise.
	* IA32Arch.java (getReturnAddress): Likewise.
	* Ltrace.java (updateHit): Adjust to above.

2008-03-20  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java: Use ProcTasksAction and ProcTasksObserver.
	
	* Ftrace.java (Ftrace(PrintStackOptions)): New constructor.
	* Reporter.java (Reporter(PrintWriter,PrintStackOptions)): Add
	stackPrintOptions parameter; use.
	(generateStackTrace(Task)): Use StackPrintUtil.

2008-03-17  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java: Update; using TaskAttachedObserverXXX.

2008-03-17  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Add some more logging messages.
	* FtraceController.java: Fix logging.
	Warn when rule wasn't matched.
	* Ltrace.java: Reindent.
	* Rule.java (apply): Return boolean, true when apply matched
	something, false otherwise.

2008-03-17  Petr Machata  <pmachata@redhat.com>

	* FtraceLogger.java: Use rsl.
	* Ftrace.java: Adjust to above.
	* FtraceController.java: Likewise.
	* Ltrace.java: Likewise.
	* MappingGuard.java: Likewise.
	* ObjectFile.java: Likewise.

2008-03-14  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java (ProcRemovedObserver): Re-implement as a Terminated
	observer.

2008-03-12  Andrew Cagney  <cagney@redhat.com>

	* TestMappingGuard.java: Use StopEventLoopWhenProcTerminated.
	* TestLtrace.java: Ditto.

2008-03-10  Petr Machata  <pmachata@redhat.com>

	* MappingGuard.java: Make both mapping guard terminating observers.
	(requestAddSyscallBasedMappingObserver): New function.
	(requestAddMappingObserver): Become private, take extra argument
	to implement the above new function.
	(requestAddMappingObserver): New proxy function.
	* Ftrace.java: Request syscall based observer if user wants -m.

2008-03-10  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Handle -m without -sym/-plt/-dyn.

2008-03-03  Andrew Cagney  <cagney@redhat.com>

	* TestLtrace.java: Use frysk.config.
	* TestMappingGuard.java: Ditto.

2008-02-29  Andrew Cagney  <cagney@redhat.com>

	* FtraceController.java: Extract from frysk.bindir.ftrace.
	* Rule.java: Extract from frysk.bindir.ftrace.
	* SymbolRule.java: Extract from frysk.bindir.ftrace.

2008-02-29  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Support signal tracing.
	Only request syscall/signal/mapping observation when necessary.
	(traceSyscalls): Delete unused field.
	(TracedSignalProvider): New interface.
	(tracedSignalProvider): New field.
	(setTraceSignals): New method.
	(signalSetForTask): New field.
	(MySignaledObserver): New class.

2008-02-28  Petr Machata  <pmachata@redhat.com>

	* TracePoint.java (TracePoint.Instance): New class.
	* Ftrace.java: Use TracePoint.Instance.
	* Ltrace.java: Likewise.
	* TestLtrace.java: Likewise.

2008-02-19  Andrew Cagney  <cagney@redhat.com>

	* TestMappingGuard.java (performTestAllLibraiesGetDetected()):
	Make private.
	* ObjectFile.java: Update to match lib.dwfl.Elf.

2008-02-14  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java (addTracePid(ProcId)): Delete.
	(tracedParents): Delete.
	(addProc(Proc)): Make public.

2008-02-13  Andrew Cagney  <cagney@redhat.com>

	* MemoryMapping.java: Update to match MapsBuilder.

2008-02-12  Andrew Cagney  <cagney@redhat.com>

	* TestLtrace.java: Update to match frysk.testbed.
	* TestMappingGuard.java: Ditto.

2008-02-07  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java: Update to use Host.requestProc(int,FindProc).

2008-02-07  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Support fine-grained selection of syscalls to
	trace/stack trace on.
	(TracedSyscallProvider): New interface.
	(shouldStackTraceOn): Reanamed to shouldStackTraceOnSymbol.
	(tracedSyscallProvider): New member variable.
	(setDontTraceSyscalls): Renamed to setTraceSyscalls.
	(setSyscallStackTracing): Deleted.
	(syscallSetForTask): New member variable.

2008-01-24  Andrew Cagney  <cagney@redhat.com>

	* MappingGuard.java: Update to match
	TaskObserver.Terminating.updateTerminating(Task,Signal,int).
	* Ftrace.java: Update to match
	TaskObserver.Terminated.updateTerminated(Task,Signal,int).

	* IA32Arch.java: Update; Register moved to frysk.isa.registers.
	* X8664Arch.java: Ditto.

	* Ftrace.java: Update Syscall moved to frysk.isa.syscalls.
	* MappingGuard.java: Ditto.

2008-01-23  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java (MyTerminatedObserver): Replace Signal.intValue(int)
	and Signal.toPrint() with Signal.toHostStringFIXME(int).

2008-01-16  Andrew Cagney  <cagney@redhat.com>

	* Ltrace.java: Update; Task.blockers made private; use workaround.
	* MappingGuard.java: Ditto.

2008-01-16  Mark Wielaard  <mwielaard@redhat.com>

	* TestLtrace.java (DummyFunctionObserver): Made static.
	(ObserverCreator): Likewise.
	(GenericController): Likewise.
	(MyFunctionObserver1): Made class member and static. Add events as
	field.
	(MyFunctionObserver2): Likewise. Add expectedEvents and
	expectedReturns as fields.
	(MyFunctionObserver3): Likewiese. Add enterAliases and
	leaveAliases as fields.
	(testMultipleObservers): Removed unresolvedOffUtrace bug #5053.
	(testMultipleControlers): Likewise.
	(testRecursive): Likewise.
	
2008-01-09  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java (TracePointObserver.deletedFrom): Fix checking of
	observers emptiness.

2008-01-08  Petr Machata  <pmachata@redhat.com>

	* ObjectFile.java: Reindent.

2008-01-08  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Handle fake /SYSV00000000 files implementing the
	memory sharing.

2008-01-07  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java: Update; use Host.requestProc(ProcId,FindProc).

2007-12-28  Andrew Cagney  <cagney@redhat.com>

	frysk.proc.TaskObserver.Syscall reanmed to .Syscalls. Syscall
	parameter added.
	* Ftrace.java (MySyscallObserver): Update.
	* MappingGuard.java (SyscallMappingGuard): Update.
	
	frysk.proc.Syscall moved to frysk.syscall.Syscall.
	* Ftrace.java: Update.
	* MappingGuard.java: Update.

2007-12-27  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java: Update; use Task.getSyscallTable().
	* MappingGuard.java: Ditto.

2007-12-21  Andrew Cagney  <cagney@redhat.com>

	* Ftrace.java: Use Syscall.isNoReturn().

2007-12-21  Petr Machata  <pmachata@redhat.com>

	* TestLtrace.java (testRecursive): New test.

2007-12-20  Petr Machata  <pmachata@redhat.com>

	* TestLtrace.java: Refactoring.
	(testArgumentsCorrect1): Turned the test on.
	(testTracingAlias): Dtto.
	(testMultipleObservers): Dtto.
	(testMultipleControlers): New test.

2007-12-20  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Commentary changes & reorganizations.
	* TestMappingGuard: Dtto.
	* TestLtrace.java (testCallRecorded): Turned on the test.

2007-12-20  Petr Machata  <pmachata@redhat.com>

	* TestMappingGuard: New file.
	(testDebugStateMappingGuard): New test, moved from TestLtrace.
	(testSyscallMappingGuard): Dtto.

2007-12-20  Petr Machata  <pmachata@redhat.com>

	* MappingGuard.java: Now provides more fine-grained events.
	(updateMappedPart): New method, brought over from Ltrace.
	(updateUnmappedPart): Dtto.
	(updateMappedFile): Dtto.
	(updateUnmappedFile): Dtto.
	(updateMapping): Dtto.
	(DebugStateMappingGuard): Now implements terminating observer.
	* MappingObserver.java: Added more fine-grained events.
	* Ltrace.java: Doesn't use mapping guard at all.  Rewritten to
	allow adding several observers to single tracepoint, without a
	need to share one controller.  Ltrace doesn't know about the
	controller anymore.
	(Driver): Interface moved to Ftrace.
	(requestAddFunctionObserver): Now provides observing per tracepoint.
	(requestDeleteMappingObserver): Dtto.
	* FunctionObserver.java: Doesn't provide mapping events anymore.
	* Ftrace.java: Reindent.
	Using terminated observer instead of terminating, which didn't
	fire with fatal signals.
	Uses mapping guard to direct Ltrace tracing.
	(Driver, Controller): New interfaces, brought over from Ltrace and
	LtraceController.  Using new interfaces where appropriate.
	(functionObserver): New member variable.
	(TracePointWorkingSet): New class, mostly brought over from Ltrace.
	(MyMappingObserver): Dtto.
	* TestLtrace.java: Temporarily shut down.

2007-12-18  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Use terminating observer to inform about the task
	termination events.
	(MyTerminatingObserver): New class.

2007-12-13  Petr Machata  <pmachata@redhat.com>

	* TestLtrace.java: Reindented.
	(MyController4): Moved from testTracingAlias to class scope.
	(testMultipleObservers): New test.

2007-12-12  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java (handleTask): Add cloned observer to task.
	(tasksObserver.existingTask): Unblock cloned observer.
	(ForkCloneObserverBase): Refactored from forkedObserver code.
	(MyForkedObserver): New class deriving off ForkCloneObserverBase.
	(MyClonedObserver): New class deriving off ForkCloneObserverBase.
	* ObjectFile.java (symbol): Implemented symbol aliases.
	(symbolWithValue): New field.
	* Symbol.java (aliases): New field, holds alias names of symbol.
	(addAlias): New method.
	(hasName): New method.
	* TestLtrace.java (testTracingAlias): New test.

2007-12-03  Jose Flavio Aguilar Paulino <joseflavio@gmail.com>

	* Ltrace.java: Changed HashMap.Entry to Map.Entry. This was
	necessary in order to compile for PowerPC.

	* MappingGuard.java: The same as above.

2007-11-22  Petr Machata  <pmachata@redhat.com>

	* Reporter.java: Flush buffer after writing.

2007-11-22  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java (updateSyscallLeave): Print return value.

2007-11-22  Petr Machata  <pmachata@redhat.com>

	* SyscallHandler.java: deleted
	* StracePrinter.java: deleted
	* Ftrace.java:
	(setEnterHandler, setExitHandler): deleted
	(enterHandler, exitHandler): deleted

2007-11-22  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java (updateSyscallEnter): Pass arguments and support
	noreturn system calls.
	* Reporter.java: Use writer instead of writing to System.err.
	(printArgs): New internal method.
	(eventEntry): Use printArgs.
	(eventSingle): New function.

2007-11-21  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java:
	(stackTraceSetProvider): New field.
	(setTraceFunctions): Take extra argument to init the new field.
	(LtraceControllerObserver): New interface.
	(MyFunctionObserver.stackTraceSetProvider): New field.
	(MyFunctionObserver): Ctor takes extra argument.

2007-11-21  Petr Machata  <pmachata@redhat.com>

	* Ftrace.java: Block on updateForkedOffspring to give
	tasksObserver chance to pick the process up.

2007-11-20  Petr Machata  <pmachata@redhat.com>

	* ObjectFile.java:
	(resolvedInterp): New field.
	(resolveInterp): New method, copied over from MappingGuard.java.
	* MappingGuard.java (setupDebugStateObserver): Call resolveInterp.

2007-11-20  Petr Machata  <pmachata@redhat.com>

	* Reporter.java: New file.  Code moved over from internals of
	Ftrace.MyFunctionObserver in Ftrace.java.
	* Ftrace.java:
	(Ftrace.reporter): New field.
	(Ftrace.writer): Deleted.
	(Ftrace.setWriter): Changed to update reporter instead of writer.
	(Ftrace.init): dtto
	(Ftrace.generateStackTrace): Deleted.
	(Ftrace.handleTask): Create one syscall observer per task.
	(Ftrace.MySyscallObserver): New class, code taken from
	syscallObserver.  Changed to use reporter, syscallHandler
	mechanism dumped for now.
	(Ftrace.MyFunctionObserver): Most of the code moved over to new
	Reporter class.  Uses reporter now.
	* StracePrinter.java: Moved here from frysk.util package.
	* SyscallHandler.java: The same.

2007-11-20  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java
	(Ltrace): Doesn't implement code and terminating observers
	anymore.
	(Ltrace.breakpoints): Field deleted.
	(Ltrace.retBreakpoints): Renamed to functionReturnObservers.
	(Ltrace.FunctionEnterObserver): New internal class.
	(Ltrace.FunctionReturnObserver): New internal class.
	(Ltrace.updateTerminated): Deleted.
	(Ltrace.updateHit): Deleted.
	(TracePointWorkingSet.functionObserversForAddr): New field.

2007-11-20  Petr Machata  <pmachata@redhat.com>

	* LtraceObserver.java: renamed to FunctionObserver.java.
	* Ftrace.java (MyFunctionObserver): create one per observed task.

2007-11-20  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java(Ltrace.checkMapUnmapUpdates): Fix problem with
	unmapping non-elf files.

2007-11-19  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java:
	(Ltrace): Killed most of the stuff here.  This class is now
	internally-instantiated by static methods and serves as the
	observer class underlaying Function Observer exposed by
	request*FunctionObserver interfaces.
	(Ltrace.request*FunctionObserver): New static methods.
	(Ltrace.LtraceTaskObserver): Deleted.
	(Ltrace.lowlevelObserversAdded, Ltrace.lowlevelObserversFailed,
	Ltrace.lowlevelObserverThrowable): New fields.
	(Ltrace.ObserverIterator): New interface.
	(Ltrace.eachObserver): New method.
	(Ltrace.addObserver, Ltrace.removeObserver): Made private.
	(Ltrace.updateHit): Rewritten.
	(Ltrace.addedTo, Ltrace.addFailed): Implemented, made synchronized.
	* LtraceObserver.java: Now extends frysk.proc.TaskObserver.
	All interfaces now return Action.
	(syscallEnter, syscallLeave, taskAttached, taskTerminated):
	Interfaces deleted.
	* MappingGuard.java: Similar changes as in Ltrace.java.
	(MappingGuardB.lowlevelObserversAdded,
	 MappingGuardB.lowlevelObserversFailed,
	 MappingGuardB.lowlevelObserverThrowable): New fields.
	(MappingGuardB.addObserver, MappingGuardB.removeObserver):
	Implemented proper add/remove notification semantics.
	(MappingGuardB.addedTo, MappingGuardB.addFailed): Implemented.
	(MappingGuard.ObserverIterator): New interface.
	(MappingGuard.eachObserver): New method.
	(MappingGuard.notifyObservers): Rewritten.
	(SyscallMappingGuard.updateSyscallLeave): Fixed the cache==null case.
	* TestLtrace.java: Fixed, passes.
	* Ftrace.java: Moved here from `util' package.
	(Ftrace.ltraceController): New field
	(Ftrace.setTraceFunctions): New method.
	(Ftrace.handleTask): requestAddFunctionObserver if requested.

2007-11-16  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java: Cleanups
	* MappingGuard.java (enableSyscallObserver): New static field.
	(enableDebugstateObserver): dtto
	(MappingGuardB.notifyObservers): add to blockers once for each
	time the observer was registered.
	* MemoryMapping.java (Part.toString): Improved.
	* TestLtrace.java: use new fields to test both mapping guards.

2007-11-14  Petr Machata  <pmachata@redhat.com>

	* ChangeLog: remove paths from my previous entry

2007-11-14  Petr Machata  <pmachata@redhat.com>

	* TestLtrace.java (testAllLibrariesGetDetected): No longer
	unresolvedx8664.
	(testCallRecorded): Ditto.
	(testArgumentsCorrect1): Ditto.

2007-11-14  Petr Machata  <pmachata@redhat.com>

	* Symbol.java (offset): New field.
	* TracePoint.java (offset): New field.
	* ObjectFile.java: Support `offset'.
	* MemoryMapping.java: Rewritten.
	* MappingGuard.java: Adapted to above.
	* Ltrace.java: Adapted to above.

2007-11-13  Sami Wagiaalla  <swagiaal@redhat.com>

	* TestLtrace.java (testAllLibrariesGetDetected): Marked
	as unresolvedx8664.
	(testCallRecorded): Ditto.
	(testArgumentsCorrect1): Ditto.

2007-11-10  Petr Machata  <pmachata@redhat.com>

	* MappingController.java: Renamed to MappingObserver.java.
	* MappingGuard.java: Turned into more frysk task observer like pattern.
	(MappingGuard.MappingGuardB) new abstract base class
	(MappingGuard.SyscallMappingGuard) concrete guard implementation
	(MappingGuard.DebugStateMappingGuard) another concrete guard impl.
	(MappingGuard.requestAddMappingObserver,
	 MappingGuard.requestDeleteMappingObserver) new static methods
	* Ltrace.java: accomodate for the changes above

2007-11-08  Petr Machata  <pmachata@redhat.com>

	* MappingController.java: New file.
	* MappingGuard.java: New file.
	* Ltrace.java: No longer trace syscalls by default.
	(LtraceTaskObserver.updateSyscallLeave): Move to MappingGuard.
	* ObjectFile.java: Now loads program interpreter.
	(setInterp, getInterp): New methods.
	(lookupTracePoint): New method.

2007-11-02  Petr Machata  <pmachata@redhat.com>

	* TestLtrace.java (testArgumentsCorrect1): New test.

2007-11-02  Petr Machata  <pmachata@redhat.com>

	* IA32Arch.java: Turn off poor man's call formatter.
	Answer six arguments instead of four.
	Return Integers instead of Longs.
	* X8664Arch.java: Implement funcall arglist.

2007-10-31  Petr Machata  <pmachata@redhat.com>

	* ObjectFile.java: Fix symbol table caching.

2007-10-18  Petr Machata  <pmachata@redhat.com>

	* ObjectFile.java: Fix assignment of symbols to origins.

2007-10-17  Andrew Cagney  <cagney@redhat.com>

	* Ltrace.java: Update; use frysk.proc.FindProc.

2007-10-16  Andrew Cagney  <cagney@redhat.com>

	* X8664Arch.java: Rename Archx8664.java.
	* IA32Arch.java: Rename Archx86.java.
	* ArchFactory.java: Update; use ISAMap.

2007-10-14  Andrew Cagney  <cagney@redhat.com>

	* ArchFactory.java: Update; use Task .getISA() instead of Isa
	.getElfMachineType().

2007-10-12  Andrew Cagney  <cagney@redhat.com>

	* Archx8664.java: Replace BankRegister .get(Task) with Task
	.get(Register); make constructor private.
	* Archx86.java: Ditto.

2007-10-01  Mark Wielaard  <mwielaard@redhat.com>

	* ObjectFile.java (ObjFBuilder.getTracePoints):
	Expand ElfSymbol.Loader.loadAll() sequence.

2007-09-29  Petr Machata  <pmachata@redhat.com>

	* ObjectFile.java: Adjust to ElfSymbol changes.
	Even lazier loading, only load dynamic symbols that are necessary
	for PLT trace points.
	Added assertions before long->int conversions.
	* TestLtrace.java: Remove `nresolvedOffUtrace for #5054.

2007-09-29  Petr Machata  <pmachata@redhat.com>

	* Archx8664.java: New file.
	* ArchFactory.java: Recognize x86_64.
	* TestLtrace.java: Simplify tests, recognize x86_64's ld-linux.

2007-09-29  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java: Instead of pre-loading all tracepoints and
	filtering them through user-provided filter, let user provide a
	controller that drives the tracing process.
	(DriverImpl): New class.
	* LtraceController.java: New file.
	* ObjectFile.java: Support lazy loading of tracepoint tables.
	Support statically linked binaries.
	(ObjFBuilder): New class.
	* TestLtrace.java: Adjust to match API changes.
	* TracePointOrigin.java (toString): New method.

2007-09-27  Andrew Cagney  <cagney@redhat.com>

	* Archx86.java: Update; frysk.proc.Register renamed to
	frysk.proc.BankRegister.

2007-09-21  Andrew Cagney  <cagney@redhat.com>

	* TestLtrace.java (testCallRecorded): Add unresolvedOffUtrace; bug
	5053.
	(testAllLibrariesGetDetected): Ditt; bug 5054.

2007-09-19  Sami Wagiaalla  <swagiaal@redhat.com>

	* TestLtrace.java (testCallRecorded): Added unresolvedX8664.
	(testAllLibrariesGetDetected): Ditto.

2007-09-12  Petr Machata  <pmachata@redhat.com>

	* TestLtrace.java (testCallRecorded): rename MyFilter to MyFilter2.

2007-09-12  Petr Machata  <pmachata@redhat.com>

	* Archx86.java: convert C signed to java long properly
	* SymbolFilter.java: deleted
	* TracePoint.java: new file
	* TracePointFilter.java: new file
	* TracePointOrigin.java: new file
	* Ltrace.java:
	  - use logger where possible
	  - use TracePoints
	(addProc, trace(String[])): unblock main task only after all tasks
	are iterated
	(taskRemoved, updateTerminated): observer handling moved from
	former to latter
	(breakpointsForTask, retBreakpointsForTask): use these instead of
	pltBreakpoints, dynamicBreakpoints, staticBreakpoints,
	pltBreakpointsRet
	(checkMapUnmapUpdates): compare set sizes instead of contents
	* LtraceObserver.java: use TracePoints
	(taskRemoved): renamed to taskTerminated, with arguments
	* MemoryMapping.java: support double mappings
	* ObjectFile.java:
	  - use logger where possible
	  - use TracePoints
	  - support entryPoint
	  - load TracePoints also from symtab
	  - support statically linked binaries
	* Symbol.java: don't record addresses at symbol, that's what
	TracePoints are for
	* TestLtrace.java: new file

2007-08-25  Petr Machata  <pmachata@redhat.com>

	* Arch.java: new file
	* Archx86.java: new file
	* ArchFactory.java: new file
	* FtraceLogger.java: new file
	* Ltrace.java: use logger for reporting.  Use observers for
	client-side per-event activities.
	(updateSyscallEnter): load syscall arguments
	(updateSyscallLeave): load syscall return value
	(getReturnAddress): moved to Archx86.java
	(getArguments): the same
	(updateHit): handle several breakpoints on same return site
	* LtraceObserver.java: new interfaces syscallEnter, syscallLeave,
	fileMapped, fileUnmapped, taskAttached, taskRemoved
	* MemoryMapping.java: use File instead of String where makes sense
	* ObjectFile.java: the same

2007-08-23  Petr Machata  <pmachata@redhat.com>

	* Ltrace.java: new file, refactored from ../util/Ltrace.java
	* MemoryMapping.java: the same
	* ObjectFile.java: the same
	* Symbol.java: the same
	* LtraceObserver.java: new file with interface
	* SymbolFilter.java: the same

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
End:
