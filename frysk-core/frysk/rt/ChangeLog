2007-03-19  Mike Cvet  <mcvet@redhat.com>

	* TestStepping.java (assertions): Fixed up a couple assertions.

2007-03-16  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (setRunning): Added.

2007-03-15  Sami Wagiaalla  <swagiaal@redhat.com>

	* StackFactory.java (printStackTrace): new function.

2007-03-15  Mike Cvet  <mcvet@redhat.com>

	* TestStepping.java: Deleted old constants, added new ones.
	(test): Determines which test is running.
	(CFile): Source file path for test program.
	(testRecursiveLineStepping): Removed.
	(testASMStepping): Removed.
	(testLineStepFunctionCall): Added.
	(testLineStepIfStatementPass): Added.
	(testLineStepIfStatementFail): Added.
	(testLineStepFunctionReturn): Added.
	(testASMSingleStep): Added.
	(testASMMultiStep): Added.
	(testASMJump): Added.
	(setUpTest): Re-written.
	(assertions): Added. Cleaner method for making assertions on
	stepping results.
	(AttachedObserver.updateAttached): Delete AttachedObserver from task.
	(AttachedObserver.deletedFrom): Add RunState from here.
	(LockObserver.update): Cleaned up.

2007-03-15  Stan Cox  <scox@redhat.com>

	* StackFrame.java (subprogram): New.
	(getSubprogram): New.
	(setSubprogram): New.
	* LexicalBlock.java:  Moved from frysk.value.
	* Subprogram.java:  Moved from frysk.value.

2007-03-12  Mike Cvet  <mcvet@redhat.com>

	* Line.java (getDOMSource): Check that the DOMFrysk coming out of the
	factory isn't null.

2007-03-09  Mike Cvet  <mcvet@redhat.com>

	* RunState.java: General clean-up. 
	(STEP_OVER_LINE_STEP): Renamed to STEP_OVER_TEST.
	(STEP_INSTRUCTION_NEXT_OVER): Renamed to STEP_INSTRUCTION_NEXT_TEST.
	(STEP_ADVANCE): Added.
	(setUpLineStep): Added - takes just a Task instead of a List.
	(setUpStepNextInstruction): Removed initialization of secondary
	FrameIdentifier.
	(stepNextInstruction): Removed redundant code.
	(stepOver): Ditto.
	(stepOut): Ditto.
	(outerFrameIdentifier): Removed.
	(setUpStepOver): Removed initialization of secondary FrameIdentifier.
	(setUpStepOut): Ditto.
	(setUpStepAdvance): Added. Will step the task until it returns to the 
	current frame.
	(decTaskStepCount): Removed.
	(updateExecuted): Added code for step-advance. Removed redundant code
	for step over.

2007-03-07  Tim Moore  <timoore@redhat.com>

	* LineBreakpoint.java (addBreakpoint, deleteBreakpoint): Process
	all the addresses associated with a source line.

2007-03-06  Nurdin Premji  <npremji@redhat.com>

	* StackAccessors.java: Have a PtraceAccessor component instead of extending
	PtraceAccessors.
	Made all methods public.
	Added unimplemented Accessors methods.
	* Testframe.java: Remove unused commented code.

	* TestFrame.java: New. 
	* Frame.java: New.
	* StackAccessors.java: New.
	* StackFactory.java (createStackTrace): New.	

2007-03-02  Mike Cvet  <mcvet@redhat.com>

	* Line.java (proc, source, function): New fields.
	(Line): Takes an additional Proc.
	(getDOMFunction): Added. Creates and returns the DOMFunction
	representing this Line on demand. Fixes #4118.
	(getDOMSource): Added. Creates and returns the DOMSource 
	representing this Line on demand. Fixes #4118.
	* StackFrame.java (setDOMFunction): Removed via #4118.
	(setDOMSource): Ditto.
	(getDOMFunction): Ditto.
	(getDOMSource): Ditto.
	(getLines): Pass in this StackFrame's Proc to the new Line.

2007-02-27  Andrew Cagney  <cagney@redhat.com>

	* StackFrame.java: Go back to using FrameCursor .getProcOffset.
	* Symbol.java (Symbol): When size is unknown, set it to -1.
	(getAddress): Rename getStartAddress.
	* TestSymbol.java: Check that the Symbol address is non-zero when
	expected.

	* TestStepping.java (testRecursiveLineStepping): Note problem with
	4103.

	* StackFrame.java (sourceFile, getSourceFile): Delete.
	
2007-02-27  Mike Cvet  <mcvet@redhat.com>

	* TestRunState.java: Removed references to Dwfl objects. Fixes #4103.
	* TestStepping.java: Ditto.
	* TestStackBacktrace.java: Ditto.

2007-02-27  Andrew Cagney  <cagney@redhat.com>

	* StackFrame.java (dwflLine, getDwflLine): Delete - were NULL.
	* TestStackBacktrace.java: Remove checks on line information for
	frames outside of "main".

2007-02-26  Andrew Cagney  <cagney@redhat.com>

	* StackFrame.java (toPrint): Use Line.
	(lineNum, getLineNumber, column, getColumn): Delete.
	* TestRunState.java: Update, use StackFrame .getLine.
	* TestStackBacktrace.java: Ditto.

	* StackFrame.java (setStartLine, setEndLine): Delete.
	(startLine, getStartLine, endLine, getEndLine): Delete.
	
	* StackFrame.java (endOffset, getEndOffset): Delete, always -1.
	(startOffset, getStartOffset): Delete, always 0.

	* StackFactory.java: Delete call to setIsSignalFrame.
	* StackFrame.java (setIsSignalFrame, getIsSignalFrame): Delete.
	(inner, cursor): Make private.
	(outer): Make package private.

	* StackFrame.java (getLines): New.
	* Line.java: New.

	* StackFrame.java: Rename myCursor to cursor.  Rename myTask to
	task.
	(hasDebugInfo): Delete.

	* StackFrame.java (getSymbolName): Delete.

2007-02-26  Mike Cvet  <mcvet@redhat.com>

	* TestFrameIdentifier.java (testEquals): Added test for
	non-FrameIdentifier objects.

2007-02-26  Andrew Cagney  <cagney@redhat.com>

	* StackFrame.java (getMethodName): Delete.
	(toPrint): Update, use getSymbol.
	* TestRunState.java: Update, use getSymbol.

2007-02-26  Mike Cvet  <mcvet@redhat.com>

	* FrameIdentifier.java: Added Javadoc.
	(equals): Returns false if the parameter is not an instanceof
	FrameIdentifier.

2007-02-26  Tim Moore  <timoore@redhat.com>

	* BreakpointObserver:New file.
	* LineBreakpoint: New file.
	* RunState.java (SourceBreakpoint): Change name of class to
	PersistentBreakpoint.
	(PersistentBreakpoint.getObserver,
	PersistentBreakpoint.setObserver):new methods.
	(PersistentBreakpoint.updateHit): Call breakpoint observer.
	(addPersistentBreakpoint, deletePersistentBreakpoint): New methods.

2007-02-23  Andrew Cagney  <cagney@redhat.com>

	* TestSymbol.java: Rename TestStackFrame.java.
	* Symbol.java: New file.
	* StackFrame.java (getSymbol): New method.

	* TestStackFrame.java (testFrameIdentifer): Delete.
	* TestFrameIdentifier.java: New file.
	* StackFrame.java: Create the FrameIdentifier on-demand.

2007-02-22  Mike Cvet  <mcvet@redhat.com>

	* TestStackFrame.java (testFrameIdentifier): Added. Tests the 
	relationships between FrameIdentifiers belonging to different frames in
	the same stack. Fixes #4091.
	(StackFrameTest): Added. Dummy StackFrame class for testing
	FrameIdentifiers.
	* StackFrame.java (hasDebugInfo): Added. Returns true if the StackFrame
	has debuginfo.
	* RunState.java (setUpLineStep): Made more threading-aware. Returns a
	boolean if RunState is in the proper state for step work.
	(stepInstruction): Ditto.

2007-02-20  Mike Cvet  <mcvet@redhat.com>

	* StackFactory.java (createStackFrame): Added check for number of
	StackFrames being iterated over.
	* TestRunState.java (testStepOver): Added brokenXXX for #4083.
	(testInstructionNext): Ditto.
	(testStepOut): Added, test for step-out. Marked brokenXXX for #4083.
	* RunState.java (updateExecuted): Added cases for step-out.
	(setUpStepOut): Implemented.
	(stepOut): Implemented; commented out pending #4083.
	(stepOver): Ditto.
	(stepNextInstruction): Ditto.
	* StackFrame.java (StackFrame): Update initialization of FrameIdentifier
	with address instead of name.
	* FrameIdentifier.java (FrameIdentifier): Removed frame name field, and
	instead use StackFrame current address.
	(innerTo): Added. Returns true if the StackFrame represented by this
	FrameIdentifier is inner to the incoming FrameIdentifier's StackFrame.
	(outerTo): Ditto, for being an outer frame.
	(equals): Returns true if the CFA and current address of both
	FrameIdentifiers match.
	(compareTo): Removed.
	(hashCode): Added. Returns CFA XOR'd with address.
	(toString): Added.

2007-02-19  Mike Cvet  <mcvet@redhat.com>

	* TestRunState.java (testStepOver): Added.
	(testInstructionNext): Added.
	(stepOverAssertions): Added. Assertions for above step-over tests.
	* RunState.java: Added some more state macros.
	(setUpNextInstruction): Assign both the current frame's
	FrameIdentifier, as well as the outer frame's for use later.
	(stepNextInstruction): Use FrameIdentifier to compare StackFrames.
	Due to #4060, check for a missing frame and re-step an instruction.
	(stepIn): Removed step-over double-step hack.
	(frameIdentifier, outerFrameIdentifier): New. FrameIdentifiers for
	the outer, and double-outer StackFrames upon return from a step-over
	or step-out call.
	(setUpStepOver): Set taskStepCount properly. Set FrameIdentifiers.
	(setUpStepOut): Ditto.
	(stepOver): Compare frames using FrameIdentifier instead of CFA.
	Check for missing frames via #4060.
	(continueExecution): Refactored from run(). Removes ambiguity from
	functionality. 
	(run): Added. Will restart the process from scratch.
	(updateExecuted): Improved stepping cases. Added code to deal with
	instruction level step-over.

2007-02-19  Mark Wielaard  <mark@klomp.org>

	* RunState.java (swContinue): Removed.

2007-02-19  Mark Wielaard  <mark@klomp.org>

	* RunState.java (run): Don't unblock after delete request.

2007-02-16  Mike Cvet  <mcvet@redhat.com>

	* FrameIdentifier.java: Added. Uses a StackFrame name and CFA to
	identify a StackFrame. Fixes #4062.
	* StackFrame.java (toPrint): Changed back to 
	FrameCursor.getMethodName() since getSymbolName is broken, via
	#4063.
	(frameIdentifier): Added.
	(StackFrame): Initialize above member.
	(getFrameIdentifier): Added.

2007-02-16  npremji  <npremji@redhat.com>

	* StackFrame.java (getSymbolName): Fixed to return "" instead of null
	if symbol name is null.
	(toPrint): Changed to just use getSymbolName.

2007-02-16  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (swContinue): Added. Temporary workaround for 
	#4057.

2007-02-15  Mike Cvet  <mcvet@redhat.com>

	* TestStackBacktrace.java (testFramePopping): Marked broken for
	#4059.
	(testFramePushing): Ditto.
	* StackFrame.java (getDOMSource): Refactored from getData().
	Changed to match getDOMFunction().
	* RunState.java (STEP_INSTRUCTION): Refactored from
	INSTRUCTION_STEP to match other macros.
	(STEP_INSTRUCTION_NEXT, STEP_INSTRUCTION_NEXT_OVER): Added for
	instruction-level 'step over.'
	(stepInstruction): Added - new overloaded method for instruction
	stepping; takes a Task.
	(setUpStepNextInstruction): Added - new method for instruction
	step-over. 
	(setUpStepNextInstruction): Added - overloaded above.
	(stepNextInstruction): Added. Performs instruction-level step-over.
	(stepOver): Removed debugging statements.
	(cleanUpBreakPoint): Nullify breakpoint.
	(updateExecuted): Added new cases for instruction step-over.
	(blockTask): Removed redundant call for adding observer.

2007-02-15  Tim Moore  <timoore@redhat.com>

	* RunState.java (RunState): Add logger member.
	(STOPPED, RUNNING, INSTRUCTION_STEP, STEP_IN, STEP_OVER, STEP_OUT,
	STEP_OVER_LINE_STEP): Make public.
	(run): call requestUnblock on the instruction observer.
	(Breakpoint.address, Breakpoint.triggered, Breakpoint.added,
	Breakpoint.removed): Make protected.
	(Breakpoint): Print out address in hex.
	(logHit): New method.
	(Breakpoint.updateHit): Change uses of System.out.println to
	logging calls.
	(SourceBreakpoint.updateHit): More logging, call setChanged, call
	super.updateHit.
	(SourceBreakpoint.addedTo): Override method; don't delete the
	RunState as instruction observer.

2007-02-14  Mike Cvet  <mcvet@redhat.com>

	* TestStackBacktrace.java (testFramePushing): Added. New test case for
	instruction stepping through pushing a new frame on the stack.
	(testFramePopping): Added. New test case for instruction stepping
	though popping a frame off of the stack.
	(setUpTest): Added. Sets up data structures for above two tests.
	(pushPopAssertions): Added. Sets up testing process for assertions and
	begins asserting when appropriate.
	(LockObserver): Added. Link to RunState.

2007-02-09  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (setUp): Refactored from setUpStep().
	(setUpLineStep): Used to specifically set up line stepping; 
	meat of initialization now done in setUp().
	(stepIn): Added a special case for when step-over requires
	a line step.
	(setUpStepOver): Finalized workflow - correctly sets up states
	for stepping over, for single-threaded process. 
	(stepOver): Finalized workflow - correctly sets breakpoint 
	for single-threaded stepping-over. Not visible from
	SourceWindow until libunwind bugs are resolved.
	(finishStepOver): Removed.
	(setUpStepOut): Finalized workflow - correctly sets up
	breakpoint and info for stepping-out. Not visible until
	libunwind bugs are resolved.
	(stepOut): Properly removes breakpoint and cleans up after
	a step-out.
	(updateExecuted): Cleaned up; correctly behaves for stepping
	over and out.
	(Breakpoint.updateHit): Re-adds the RunState InstructionObserver
	after hitting the breakpoint. Returns blocking state.
	(Breakpoint.addedTo): Removes the RunState InstructionObserver.
	* TestRunState.java (testLineStepping): Changed to use refactored
	RunState.setUpLineStep().
	(stepAssertions): Ditto.
	* TestStepping.java (setUpTest): Ditto.
	(stepAssertions): Ditto.

2007-02-08  Tim Moore  <timoore@redhat.com>

	* RunState.java (Breakpoint): Make address field protected.
	(SourceBreakpoint.updateHit): Print out debugging message like
	Breakpoint.

2007-02-07  Nurdin Premji <npremji@redhat.com>

	* StackCallbacks.java (accesReg): Added regNum to logging output.

2007-02-07  Tim Moore  <timoore@redhat.com>

	* RunState.java (SourceBreakpoint.lineBreakpoint): Make private.
	(SourceBreakpoint.getLineBreakpoint): New getter.
	(SourceBreakpoint.updateHit): Add a call to notifyObservers().
	(getTaskSourceBreakpoint): New method.
	(LineBreakpoint.getFileName, LineBreakpoint.getLineNumber, 
	LineBreakpoint.getColumn): New getters.

2007-02-06  Nurdin Premji <npremji@redhat.com>

	* TestStackFrame.java (frameTest): Removed brokenX8664XXX.

2007-02-06  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (getSymbolName): Check for null DwflModules. Fixes
	#3981.
	(getMethodName): Return empty strings rather than null when the name
	cannot be resolved. Fixes #3983.
	(toPrint): Changed back to checking for empty strings rather than nulls
	for unresolvable symbol names.

2007-02-06  Nurdin Premji  <npremji@redhat.com>

	* TestStepping.java (testASMStepping): Fixed, was because of added brackets
	in frysk-asm.h.COMPARE_IMMED.

2007-02-06  Andrew Cagney  <cagney@redhat.com>

	* TestRunState.java: Use TestLib.getExecPath.
	* TestStackBacktrace.java: Ditto.
	* TestStackFrame.java: Ditto.
	* TestStepping.java: Ditto.

2007-02-06  Nurdin Premji  <npremji@redhat.com>

	* TestStepping.java (testASMStepping): Marked as broken.

2007-02-05  Nurdin Premji  <npremji@redhat.com>

	* TestStackFrame.java: Changed testcases to reflect movement to single test
	file. Marked test cases as broken on x86_64.

2007-02-05  Andrew Cagney  <cagney@redhat.com>

	* TestRunState.java: Replace frysk.junit.Paths.getExecPrefix with
	getExecPrefix.
	* TestStackBacktrace.java: Ditto.
	* TestStepping.java: Ditto.

2007-02-05  Mark Wielaard  <mark@klomp.org>

	* TestStackFrame.java (testDebug): Mark as broken #3968.
	(testNoDebug): Likewise.
	(testStripped): Likewise.
	(testStaticDebug): Likewise.
	(testStaticNoDebug): Likewise.
	(testStaticStripped): Likewise.

2007-02-02  Nurdin Premji  <npremji@redhat.com>

	* TestStackFrame.java (frameTest.Terminator.updateSignaled): Optimized to call
	toPrint only once.
	Changed line numbers to be regex's.
	* StackFrame.java (toPrint): Merged frameToString method into here.
	(frameToString): Removed.
	(getSymbolName): Added.
	(getMethodName): Changed to return null rather than empty string. 

2007-02-02  Andrew Cagney  <cagney@redhat.com>

	* TestStackFrame.java (testStaticAsmNoSize): Fix line number to
	match assembler.

2007-02-02  Nurdin Premji  <npremji@redhat.com>

	* TestStackFrame.java (testAsmNoSize): Update from change of funit-stackframe-asm.S.
	(testStaticAsmNoSize): Ditto funit-stackframe-static-asm.S.

2007-02-02  Andrew Cagney  <cagney@redhat.com>

	* TestStackBacktrace.java: Update to match
	frysk.sys.proc.MapsBuilder change, permPrivate removed.

2007-02-01  Nurdin Premji  <npremji@redhat.com>

	* TestStackFrame.java: Cleaned up common strings.
	(testAsmNoSize): Added.
	(testAsmNoDebugNoSize): Ditto.
	(testAsmStrippedNoSize): Ditto.
	(testStaticAsmNoSize): Ditto.
	(testStaticAsmNoDebugNoSize): Ditto.
	(testStaticAsmStrippedNoSize): Ditto.

2007-01-26  Nurdin Premji  <npremji@redhat.com>

	* TestStackFrame.java (testStaticDebug): Added.
	(testStaticNoDebug): Added.
	(testStaticStripped): Added.

2007-01-25  Nurdin Premji  <npremji@redhat.com>

	* StackFactory.java (generateTaskStackTrace): Moved here from:
	frysk.util.StacktraceAction.
	* TestStackFrame: Added.

2007-01-23  Andrew Cagney  <cagney@redhat.com>

	* StackFrame.java: Do not import gnu.gcj.RawDataManaged.
	(unwind_data): Delete field.
	(getUnwindData): Delete method.

	* StackFrame.java: Remove TaskExceptoin code.

	* TestStackBacktrace.java: Remove TaskException code.
	* TestRunState.java: Ditto.
	* RunState.java: Ditto.
	* StackCallbacks.java: Ditto.
	* TestStepping.java: Ditto.
	* StackFactory.java: Ditto.

2007-01-23  npremji  <npremji@tow.toronto.redhat.com>

	* StackFrame.java (frameToString): Changed catch Exception _ to catch Exception ignored.

2007-01-22  Mike Cvet  <mcvet@redhat.com>
	
	* StackFrame.java (getAdjustedAddress): Added. Gets an adjusted address
	for innermost and signal frames. Fixes #3903.
	* TestStepping.java (setUpTest): Removed debug statements.
	* RunState.java (setUpStep): Removed redundant try statement.
	(stepIn): Ditto.
	(getDwfl): Added Javadoc.
	(LineBreakpoint): Changed Vector members to LinkedList, via #3904.
	(LineBreakpoint.addBreakpoint): Some changes addressing above.
	(LineBreakpoint.deleteBreakpoint): Ditto.

2007-01-22  Andrew Cagney  <cagney@redhat.com>

	* TestStackBacktrace.java: Do not catch and print TaskException.
	* TestRunState.java: Ditto.
	* TestStepping.java: Ditto.

2007-01-19  Tim Moore  <timoore@redhat.com>

	* RunState.java (getDwfl): new method.
	(setUpStep, stepIn): Use it.
	(continueTasks,getAddress, SourceBreakpoint, LineBreakpoint,
	addBreakpoint, deleteBreakpoint): new methods for source breakpoints.

2007-01-16  Mike Cvet  <mcvet@redhat.com>

	* TestStepping.java (stepAssertions): Added assertions for assembly 
	stepping. Fixed #3767.
	(testASMStepping): Creates an attached observer rather than a syscall
	observer for the inferior asm program.
	(AttachedObserver): Added.
	(LockObserver..execute): Delete attached observer from Proc when
	the RunState is in place.

2007-01-15  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (Breakpoint.updateHit): Deletes the breakpoint once it
	has been hit.
	(setUpStepOver): Apply the breakpoint Observer to each task.
	* StackFrame.java (toPrint): Re-arranged some code to prevent possible
	NullPointerExceptions.

2007-01-11  Nurdin Premji  <npremji@redhat.com>

	* StackCallbacks.java (accessReg): Use logger formatting mechanism, bug #3216
	(accessFpreg): Ditto.
	(getPid): Ditto.
	(writeFpreg): Ditto.
	(writeMem): Ditto.
	(accessMem): Ditto. Cleaned up some excessive logging junk. 
	(writeReg): Ditto.

2007-01-10  Mike Cvet  <mcvet@redhat.com>

	* TestStackBacktrace.java (testBacktrace): Expect "" instead of null
	for vdso frame filenames.
	(testThreadedBacktrace): Ditto.

2007-01-08  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (setDOMSource): Refactored from setData
	(setDOMFunction): No longer set the DOMSource for this class, set
	independently.

2007-01-04  Nurdin Premji  <npremji@redhat.com>

	* StackCallbacks.java (accessMem): Added logging messages.

2007-01-04  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (toPrint): Catch null method names from non-null
	FrameCursors and print [unknown] instead.

2006-12-30  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (toPrint): Switched the order of file and function
	name in output.

2006-12-28  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (getSourceFile): Ensure filename is never returned
	as null.

2006-12-27  Mike Cvet  <mcvet@redhat.com>

	* TestStackBacktrace.java (frameAssertions): Now determines the
	identity of stack frames by innermost frame function name, rather than
	relative TID. Fixes #3530.
	Catch the case where sometimes kill() is still in the stack trace. Fixes
	#3743.
	(handleTask): Set the global task to the incoming one.
	(testMultiThreadedBacktrace): Added brokenXXX(3815).

2006-12-21  Mike Cvet  <mcvet@redhat.com>

	* TestStackBacktrace.java: Moved into frysk.rt from frysk.rt.tests.
	* TestRunState.java: Ditto.
	* TestStepping.java: Ditto.

2006-12-19  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStepping.java (testAsmStepping): Added. Marked as broken
	re #3767.

2006-12-15  Andrew Cagney  <cagney@redhat.com>

	* tests/TestRunState.java (testInstructionStepping)
	(testLineStepping): Use brokenPpcXXX.
	* tests/TestStepping.java (testRecursiveLineStepping): Ditto.
	* tests/TestStackBacktrace.java (testBacktrace): Note broken due
	to 3744.  Use brokenPpcXXX.
	(testThreadedBacktrace): Note broken due to 3743.  Use
	brokenPpcXXX.

2006-12-15  Mike Cvet  <mcvet@redhat.com>
	
	* StackFrame.java (getMethodName): Return empty string if either the
	FrameCursor's name is null, or the cursor itself.
	(toPrint): Catch broken FrameCursors.
	* RunState.java (setUpStep): Fixed #3735. If none of the Tasks
	belonging to the process have debuginfo, perform an instruction 
	step instead of a line step; clear out line-stepping data structures.

2006-12-14  Mike Cvet  <mcvet@redhat.com>

	* StackFactory.java (createStackFrame): Catch Exceptions coming out of
	StackTraceCreator, and return an empty StackFrame instead of null. Fixes
	#3723.
	* StackFrame.java (StackFrame): New constructor, taking a Task. Used to 
	create an empty StackFrame.
	(getMethodName): If the method name is null, return an empty String 
	instead.

2006-12-14  Adam Jocksch  <ajocksch@redhat.com>

	* StackFrame.java (myCursor): Added, replaces address, methodName, cfa,
	and isSignalFrame fields as well as get/set_reg functionality (bz #
	3687).
	(StackFrame): No longer uses native initialization, funcitonality moved
	into FrameCursor.java.
	(initialize): Removed.
	(getMethodName): Now calls FrameCursor.
	(getAddress): Ditto.
	(toPrint): Ditto.
	(setIsSignalFrame): Ditto.
	(getIsSignalFrame): Ditto.
	(getReg): Ditto.
	(setReg): Ditto.
	(getCFA): Ditto.
	(get_reg): Removed.
	(set_reg): Removed.
	* cni/StackFrame.cxx: Removed.
	
2006-12-13  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (toPrint): Takes a parameter, true if called from the
	SourceWindow (truncating path), false otherwise.

2006-12-13  Nurdin Premji  <npremji@redhat.com>

	* StackFrame.java (toPrint): Changed format of sourceFile#lineNumber.

2006-12-12  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (StackFrame): Demangle names by default.
	(toPrint): Remove call to demangler.
	* tests/TestRunState.java (setUpTest): Assign task with null DwflLine
	a line number of zero.
	(stepAssertions): Handle null DwflLines better; treat as temporary 
	zero rather than breakage. Fixes #3701.

2006-12-11  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStepping.java (testRecursiveLineStepping): Re-enabled.
	(stepAssertions): Catch steps into non-debuginfo areas; including
	linker thunk. Fixes #3685. Fixed up more assertions. Fixes #3685
	and #3686.

2006-12-11  Nurdin Premji  <npremji@redhat.com>

	* StackFrame.java (toPrint): Demangle method names.

2006-12-10  Andrew Cagney  <cagney@redhat.com>

	* tests/TestStackBacktrace.java: Replace pkglibexecdir with
	pkglibdir.

2006-12-09  Andrew Cagney  <cagney@redhat.com>

	* tests/TestRunState.java: Use frysk.sys.Pid.get.
	* tests/TestStepping.java: Ditto.
	* tests/TestStackBacktrace.java: Ditto.
	* tests/TestLib.java: Delete.
	* tests/cni/TestLib.cxx: Delete.

2006-12-08  Andrew Cagney  <cagney@redhat.com>

	* tests/TestStepping.java (testRecursiveLineStepping): Disable,
	3686.

2006-12-08  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (setUpStep): Instead of trying to re-step the task,
	define its line number as zero if we can't get a DwflLine. Fixes #3646.
	(stepIn): Treat null DwflLines as lineNum == 0. Fixes #3680.
	* TestStepping.java (setUpTest): Treate null DwflLines as lineNum == 0.
	Fixes #3680.
	(stepAssertions): Ditto. More carefully handle null DwflLines.

2006-12-07  Phil Muldoon  <pmuldoon@redhat.com>

	* tests/TestStackBacktrace.java: Add permShared flag.

2006-12-06  Andrew Cagney  <cagney@redhat.com>

	* RunState.java: Remove @author.

2006-12-06  Nurdin Premji  <npremji@redhat.com>

	* tests/TestStackBacktrace.java (StackTasksObserver):  Removed unneccesary TODO: Autogenerated method stub.
	* StackCallbacks.java (resume): Ditto.
	(accessFpreg): 	Ditto.
	(writeReg): Ditto.

2006-12-06  Mike Cvet  <mcvet@redhat.com>

	* TestRunState.java (stepAssertions): Bail out and re-step if a proper
	DwflLine can't be generated.

2006-12-05  Nurdin Premji  <npremji@redhat.com>

	* StackFrame.java (toPrint): Added source file to print output.

2006-12-04  Andrew Cagney  <cagney@redhat.com>

	* tests/TestStepping.java (testRecursiveLineStepping): Disabled,
	see bug 3646.

2006-12-03  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (lineLoopCount): Removed.
	(numSteppingTasks): Removed.
	(lineCountMap): Added. Need to keep track of iterations on a Task-specific
	level.
	(setUpStep): Update lineCountMap.
	(stepIn): Updated to use lineCountMap, removed redundant lineMap putting.
	(stepCompleted): Clear out lineCountMap.
	(updateExecuted): No longer let state == STOPPED get through.
	(requestAdd): Update numRunningTasks here.
	* TestRunState.java (stepAssertions): Fixed up a couple assertions.
	* TestStepping.java: Removed debugging prints.
	(stepAssertions): Fixed assertions.
	(LockObserver.update): Cleaned up.
	

2006-12-01  Mike Cvet  <mcvet@redhat.com>

	* TestRunState.java: Cleaned up. Fixed strange compiler optimization bugs.
	(LockObserver.update): Scheduled work on the event loop.
	* TestStepping.java: Added. More complex stepping tests, with recursive
	functions.

2006-11-29  Mike Cvet  <mcvet@redhat.com>

	* RunState.java: Removed ProcBlockObserver import and constructor.
	(setUpStep): Set numSteppingTasks here.
	(stepInstruction): Ditto.
	* TestRunState.java: (testLineStepping): Re-arranged some code.
	(setUpTest): Remove call to set number of stepping Tasks.
	(stepAssertions): If DwflLine returns null, attempt to create a 
	new one. Edited some cases.

2006-11-28  Mike Cvet  <mcvet@redhat.com>

	* TestRunState.java: Removed lots of unneeded imports and variables.
	Uses new RunState interface.
	(testInstructionStepping): Cleaned up. Initialize new LockObserver.
	Enabled re: #3529.
	(testLineStepping): Ditto.
	(setUpTest): Set the task step count in the RunState.
	(stepAssertions): Fixed up some expected line numbers. Made sure to
	clean up after each step and properly re-initialize for each new step.
	(LockObserver): Added.
	(StepObserver): Removed.

2006-11-28  Nurdin Premji  <npremji@redhat.com>

	* tests/TestStackBacktrace.java (testThreadedBacktrace): Changed to use 
	simplified requestFindProc.

2006-11-23  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (setUpStep): If the DwflLine returned is null, perform
	an instruction step. Handles line stepping within frames without debug
	info. Temporary fix for #3575.
	* StackFrame.java (frameToString): Renamed from toString().

2006-11-22  Mike Cvet  <mcvet@redhat.com>

	* RunState.java (state): Added. State representation of this RunState.
	(updateExecuted): Added Javadoc. Handle all state transitions here, 
	instead of in inferior windows. Only notifyObservers when all Tasks
	have been blocked.
	(getProc): Added.
	(notifyStopped): Ditto.
	(runCompleted): Ditto.
	(setState): Ditto.
	(getState): Ditto.
	(executeTasks): Update state and removed returning ints.
	(stepOver): Update state.
	(stepCompleted): Ditto.
	(setUpStepOut): Ditto.
	(stop): Ditto.
	(setUpStep): Ditto.
	(stepInstruction): Ditto.
	(run): Ditto.
	(requestAdd): Added Javadoc.
	(addedTo): Ditto.
	(setTaskStepCount): Ditto.
	(notifyNotBlocked): Ditto.
	(blockTask): Ditto.
	(deletedFrom): Ditto.
	(getNumTasks): Ditto.
	(decNumRunningTasks): Ditto.
	(setProc): Ditto.
	(requestAddObservers): Ditto.
	(getNumObservers): Ditto.
	(removeObserver): Ditto.
	(getNumRunningTasks): Ditto.
	(addFailed): Ditto.
	(setNumRunningTasks): Ditto.

	(breakpoint): Added. TaskObserver.Code object used as a breakpoint on
	StackFrame return addresses for stepping.
	(lastFrame): Added. Last StackFrame on the top of the stack before the
	last step-out or step-over.
	(setUpStepOver): Added. Sets up breakpoint and lastFrame, then
	performs an instruction step on the Task.
	(stepOver): Build a new, shortened, stacktrace and use the frames to
	compare the innermost StackFrame to the previous one represented by 
	lastFrame. Singlestep if they are the same, otherwise run the task.
	(finishStepOver): Added.
	(cleanUpBreakPoint): Added.
	(setUpStepOut): Set up breakpoint on outer frame, set lastFrame and 
	instruction step the Task.
	(updateExecuted): Added functionality to switch for a new state.
	(Breakpoint): Added. New class to implement TaskObserver.Code.

2006-11-21  Nurdin Premji  <npremji@redhat.com>

	* tests/TestStackBacktrace.java: Changed to use new FindProc interface.	

2006-11-20  Mike Cvet  <mcvet@redhat.com>

	* StateModel.java: Refactored to RunState.java.
	* RunState.java: Refactored from StateModel.java.
	(pbo): Removed. ProcBlockObserver is no longer used.
	(stateProc): Added. The Proc this RunState is responsible for.
	(tasks): Added. LinkedList of Tasks belonging to stateProc.
	(numRunningTasks): Number of Tasks belonging to stateProc in the
	unblocked state.
	(RunState): Removed reference to ProcBlockObserver. This class 
	now extends Observable and implements TaskObserver.Instruction 
	directly. Fixes #3538.
	(getNumRunningTasks): Added.
	(setNumRunningTasks): Added.
	(getNumObservers): Added. Returns the number of Observers in this
	Observable's Observer list.
	(removeObserver): Added. Calls deleteObserver() with the additional 
	stipulation of releasing all Tasks if there are no more Observers
	watching them.
	(setProc): Added. Sets stateProc and tasks, and blocks all tasks from
	the incoming Proc.
	(updateExecuted): Added. Callback for TaskObserver.Instruction. Notify
	all watching observers that a task has been re-blocked.
	(addedTo): Added. Callback for TaskObserver.Instruction.
	(deletedFrom): Ditto.
	(addFailed): Ditto.
	(requestAdd): Schedules this Observer to be added to all Tasks.
	(requestAddObservers): Adds this InstructionObserver to the incoming Task.
	(blockTask): Schedules this InstructionObserver to be added to all
	incoming Tasks.
	(getNumTasks): Added.
	* tests/TestStateModel: Refactored to TestRunState.
	* tests/TestRunState: Refactored from TestStateModel. Updated to use 
	RunState.
	
2006-11-16  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStateModel.java (testInstructionStepping): Updated for
	broken 3529.
	(testLineStepping): Ditto.
	(stepAssertions): Lots of updates for new funit-rt-stepper code.

2006-11-15  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (cfa): Added. Cannonical frame address.
	(getCFA): Added.
	
	* StackFrame.cxx (initialize): Added code to initialize the cfa.

2006-11-14  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (testBackTrace): Cleaned up.
	* tests/TestStateModel.java (testInstructionStepping): Added.
	(stepAssertions): Added assertions for instruction stepping. 
	Fixed to avoid race conditions.

2006-11-13  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStateModel.java: Added.

2006-11-12  Mike Cvet  <mcvet@redhat.com>

	* StateModel.java (StateModel): Added. Handles SourceWindow and HPD 
	stop/continue/stepping. Addresses #3510.
	(stepIn): Moved over from SourceWindow.
	(stepOver): Ditto.
	(lineMap): Ditto.
	(stepCompleted): Ditto.
	(run): Ditto.
	(runningTasks): Ditto. 
	(executeTasks): Ditto.
	(stepOut): Ditto.
	(stop): Ditto.
	(setUpStep): Ditto.
	(lineLoopCount): Ditto.
	(dwflMap): Ditto.
	(pbo): Ditto.
	(stepInstruction): Ditto.

2006-10-31  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (toPrint): Added. Returns a neat string representing this
	StackFrame suitable for displaying backtraces in the SourceWindow or other
	utilities.

2006-10-31  Tim Moore  <timoore@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Use ULong for
	address comparisons.

2006-10-26  Nurdin Premji  <npremji@redhat.com>

	* tests/TestStackBacktrace.java (testThreadedBacktrace): Changed to run the eventLoop, 
	not create a new one. Fixes bug causing tests after this to fail.
	(handleTask): Changed to stop eventLoop on completion. 

2006-10-26  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Fixed << broken >> number
	to correct bug.
	(frameAssertions): Added some regex to catch what appears to be new 
	clone function name in FC6.

2006-10-12  Andrew Cagney  <cagney@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace)
	(testThreadedBacktrace): Use frysk.junit.Paths.getExecPrefix.

2006-10-11  Stan Cox  <scox@redhat.com>

	* StackFrame.java (setReg): New.
	* cni/StackFrame.cxx (set_reg): New.

2006-10-05  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Added a brokenXXX
	call in regards to #3259.

2006-10-04  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (getTask): Refactored from getMyTask().
	(getDwflLine): Added.
	(StackFrame): Uses task instead of myTask.
	(getDOMFunction): Refactored from getFunction (confused with 
	getMethod).
	(setDOMFunction): Refactored from setFunction 

2006-10-02  Mike Cvet  <mcvet@redhat.com>

	* TestStackBacktrace.java (testBacktrace): Enabled test 
	for x86_64, updated brokenXXX call to PPC/64 #3277.
	(testThreadedBacktrace): Ditto.
	(frameAssertions): Changed expected system call names for 
	a couple x86_64 frames.

2006-09-28  Stan Cox  <scox@redhat.com>

	* StackFrame.java (getReg): New.
	* cni/StackFrame.cxx (get_reg): New.

2006-09-25  Alexandre Oliva  <aoliva@redhat.com>

	* StackCallbacks.java: Do not import lib.unwind.RegisterX86.
	(accessMem): Implement according to Isa-specified word size.
	(accessReg, writeReg, accessFpreg, writeFpreg): Do not use
	RegisterX86 directly.

2006-09-22  Mark Wielaard  <mark@klomp.org>

	(testThreadedBacktrace): Disabled. Bug #2936.

2006-09-21  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (StackTasksObserver): Added.
	(handleTask): Added - grabs stack information from incoming Tasks.
	(frameAssertions): Added, runs assertions on stack information
	from all three threads.
	(testThreadedBacktrace): Added, runs a multithreaded test program,
	collecting stack information from all threads and running assertions
	on it.

2006-09-20  Tom Tromey  <tromey@redhat.com>

	* StackFrame.java (toString): Pad address to task's word size.

2006-09-20  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Expanded test.

2006-09-20  Tom Tromey  <tromey@redhat.com>

	* StackFrame.java (toString): New method.
	(StackFrame): Don't initialize sourceFile if file is not known.
	(startOffset): Renamed.
	(getStartOffset): Likewise.
	(setFunction): Javadoc fixes.
	(getFunction): Likewise.
	(getData): Likewise.
	(getMethodName): Likewise.
	(getSourceFile): Likewise.
	(getLineNumber): Likewise.
	(getColumn): Likewise.
	(getAddress): Likewise.
	(getMyTask): Likewise.
	(getUnwindData): Likewise.
	(getInner): Likewise.
	(getOuter): Likewise.
	(getIsSignalFrame): Likewise.

2006-09-19  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (StackFrame): Added new constructor, taking an 
	inner StackFrame as an argument. Old constructor calls this one,
	with null. Added check to see if this StackFrame is the innermost
	or a signal frame. Added Javadoc.
	(setIsSignalFrame): Added.
	(getIsSignalFrame): Added.
	* StackFactory.java (createStackFrame): Calls new StackFrame 
	constructor (above). Initializes the current frame's inner frame
	through constructor call.

2006-09-18  Mike Cvet  <mcvet@redhat.com>

	* StackFrame.java (StackFrame): Added variables and initializations
	for start and end lines and offsets, as well as getters and setters.
	(setFunction): Added.
	(setData): Ditto.
	(getFunction): Ditto.
	(getData): Ditto.

2006-09-16  Alexandre Oliva  <aoliva@redhat.com>

	* StackCallbacks.java (findProcInfo, putUnwindInfo,
	getDynInfoListAddr, getProcName, populate_procinfo,
	populate_procinfo_nounwind, free_proc_info): Remove, obsolete.
	(getPid): New.
	* cni/StackCallbacks.cxx: Delete.

2006-09-15  Andrew Cagney  <cagney@redhat.com>

	* StackCallbacks.java: Use java.util.logging.Logger, instead of
	frysk.proc.Host.logger.  Pass "this" to logger, use {0} et.al.

2006-09-11  Mark Wielaard  <mark@klomp.org>

	* tests/TestStackBacktrace.java (testBacktrace): Disabled when
	MachineType is not IA32.

2006-09-08  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Commented out
	output since now the test runs and works.

2006-09-08	Alexandre Oliva  <aoliva@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Remove
	expected failure marker.

2006-08-17  Yao Qi  <qiyaoltc@cn.ibm.com>

	* StackCallbacks.java (getProcName): Check the null pointer.
	(getProcOffset): Ditto.

2006-08-14  Mike Cvet  <mcvet@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): TaskCreatedObserver
	now extends TaskObserverBase.

2006-08-07  Tim Moore  <timoore@redhat.com>

	* StackCallbacks.java (StackCallbacks): change Task.TaskException
	to TaskException.
	* StackFactory.java (createStackFrame): ditto.
	* tests/TestStackBacktrace.java (testBacktrace): ditto.

2006-07-28  Adam Jocksch  <ajocksch@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Now passes the signal
	to send as a parameter to funit-rt-looper.c.

	* tests/looper2.c: Made significant changes to prevent race conditions,
	moved to frysk.pkglibexecdir.
	* tests/TestStackBacktrace.java (testBacktrace): Changed exec path to
	reflect above move, test is still disabled.

2006-07-27  Adam Jocksch  <ajocksch@redhat.com>

	* StackCallbacks.java (findProcInfo): Added additional checks and 
	logging information upon failure.

	* tests/looper2.c (baz): Moved the call to kill inside the busy-wait to
	prevent a race condition.
	(main): Removed arg check since this is being run in a deterministic
	way.

2006-07-26  Adam Jocksch  <ajocksch@redhat.com>

	* tests/TestStackBacktrace.java (testBacktrace): Removed debugging output
	and re-disabled.

	* StackCallbacks.java (findProcInfo): Now creates a scratch elf object,
	temporary measure only.
	* StackFrame.java (getInner): Added.
	(getOuter): Added.
	* TestLib.java: Moved to tests.
	* TestStackBacktrace.java: Ditto.
	* tests: Added.
	* cni/TestLib.cxx: Moved to tests/cni.
	* tests/looper2.c: Added.

2006-07-25  Adam Jocksch  <ajocksch@redhat.com>

	* StackCallbacks.java (findProcInfo): Refactored to use
	DwflDieBias, now searched for .debug_frame elf section and
	passes that in to populate_procinfo.
	(getProcName): Refactored to use DwflDieBias.
	(getProcOffset): Ditto.
	(populate_procinfo): Now takes a ElfData object.
	* cni/StackCallbacks.cxx (populate_procinfo): Now copies out the
	contents of the provided ElfData and passes that to libunwind.

2006-07-24  Adam Jocksch  <ajocksch@redhat.com>

	* StackCallbacks.java (build_procinfo_nounwind): Added.
	(findProcInfo): Refactored to reflect interface change, also calls
	build_procinfo_nounwind.
	(getProcName): Now correctly returns either the procedure
	name or "".
	(getProcOffset): Now implemented.
	* StackFactory.java (createStackFrame): Refactored to reflect change
	in StackFrame constructor.
	* StackFrame.java (StackFrame): Now takes a Task object.
	(getMethodName): Added.
	(getSourceFile): Added.
	(getLineNumber): Added.
	(getColumn): Added.
	(getAddress): Added.
	(getMyTask): Added.
	(getUnwindData): Added.
	(initialize): Added.
	* TestLib.java: Added.
	* TestStackBacktrace.java (testBacktrace): Added printouts for stack
	information, test is still disabled.
	* cni/StackCallbacks.cxx (build_procinfo): Renamed to populate_procinfo.
	(populate_procinfo_nounwind): Added.
	(free_procinfo): No longer frees struct.
	* cni/TestLib.cxx: Added.
	* cni/StackFrame.cxx: Added.

2006-07-20  Tim Moore  <timmore@redhat.com>

	* StackCallbacks.java (StackCallbacks): Handle TaskException.
	* StackFactory.java (createStackFrame): Throw TaskException.
	* TestStackBacktrace.java (testBacktrace): ditto.

2006-07-17  Andrew Cagney  <cagney@redhat.com>

	* TestStackBacktrace.java: Pass bug number to brokenXXX call.

2005-07-17  Adam Jocksch  <ajocksch@redhat.com>

	* StackCallbacks.java (free_proc_info): Added.
	(putUnwindInfo): Now calls free_proc_info.
	* cni.StackCallbacks.cxx (free_proc_info): Added.

	* TestStackBacktrace.java (testBacktrace): Re-commented Maps test.

	* StackCallbacks.java (getProcName): Implemented.

2005-07-14  Adam Jocksch  <ajocksch@redhat.com>

	* StackCallbacks.java (findProcInfo): Now returns incomplete 
	proc_info struct.
	(accessMem): Reorganized comments to make more sense.
	* TestStackBacktrace.java (testBacktrace): Added commented out
	code for MapsBuilder testing, for debugging purposes.

	* StackCallbacks.java (findProcInfo): Started gathering necessary
	information to buidl the struct.
	(build_procinfo): Added.
	* cni/StackCallbacks.java (build_procinfo): Added, takes the data
	gathered and creates the proc_info struct.

2005-07-14  Mark Wielaard  <mark@klomp.org>

	* TestStackBacktrace.java: Removed unused Level and Host imports.

2005-07-13  Adam Jocksch  <ajocksch@redhat.com>

	* StackCallbacks.java: Improved logging information and reformatted
	to GNU formatting.
	* TestStackBacktrace.java (testBacktrace): Added commented out logging
	level.

	* StackCallbacks.java: Added preamble.
	(findProcInfo): Added logging.
	(getDynInfoListAddr): Ditto.
	(accessMem): Ditto.
	(writeMem): Ditto.
	(accessReg): Ditto, now fetches register contents.
	(accessFpReg): Ditto.
	(writeReg): Added logging.
	(accessFpReg): Ditto.
	(getProcName): Ditto.
	(getProcOffset): Ditto.
	* StackFactory.java: Added preamble.
	* StackFrame.java: Ditto.
	* TestStackBacktrace.java: Ditto.
	* cni/StackBacktrace.cxx: Ditto.
	
2005-07-12  Adam Jocksch  <ajocksch@redhat.com>

	* TestStackBacktrace.java (testBacktrace): Now uses brokenXXX.

	* StackCallbacks.java: Added.
	* StackFactory.java: Added.
	* StackFrame.java: Added.
	* TestStackBacktrace.java: Added.
	* cni/StackCallbacks.cxx: Added.
