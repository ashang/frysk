// -*- Java -*-

// This file is part of the program FRYSK.
//
// Copyright 2005, 2006, Red Hat Inc.
//
// FRYSK is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// FRYSK is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with FRYSK; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
// 
// In addition, as a special exception, Red Hat, Inc. gives You the
// additional right to link the code of FRYSK with code not covered
// under the GNU General Public License ("Non-GPL Code") and to
// distribute linked combinations including the two, subject to the
// limitations in this paragraph. Non-GPL Code permitted under this
// exception must only link to the code of FRYSK through those well
// defined interfaces identified in the file named EXCEPTION found in
// the source code files (the "Approved Interfaces"). The files of
// Non-GPL Code may instantiate templates or use macros or inline
// functions from the Approved Interfaces without causing the
// resulting work to be covered by the GNU General Public
// License. Only Red Hat, Inc. may make changes or additions to the
// list of Approved Interfaces. You must obey the GNU General Public
// License in all respects for all of the FRYSK code and other code
// used in conjunction with FRYSK except the Non-GPL Code covered by
// this exception. If you modify this file, you may extend this
// exception to your version of the file, but you are not obligated to
// do so. If you do not wish to provide this exception without
// modification, you must delete this exception statement from your
// version and license this file solely under the GPL without
// exception.

package frysk.gui;

import java.io.File;

import gnu.classpath.tools.getopt.FileArgumentCallback;
import gnu.classpath.tools.getopt.Option;
import gnu.classpath.tools.getopt.OptionException;
import gnu.classpath.tools.getopt.Parser;

/**
 * Wrapper class for Gui.java. This is an entry point
 * for the Frysk UI 
 */
public class FryskGui
{

    private static boolean cont = true;
    private static int pid;
    private static String argString;
    private static int flag = 0;
    private static String exeString;

    public static void main (String[] args)
    {
    
	Parser parser = new Parser("frysk", "1..23", true);
	parser.setHeader("usage: frysk [options]");

	addOptions(parser);

	parser.parse(args, new FileArgumentCallback()
	    {
		public void notifyFile (String arg) throws OptionException
		{
		}
	    });
    
	final String BASE_PATH = "frysk/gui/";
	final String GLADE_PKG_PATH = "glade/";
	final String SRCDIR = "@srcdir@";
	final String ABS_SRCDIR = "@abs_srcdir@";
	
	if (cont == true)
	    {
		Gui.gui (args, new String[] {
			     GLADE_PKG_PATH,
			     BASE_PATH + GLADE_PKG_PATH,
			     // Check both relative ...
			     SRCDIR + "/" + BASE_PATH + GLADE_PKG_PATH,
			     // ... and absolute.
			     ABS_SRCDIR + "/" + BASE_PATH + GLADE_PKG_PATH,
			 },
			 new String[] {
			     ABS_SRCDIR + "/" + BASE_PATH + "images/"
			 }, 
			 new String[] {
			     "./common",
			     SRCDIR + "/" + BASE_PATH + "common/",
			     ABS_SRCDIR + "/" + BASE_PATH + "common/"
			 },
			 new String[] {
			     "./srcwin/testfiles",
			     SRCDIR + "/" + BASE_PATH + "srcwin/testfiles",
			     ABS_SRCDIR + "/" + BASE_PATH + "srcwin/testfiles"
			 });
	    }
	else
	    {

		if (flag == 1)
		    {
			Gui.gui (args, new String[] {
				     GLADE_PKG_PATH,
				     BASE_PATH + GLADE_PKG_PATH,
				     // Check both relative ...
				     SRCDIR + "/" + BASE_PATH + GLADE_PKG_PATH,
				     // ... and absolute.
				     ABS_SRCDIR + "/" + BASE_PATH + GLADE_PKG_PATH,
				 },
				 new String[] {
				     ABS_SRCDIR + "/" + BASE_PATH + "images/"
				 }, 
				 new String[] {
				     "./common",
				     SRCDIR + "/" + BASE_PATH + "common/",
				     ABS_SRCDIR + "/" + BASE_PATH + "common/"
				 },
				 new String[] {
				     "./srcwin/testfiles",
				     SRCDIR + "/" + BASE_PATH + "srcwin/testfiles",
				     ABS_SRCDIR + "/" + BASE_PATH + "srcwin/testfiles"
				 }, true, pid, "");
		    }
		    else if (flag == 2)
		    {
		    	Gui.gui (args, new String[] {
				     GLADE_PKG_PATH,
				     BASE_PATH + GLADE_PKG_PATH,
				     // Check both relative ...
				     SRCDIR + "/" + BASE_PATH + GLADE_PKG_PATH,
				     // ... and absolute.
				     ABS_SRCDIR + "/" + BASE_PATH + GLADE_PKG_PATH,
				 },
				 new String[] {
				     ABS_SRCDIR + "/" + BASE_PATH + "images/"
				 }, 
				 new String[] {
				     "./common",
				     SRCDIR + "/" + BASE_PATH + "common/",
				     ABS_SRCDIR + "/" + BASE_PATH + "common/"
				 },
				 new String[] {
				     "./srcwin/testfiles",
				     SRCDIR + "/" + BASE_PATH + "srcwin/testfiles",
				     ABS_SRCDIR + "/" + BASE_PATH + "srcwin/testfiles"
				 }, true, 0, exeString);
		    }
	    }
    }
		 
		 
    
    private static void addOptions (Parser parser)
    {
	parser.add(new Option("new", 'n', "debug new exec", "EXECUTABLE")
	    {
		    public void parsed (String arg) throws OptionException
			{
			    cont = false;
			    File file = null;
			    try 
				{
				    file = new File(arg);
				    if (!file.exists())
					{
					    System.out.println("Cannot find executable!");
					    System.exit(1);
					}
				    else
					exeString = arg;
				}
			    catch (Exception e)
			{
			    OptionException oe = new OptionException("couldn't parse executable: " + argString);
			    oe.initCause(e);
			    throw oe;
			}
			flag = 2;
		}
	    });
    
	parser.add(new Option("pid", 'p', "debug running pid", "EXECUTABLE")
	    {
		public void parsed (String arg) throws OptionException
		{
		    cont = false;
		    try 
			{
			    pid = Integer.parseInt(arg);
			}
		    catch (NumberFormatException nfe)
			{
			    OptionException oe = new OptionException("couldn't parse pid: " + argString);
			    oe.initCause(nfe);
			    throw oe;
			}
		    flag = 1;
		}
	    });
    }
}

