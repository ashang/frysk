2007-08-02  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Fixed Nullpointer and
	ensured assembly isn't shown if source is available. Fixes #4885.

2007-08-01  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (getVariable): Fixed assumption that variable returned
	from DebugInfo will never be null. Fixes #4871.
	
	* SourceWindow.java (updateShownStackFrame): Rely on function TextMarks for
	SourceBuffer scrolling, rather than line numbers. Fixes #4876.
	(populateStackBrowser): Ditto.

2007-07-31  Sami Wagiaalla  <swagiaal@redhat.com>

	* SourceWindowFactory.java: Replaced Frame with DebugInfoFrame.
	* SourceWindow.java: Ditto.
	* SourceBuffer.java: Ditto.
	* MixedView.java: Ditto.
	* View.java: Ditto.
	* InlineSourceView.java: Ditto.
	* SourceView.java: Ditto.
	* InlineBuffer.java: Ditto.
	* CurrentStackView.java: Ditto.

2007-07-27  Sami Wagiaalla  <swagiaal@redhat.com>

	* CurrentStackView.java (refreshProc): Passes a printSourceLibrary
	boolean to Frame.toPrint().

2007-07-27  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java: Updated to reference SteppingEngine move to 
	frysk.stepping.

2007-07-23  Rick Moseley  <rmoseley@redhat.com>

	* SourceBuffer.java: Do not add tags if parser had an error.

2007-07-23  Sami Wagiaalla  <swagiaal@redhat.com>

	* CurrentStackView.java: replaced use of String for printing
	stack traces with PrintWriter.

2007-07-20  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Show the source code even if the parser
	cannot handle it properly(bz #4818).
	* SourceWIndow.java: Forgot one change when merging changes.

2007-07-19  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java: Reformatted.
	(refreshVars): Removed.
	* SourceView.java: Reformatted.
	(refreshVars): Removed.
	* SourceWindow.java (addVariableTrace): Now creates a display
	object and then passes that to the watch list.
	(removeVariableTrace): Now converts the value into a display.
	(removeDisplay): Added.
	(populateStackBrowser): Removed code for updating variable watches.
	* VariableWatchView.java (WatchViewListener): Now passes a 
	display instead of a value.
	(handleClick): Now casts to a display.
	(variableWatchAdded): New function, adds a display to the watched
	list.
	(variableWatchChanged): Now only takes the display that was updated and
	updates it in place.
	(variableWatchDeleted): New function, takes the display to remove
	from the list.
	(selectionChangedEvent): Now casts to display.

2007-07-18  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Add thread ID(TID) to the source view title.

2007-07-16  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (updateShownStackFrame): If the function in question
	cannot be found but has a DOMSource, just display the disassembled function.

2007-07-10  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Renamed activateTerminal to activateProc;
	fix bug with killing file chooser window; activate a new 
	source window when attaching to running process.

2007-07-04  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java(updateSourceLabel): Fix bug where stackframe
	was being accessed even though it was null.

2007-07-04  Andrew Cagney  <cagney@redhat.com>

	* SourceBuffer.java: Do not catch OpcodesException; use List
	instead of LinkedList.

2007-07-03  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java: Do not catch lib.dw.NoDebugInfoException.

2007-06-29  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (updateShownStackFrame): Fixed a source
	label bug.
	(updateSourceLabel): Ditto.

2007-06-28  Sami Wagiaalla  <swagiaal@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Added a null check
	for this.dom; work-around for NPE when creating a SW from a Frame.

2007-06-27  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (SourceWindow): Enabled actions for
	disassembly and memory windows, for core files.

2007-06-25  Nurdin Premji  <npremji@redhat.com>

	* SourceWindow.java (getCurrentDebugProcess): Added logging message.
	(finishSourceWindow): Don't add a variable watch if no DebugProcess exists
	for this SourceWindow.

2007-06-22  Nurdin Premji  <npremji@redhat.com>

	* SourceWindow.java (SourceWindow): Added constructor with Frame[].
	(examineCoreFile): Implemented.
	(createMenus): Added core file menu.
	(createActions): Linked core file menu.
	Don't try to detach from a core file.
	* SourceWindowFactory.java (createSourceWindow): Added.
	(attachToCore): Added.

2007-06-20  Kris Van Hees  <kris.van.hees@oracle.com>

	* SourceWindow.java(toggleMemoryWindow, toggleDisassemblyWindow): Do
	not display the dialog for x86_64, and changed the message to simply
	state that the window is not supported on the current architecture for
	ISAs where that is still the case.

2007-06-19  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (LockObserver.update): Removed call to
	SteppingEngine.notifyStopped. Updated to expect TaskStepEngine parameter
	rather than null or Task objects.

2007-06-18  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Add ability to attach to running processes.

2007-06-11  Nurdin Premji  <npremji@redhat.com>

	* MixedView.java: Reflect frysk.stack package movement.
	* CurrentStackView.java: Ditto.
	* SourceWindowFactory.java: Ditto.
	* SourceBuffer.java: Ditto.
	* SourceWindow.java: Ditto.
	* InlineSourceView.java: Ditto.	
	* InlineBuffer.java: Ditto.

2007-06-09  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (setScope): Calls new DebugInfo.refresh(Frame).
	* SourceWindowFactory.java: General fixups for new dynamic
	SteppingEngine class.
	* SourceWindow.java (steppingEngine): New field.
	(SourceWindow): Deal with SteppingEngine member variable instead of
	static class.
	(finishSourceWin): Ditto.
	(populateStackBrowser): Ditto.
	(removeProc): Ditto.
	(createActions): Ditto.
	(updateShownStackFrame): Ditto.
	(generateProcStackTrace): Ditto.
	(LockObserver.update): Ditto.
	(getSteppingEngine): Added.
	(toggleRegisterWindow): Create RegisterWindow with steppingEngine
	member variable as parameter.
	(toggleMemoryWindow): Ditto.
	(toggleDisassemblyWindow): Ditto.
	* SourceView.java (clickedOnMargin): Temporarily disabled breakpoints
	from margin clicks.

2007-06-07  Stan Cox  <scox@redhat.com>

	* SourceBuffer.java (debugInfo): New.
	(setScope): Use it.

2007-06-04  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (.actionEvent): Open SessionManager upon 
	window close. Fixes #4561.

2007-06-01  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Reorganize a bit; make terminal window persistent
	to keep it from being GC'ed; fixed bz #4850.

2007-05-30  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (PopulateStackBrowser): Re-enabled variable watch
	refreshing.

2007-05-22  Andrew Cagney  <cagney@redhat.com>

	* SourceWindowFactory.java: Delete call to
	frysk.proc.Host.requestRefreshXXX.

2007-05-16  Tim Moore  <timoore@redhat.com>

	* SourceView.java (clickedOnMargin): Changed to use new breakpoint 
	interface.

2007-05-14  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doStackUp): Rewritten. Fixes #4503.
	(doStackDown): Ditto.
	(doStackTop): Ditto.
	
	* SourceWindow.java (populateStackBrowser): Use FrameIdentifier to identify
	new Frame representations.
	(fi): Added.
	(SourceWindowListener.currentStackChanged): Update SourceWindow 
	FrameIdentifier object.

2007-05-11  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Added activateTerminal; added changes to
	accomodate the changing of the glade file to remove the
	environment variable field and add term_activate field;
	add a "Processes" pulldown; move "Run executable" there.

2007-05-10  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (tid): Added.
	(setScope): Load new source if stack trace TIDs do not match.
	* CurrentStackView.java (refreshProc): Make sure to update the Task
	used by each stack trace.

	* SourceBuffer.java (setLineBroken): Added.
	(isLineExecutable): Temporarily disabled line executability check.
	(drawMargin): Updated margin draw offset to 25.
	(breakLine): Added.
	(clickedOnMargin): Enabled right-click breakpoints menu. Checks for
	added breakpoints on the given line, sets or removes breakpoints
	as necessary. Addresses #4473.

2007-05-09  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Added terminal window code; added prep
	work for console window.
	* SourceWindowFactory.java: Added the passing of STDIN,
	STDOUT and STDERR for task activation.

2007-05-09  Sami Wagiaalla  <swagiaal@redhat.com>

	* tags/TagsetManager.java: Uses files instead of String paths.

2007-05-04  Nurdin Premji  <npremji@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Updated for 
	frysk.rt.StackFactory.createFrame name change.

	* MixedView.java (load): Abstract StackFrame to Frame.
	(MixedView): Ditto.
	(getScope): Ditto.
	* InlineBuffer.java (InlineBuffer): Ditto.
	* SourceWindow.java (appendProc): Ditto.
	(SourceWindow): Ditto.
	(generateProcStackTrace): Ditto.
	(updateShownStackFrame): Ditto.
	(removeProc): Ditto.
	(updateSourceLabel): Ditto.
	(populateStackBrowser): Ditto.
	(SourceWindowListener.currentStackChanged): Ditto.
	* CurrentStackView.java (addProc): Ditto.
	(appendRows): Ditto.
	(getFirstFrameSelection): Ditto.
	(getCurrentFrame): Ditto.
	(CurrentStackView): Ditto.
	(StackViewListener): Ditto.
	(selectRow): Ditto.
	(notifyObservers): Ditto.
	(buildTree): Ditto.
	(selectionChangedEvent): Ditto.
	(refreshProc): Ditto.
	* SourceWindowFactory.java (createSourceWindow): Ditto.
	* SourceBuffer.java (loadUnmarkedText): Ditto.
	(loadFile): Ditto.
	(SourceBuffer): Ditto.
	(setScope): Ditto.
	(disassembleFrame): Ditto.
	(highlightLine): Ditto.
	(getScope): Ditto.
	* InlineSourceView.java (InlineSourceView): Ditto.
	(mousedOverText): Ditto.
	(load): Ditto.
	(SourceView): Ditto.
	(getScope): Ditto.

2007-05-03  Sami Wagiaalla  <swagiaal@redhat.com>

	* tags/TagsetManager.java: Changed constructor to take a string 
	argument representing save directory.
	Replaced use of String paths with File objects.

2007-05-03  Adam Jocksch <ajocksch@redhat.com>

	* SourceWindow.java (finishSourceWin): Attaches the VariableWatchView as
	a listener to the WatchList.
	(addVariableTrace): Now uses the WatchList contained in the session.
	(removeVariableTrace): Ditto.
	(hide): Removed.
	(hideAll): Removed.
	(cleanup): Removed.
	(saveDebugInfo): Removed.
	(loadDebugInfo): Removed.
	(createDebugInfoPath): Removed.
	(getCurrentDebugProcess): Added.
	* VariableWatchView.java: No longer implements SaveableXXX, implements
	WatchViewListener.
	(addTrace): Removed.
	(removeTrace): Removed.
	(refreshList): Removed, this will have to be handled by the source window.
	(variableWatchChanged): Added.
	(VariableWatchListener): Renamed to VariableWatchViewListener.
	
2007-05-03  Stan Cox  <scox@redhat.com>

	* InlineSourceView.java: Remove InvalidOperatorException.

2007-05-02  Andrew Cagney  <cagney@redhat.com>

	* Revert 2007-05-01 Nurdin Premji <npremji@redhat.com> change.

2007-05-01  Nurdin Premji  <npremji@redhat.com>

	* MixedView.java (load): Switch from StackFrame to Frame.
	(MixedView): Ditto.
	(getScope): Ditto.
	* InlineBuffer.java (InlineBuffer): Ditto.
	* SourceWindow.java (appendProc): Ditto.
	(SourceWindow): Ditto.
	(generateProcStackTrace): Ditto.
	(removeProc): Ditto.
	(updateShownFrame): Ditto.
	(updateSourceLabel): Ditto.
	(populateStackBrowser): Ditto.
	(SourceWindowListener.currentStackChanged): Ditto.
	* CurrentStackView.java (addProc): Ditto.
	(appendRows): Ditto.
	(getFirstFrameSelection): Ditto.
	(getCurrentFrame): Ditto.
	(CurrentStackView): Ditto.
	(StackViewListener): Ditto.
	(selectRow): Ditto.
	(notifyObservers): Ditto.
	(buildTree): Ditto.
	(selectionChangedEvent): Ditto.
	(refreshProc): Ditto.
	* SourceWindowFactory.java (createSourceWindow): Ditto.
	* SourceBuffer.java (loadUnmarkedText): Ditto.
	(loadFile): Ditto.
	(SourceBuffer): Ditto.
	(setScope): Ditto.
	(disassembleFrame): Ditto.
	(highlightLine): Ditto.
	(getScope): Ditto.
	* InlineSourceView.java (InlineSourceView): Ditto.
	(mousedOverText): Ditto.
	(load): Ditto.
	(SourceView): Ditto.
	(getScope): Ditto.

2007-05-01  Adam Jocksch  <ajocksch@redhat.com>

	* SourceView.java (findVariable): Added, stub at the moment.
	* SourceWindow.java (finishSourceWin): Now calls loadDebugInfo().
	(loadDebugInfo): Added.
	(createDebugInfoPath): Now also checks for the existence of the file.
	* VariableWatchView.java (VAR_WATCHES): Extracted out constant.
	* WatchList.java: New file.
	* VariableWatchListener.java: New file.

2007-04-30  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (getVariable): Now saves file and line number info
	into the variable.
	* SourceWindow.java (saveDebugInfo): Added code to output the document.
	(createDebugInfoPath): Added, refactored out of saveDebugInfo.
	* VariableWatchView: Now implements SaveableXXX.
	(shouldSave): Added.
	(saveVariable): Added, called from save().

2007-04-30  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java (buildTree): Fixed currentFrame selection bug.

2007-04-27  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (hide): Added, used as a hook for cleanUp.
	(hideAll): Ditto.
	(cleanUp): Added, all housekeeping tasks that should be done before
	the window closes should be added here.
	(saveDebugInfo): Added, will save the debugging information such as variable
	traces, breakpoints, etc. to disk when the source window closes.

2007-04-27  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (currentStackChanged): Check the State of the new
	StackFrame's Task before updating any of the other windows.

2007-04-26  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (menuEvent): Temporarily disabled 'kill-process'
	menu item.

2007-04-25  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (StackMouseListener): Added. Listens for certain
	mouse clicks on the stack view.
	(StackViewListener.currentStackChanged): Added logic to assign
	currentTask field if it was unset previously.
	(menuEvent): Added. Callback for MouseEvents. Fixes #4421.
	(appendProc): Set new Proc array before StackFrame array.
	(detachProc): Detaches Procs from Frysk, cleans up the window if
	no more processes are being observed.

	* SourceWindow.java (removeProc): Now takes a boolean parameter.
	(menuEvent): Append PIDs to the shown menu. Calls detachProc() with
	a boolean, determining whether or not the Proc is killed after detach.
	Added another menu option for allowing Proc to be killed. Fixes #4421.
	(detachProc): Now takes a boolean parameter.
	
	* SourceWindow.java: Substantially commented, slightly reorganized
	and cleaned up.
	* SourceWindowFactory.java (lifeCycleQuery): Don't try and remove
	observers from null SourceWindow processes.

2007-04-24  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Claen up some fo the code for the
	change below.

2007-04-24  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Add info to the sourceLabel widget to
	identify specifically what is showing in the source frame.

2007-04-23  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java (refreshProc): Append rows for threads beneath
	the correct row for the process. Explicitly set Task information for
	Task row each time. Iterate through each Task row to remove unneded
	rows after a stack change.

	* SourceWindow.java (ThreadLifeObserver): Cleaned up.

2007-04-20  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Change gladepath to frysk_debug.glade;
	update the source widget frame title instead of the window
	title when changing frames/processes; added new method 
	updateSourceLabel to accomplish this.

2007-04-19  Mike Cvet  <mcvet@redhat.com>

	* SourceView.java (SourceViewListener.mouseMotionEvent): Call 
	SourceWindow.isRunning().
	* SourceWindowFactory.java: General SteppingEngine fixups.
	* SourceWindow.java: Ditto.

2007-04-18  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindowFactory.java: Intermediate checkin for bz #4193
	so Mike can merger his runtime changes in; changes to make
	stack frames appear proper for added processes.
	* SourceWindow.java: Ditto.

2007-04-16  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindowFactory.java: Fix bz #4358(for real this time).

2007-04-13  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindowFactory.java: Trim spaces from proc activation.
	* SourceWindow.java: Fix bz #4358.

2007-04-13  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (startNewProc): If the path to the requested
	executable doesn't actually exist, do nothing.

2007-04-13  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: More work on bz #4193.
	* SourceWindowFactory.java: Ditto.

2007-04-12  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Highlight lines only for current
	process.
	
	* CurrentStackView.java (refreshProc): Remove rows by deleting temporary
	TreeIter instead of iteration variable.
	
2007-04-10  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (ThreadLifeObserver): Added. Receives thread
	creation or destruction notifications from
	RunState.ThreadLifeObservable. 
	(removeProc): Added. Cleans up SourceWindow data structures after
	a Proc has exited.
	* CurrentStackView.java (refreshProc): Added code to append new Task
	rows if necessary.
	(removeProc): Added. Removes a process from the TreeView.
	* SourceBuffer.java (clear): Added. Clears data from SourceBuffer.

2007-04-09  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: More work on bz #4193, added getting of the
	env variables and commmandline options from the chooser window.

2007-04-08  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (SourceWindow): Update call to
	RunState.setRunning().
	(finishSourceWin): Update switch call to RunState.getState() to
	getTaskState() and isProcRunning().
	(populateStackBrowser): Ditto.
	(procReblocked): Removed calls to RunState.runCompleted() and 
	stepCompleted().
	(getState): Added. Returns state of currently-selected Task.
	(updateShownStackFrame): Checks current sensitivity of SourceWindow
	versus state of requested Task; enables functionality if it won't break
	anything. Sets title for SourceWindow if switching to a running process
	and desensitizes as necessary.
	(generateProcStackTrace): Changed RunState.getState() to
	isProcRunning().
	* SourceView.java (mouseMotionEvent): Changed RunState.getState() to
	SourceWindow.getState().

2007-04-05  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (SourceWinListener.lifeCycleQuery): Hide current
	SourceWindow before destroying reference to it. Fixes #4321.

2007-04-04  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (appendProc): Add the new Proc to the stack view, 
	resensitize widgets after completion. Addresses #4312.
	(finishSourceWin): Set current SymTab object before showing window.
	(SourceWindow): Fixed array initialization bug.
	(updateShownStackFrame): Update SourceWindow titlebar for currently selected
	process.
	* CurrentStackView.java (appendRows): Added. Does row appening work for 
	tree editing methods.
	(addProc): Added. Will append a Proc and its rows to the stack view. 
	Addresses #4312.
	(buildTree): Cleaned up; removed unnecessary code from inside inner loop,
	now calls appendRows() for most of tree work.
	(refreshProc): Also cleaned up; moved code outside of loop.

2007-04-03  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java(createActions): More work on bz 4193; added option
	for opening core file in addition to running executables.

2007-04-03  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (updateShownStackFrame): Set the SymTab to the
	currently-selected process after new process is selected from the stack
	view.
	(generateProcStackTrace): Cleaned up.
		
	* SourceWindowFactory.java (map): Removed.
	(stateMap): Removed.
	(runState): Added.
	(createSourceWindow): References the static SourceWindow only. Recreate
	the SourceWindow from scratch upon successive calls. Assign static
	RunState from constructed SourceWindow object.
	(unblockProc): Removed.
	(lifeCycleQuery): Removed references to HashMaps. Nullifies
	SourceWindow upon deletion event.
	(startNewProc): Now takes a File parameter.
	(AttachedObserver.updateAttached): Appends given Proc to current 
	SourceWindow, if not null. Addresses #4312.

	* SourceWindow.java (symTab): Now an array.
	(SourceWindow): Allocate the SymTab array to a length the same as the
	number of observed Processes by the SourceWindow.
	(finishSourceWindow): Send index into generateProcStackTrace().
	(updateShownStackFrame): Re-initialize current SymTab for given 
	process before refreshing its StackFrames. Fixes #4308.
	(generateProcStackTrace): Takes an int parameter. Initialize SymTab
	array index specified by parameter.
	(LockObserver.update): Send global process index int into
	generateProcStackTrace().
	(addProc): Added.
	(appendProc): Added.
	(SW_add): Added.

2007-03-30  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (dom): Now an array. Addresses #4214.
	(swProc): Ditto.
	(frames): Now a two-dimensional array. Proc x Task.
	(current): Added. Process array index integer.
	(numProcs): Added. Number of processes currently maintained by
	the SourceWindow.
	(SourceWindow): New constructor. Takes an array of Procs.
	(SourceWindow): Other two constructors - edit to properly use
	new global arrays for DOM, Procs, and StackFrames.
	(finishSourceWin): Fill up entire StackFrame 2D array. Removed RunState
	state check before calling populateStackBrowser.
	(populatStackBrowser): Now takes 2D array. Takes into account new
	arrays for #4214. Call updateShownStackFrame() with current process
	index.
	(setSwProc): Removed.
	(updateShownStackFrame): Takes new int parameter - new process index.
	If DOMSource can't be resolved from the StackFrame Lines, add it into 
	the DOM and re-try. Set the global process index.
	(removeTags): Only untag current process.
	(createTags): Only tag current process.
	(doStop): Use Proc array; send in Task list to RunState.
	(doContinue): Use Proc array.
	(toggleRegisterWindow): Ditto.
	(toggleMemoryWindow): Ditto.
	(toggleDisassemblyWindow): Ditto.
	(getProcIsa): Ditto.
	(generateProcStackTrace): Now only takes a Task LinkedList parameter.
	More intelligently setup variables for stack tracing. Set up DOM for
	current process only.
	(currentStackChanged): Takes process index integer parameter. Calls 
	updated updateShownStackFrame().
	(LockObserver.update): Flipped if statement; handle process array.
	* CurrentStackView.java (StackViewListener): Set currentStackChanged
	to accept int parameter.
	(stackArray): Added.
	(CurrentStackView): Takes 2D array.
	(refreshProc): Added. Instead of dumping the TreeModel; selectively 
	replaces rows corresponding to Proc index parameter. Adjusts model
	length as necessary.
	(buildTree): Rewritten. Now three levels of rows; Proc, Task, StackFrame.
	(selectRow): Updated to grab appropriate StackFrame row.
	(selectionChangedEvent): Updated to use new model. Ignores request if 
	request was not a StackFrame row.
	* SourceView.java (drawMargin): Make sure SourceBuffer.isLineBroken()
	and .isLineExecutable are temporarily disabled.
	* SourceWindowFactory.java (createSourceWindow): Removed redundant
	HashMap access.
	(createSourceWindow): Added - Takes a Proc array. Creates a SourceWindow
	with multiple processes; keeps track of all processes to the SourceWindow
	in the HashMap.
	(SourceWinListener.lifeCycleQuery): Update call to RunState.removeObserver
	to include Proc.
	* StepDialog.java (model): Added.
	(setType): Now will update listed Tasks if the observed process has
	changed since last call.
	* ThreadSelectionDialog.java (stopTasks): Added. List of Tasks to be
	blocked.
	(grabTasks): Update stopTasks.
	(getStopTasks): Added.

2007-03-29  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Added code for bz #4193 to add the ability to
	select an executable and open a source window for it.

2007-03-28  Sami Wagiaalla  <swagiaal@redhat.com>

	* SourceWindowFactory.java: Refactored name of sessionManager to
	sessionManagerDialog.

2007-03-26  Mike Cvet  <mcvet@redhat.com>

	* View.java (load): Now takes an int parameter, setting the mode of
	the view.
	* SourceWindow.java (viewPicker): Added. Combobox variable to select
	source, assembly, or combination display in the Source Window. Fixes
	#1711, #4278.
	(finishSourceWin): Initialize above variable; set default selection.
	(populateStackBrowser): Check for MixedView and SourceView instead of
	assuming SourceView default.
	(getStackView): Added.
	(desensitize): Added entry for viewPicker.
	(resensitize): Ditto.
	(attachEvents): Set viewPicker to sensitive.
	(switchToSourceMode): Set line numbers to true in the SourceView; scroll
	to the appropriate function upon call. Create highlighting tags in the
	SourceBuffer.
	(switchToAsmMode): Remove highlighting tags from the SourceBuffer.
	Remove line numbers.
	(switchToSourceAsmMode): Do nothing if the current frame has no 
	debuginfo.
	(updateShownStackFrame): Handle appropriate mode switching between
	source and assembly views. Notify the SourceBuffer which mode to use.
	Differentiate between SourceView and MixedView. Fixes #1711, #4278.
	(removeTags): Differentiate between SourceView and MixedView.
	(createTags): Ditto.
	* SourceView.java (setLineNums): Added. Determines whether or not line
	numbers should be displayed.
	(load): Takes an int parameter for mode.
	* SourceBuffer.java (setScope): Changed to protected. Set global mode
	value at the end of the method. Only highlights text if in source mode.
	(disassembleFrame): Changed output to use frame name.
	(loadAssembly): Removed dummy code. Calls disassembleFrame(), and
	removes text highlighting.
	* MixedView.java: Applied GNU formatting.
	(MixedView): Set line numbers to false for assembly view. Set the 
	position of the horizontal split to half the available view real
	estate.
	(load): Explicitly set subwindow modes to either source or assembly.
	(getSourceWidget): Added.
	(getAssemblyWidget): Added.

2007-03-23  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (loadFile): Check to see if the source code has
	already been cached by the DOMSource in use. Addresses #4223.

2007-03-22  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Only set frames for SymTab
	if the RunState is not running. Addresses #4222.
	
	* SourceWindow.java (SourceWindow): Don't call populateStackBrowser() 
	explicitly; instead set global StackFrame array.
	(finishSourceWin): If the RunState is not stopped, use the global StackFrame
	array as a parameter to populateStackTrace().
	(populateStackBrowser): Set temporary StackFrame to first element of
	array parameter if the StackView returns no selected frame. Fixes #4222.

2007-03-16  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (SourceWindow): Added.  Builds a SourceWindow,
	disabling all operations on the source, based on a set of StackFrames.
	Fixes #4205.
	(populateStackBrowser): Disassemble only when the process is blocked.
	(finishSourceWin): Removed redundant Proc parameter.
	* SourceWindowFactory.java (createSourceWindow): Added. Builds a 
	SourceWindow using a StackFrame stack trace. Fixes #4205.

	* SourceWindow.java (SourceWindow): Removed initialization of SymTab
	variable.
	(SourceWindow): Now initializes the DOM and calls populateStackBrowser
	from here instead of finishSourceWin().
	(finishSourceWin): Generate a stack trace only when the process is
	blocked, same for populating the stack browser window.
	(generateProcStackTrace): Initialize SymTab variable here. Fixes #4207.
	
	* SourceWindow.java (procReblocked): Update displayed assembly after a step if there is no
	debug information for the currently-selected frame.

2007-03-15  Stan Cox  <scox@redhat.com>

	* InlineBuffer.java (stab): Moved to member of class.
	* SourceWindow.java (symTab): New.

2007-03-12  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Removed print statement.
	* SourceBuffer.java (highlightLine): Check for a potentially numm
	DOMSource.

2007-03-09  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doStep): Call new Task-only line stepping
	method in RunState.
	(doAdvance): Added.

2007-03-08  Mike Cvet  <mcvet@redhat.com>

	* VariableWatchView.java (removeTrace): Fixed #4170.
	* SourceWindow.java (generateProcStackTrace): Deleted commented-out
	dead code. Makes a call to SymTab.setFrames after StackFrame
	completion.
	* SourceBuffer.java (getVariable): Removed SymTab initialization
	code, and instead this now calls SymTab.print() directly, as the
	information was updated after the last step.

2007-03-07  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Make sure to populate 
	assembly on window creation, fixing #4167.

2007-03-05  Adam Jocksch <ajocksch@redhat.com>

	* SourceWindow.java (updateShownStackFrame): Now checks to see if the
 	runState is stopped before disassembling a frame.

2007-03-05  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (highlightLine): Fixed up loop and debuginfo checks.

2007-03-02  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java: Fixups for the move of DOM information from 
	StackFrame to its Line array. Fixes #4118.
	* SourceView.java: Ditto.
	* SourceBuffer.java: Ditto.
	* CurrentStackView.java: Ditto.
	* InlineBuffer.java: Ditto.

2007-02-27  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (highlightLine): Make sure that the StackFrame has 
	available lines before grabbing them. Fixes #4106.
	* SourceWindow.java (generateProcStackTrace): Ditto.
	
	* SourceBuffer.java (createTags): Return if the scope has no DOMSource.

2007-02-27  Andrew Cagney  <cagney@redhat.com>

	* SourceBuffer.java: Replace StackFrame .getSourceFile with Line
	.getFile.

	* SourceBuffer.java: Use StackFrame .getLines, simplify search for
	line information.

2007-02-26  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java: Use StackFrame .getLines.

	* SourceBuffer.java: Replace Frame .getStartLine and Frame
	.getEndLine. with Frame .getLines .getLine.
	* InlineBuffer.java (setCurrentLine): Delete.

	* SourceBuffer.java: Do not use StackFrame .getStartOffset or
	.getEndOffset.
	
	* SourceWindow.java: Use StackFrame .getDwflLine and not
	.hasDebugInfo.
	
	* SourceBuffer.java: Update, use StackFrame .getSymbol.
	* SourceWindow.java: Ditto.

2007-02-26  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Re-arranged to use new
	CurrentStackView.selectRow(). Fixes #4094.
	* CurrentStackView.java (selectRow): Rewritten to properly select a
	row in the TreeView using TreeSelection. Added Javadoc. Fixes #4094.

2007-02-22  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (disassembleFrame): Added. Disassembles instructions
	from a region of memory given by a StackFrame, and inserts it into
	the buffer. Fixes #4008.
	(loadFile): Upon loading the buffer from a new process without debuginfo, 
	disassemble it by default.
	* SourceWindow.java (doStep): Only bother removing buffer TextTags if 
	RunState returns sucessfully from the stepping request.
	(doAsmStep): Ditto.

2007-02-20  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (resensitize): Remove sensitivity for step-out
	and instruction step-out, pending #4083.

2007-02-19  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (createActions): Enabled step-over and
	instruction step-over.
	(resensitize): Set above actions to sensitive.
	(doContinue): Update call to RunState.continueExecution().
	(generateProcStackTrace): Assign DwflLine before DOM creation.
	Removed warning dialog for missing source code, print errors
	instead. Check for null DOMFrysks.

2007-02-19  Mark Wielaard  <mark@klomp.org>

	* SourceWindow.java (doContinue): Call RunState.run().

2007-02-16  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doContinue): Temporarily calls
	RunState.swContinue() as a workaround for #4057.

2007-02-15  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Add logic to only
	parse source file when necessary.

2007-02-15  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java (buildTree): Set row text to 
	"Thread ID:" and use updated StackFrame.getDOMSource().
	* InlineBuffer.java: Updated to use StackFrame.getDOMSource().
	* SourceView.java: Ditto.
	* SourceBuffer.java: Ditto.
	* SourceWindow.java: Added several new Actions for thread-specific
	stepping dialog box.
	(stepInstruction): Removed.
	(createActions): Initialized new dialog box actions.
	(createMenus): Removed old thread stepping dialog entry. Added new 
	Menu for thread manipulation; added entries for above Actions.
	(desensitize): Make sure to desensitize thread dialog box during
	a step or continue.
	(resensitize): Make sure to resensitize thread dialog box when signaled
	by RunState.
	(doStep): Now steps currently-selected Task only, instead of automatically
	stepping all threads of the process. Leaves the latter task to the new 
	thread dialog box.
	(doNext): Ditto.
	(doFinish): Ditto.
	(doAsmStep): Ditto.
	(doNext): Overloaded above method. Called from threading dialog box.
	(doFinish): Ditto.
	(doAsmStep): Ditto.
	(doAsmNext): Just implemented. Perform an instruction-level step-over.
	Steps the currently selected Task.
	(doAsmNext): Overloaded above method. Called from threading dialog box.
	(handleDialog): Added. If thread dialog is null, creates it. Sets the
	type of stepping performed by the dialog based on which Action calls it.
	(currentStackChanged): Update the current Task.
	* StepDialog.java (state): Added. Determines which type of action is 
	performed on selected Tasks.
	(StepDialog): Changed string from "tid" to "Thread ID:", removed call to 
	stepInstruction() from OK button. Added switch to "step" button, performing
	various actions depending on the requested type from the user.
	(setType): Sets the state and title for the dialog box.
	(desensitize): Added.
	(resensitize): Added.

2007-02-14  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (finishSourceWin): Set continue button to
	sensitive, not run button. Fixes #4009.
	(createActions): Updated to fix #4009.
	(createMenus): Ditto.
	(resensitize): Ditto.
	(doRun): Moved code to doContinue().
	(doContinue): doRun()s code moved here.
	* CurrentStackView.java (selectRow): Added.

2007-02-09  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doStep): Calls updated RunState.setUpLineStep().

2007-02-08  sami wagiaalla  <swagiaal@redhat.com>

	* SourceWindow.java: now hides instead of destroys itself upon
	Destroy event. Fix for bz3380.

2007-02-06  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java: (stateMap): Refactored from stateTable;
	changed to synchronized HashMap from Hashtable.

2007-02-05  Andrew Cagney  <cagney@redhat.com>

	* SourceWindowFactory.java (setGladePaths, gladePaths): Delete.
	(createSourceWindow): Simplify.

2007-01-29  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java: Update, frysk.gui.common.dialogs moved to
	frysk.gui.dialogs.

	* prefs/SyntaxPreferenceGroup.java: Update, frysk.gui.common.prefs
	moved to frysk.gui.prefs.
	* prefs/SyntaxPreference.java: Ditto.
	* prefs/SourceWinPreferenceGroup.java: Ditto.
	* SourceWindow.java: Ditto.
	* InlineSourceView.java: Ditto.
	* SourceView.java: Ditto.
	* SourceBuffer.java: Ditto.

2007-01-23  Andrew Cagney  <cagney@redhat.com>

	* CurrentStackView.java: Remove TaskException.
	* SourceWindow.java: Ditto..

2007-01-19  Andrew Cagney  <cagney@redhat.com>

	* testfiles/test6.cpp: Delete.
	* testfiles/test4.cpp: Delete.
	* testfiles/test3.cpp: Delete.
	* testfiles/test2.cpp: Delete.
	* testfiles/common.h: Delete.
	* testfiles/test.cpp: Delete.
	
2007-01-19  Tim Moore  <timoore@redhat.com>

	* SourceWindow.java (getProcIsa): new method.
	(toggleMemoryWindow, toggleDisassemblyWindow): Use it instead of
	MachineType. 

	* CurrentStackView.java (buildTree): Don't use MachineType; look
	at the task's isa instead.

2007-01-17  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (.procNotFound): Prevent hanging, and 
	properly exit if the process is not found.

2007-01-15  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (loadUnmarkedText): Look out for 
	FileNotFoundExceptions.
	* SourceView.java (scrollToLine): Edited scrolling parameter for more
	sane window scrolling.
	* SourceWindow.java (SourceWindow): Added.
	(finishSourceWin): Added some code to remove any AttachedObservers.
	(generateProcStackTrace): Watch out for more null DOMSources.
	* SourceWindowFactory.java (AttachedObserver): Added, re: #3584.
	(startNewProc): Added, starts a new executable.
	(attachToPID): Added, attaches a new source window to a running
	process.

2007-01-08  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): No longer
	try and set currentFrame object, and instead let
	updateShownStackFrame() do it. Fixes #3844.
	(generateProcStackTrace): Set the StackFrame DOMSource and
	DOMFunction separately.

2007-01-07  Andrew Cagney  <cagney@redhat.com>

	* testfiles/test_main_looper.c: Delete, moved to
	frysk-core/frysk/pkgdatadir.
	* testfiles/test_looper.xml: Delete, moved to
	frysk-core/frysk/pkgdatadir.

2007-01-05  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Calls
	updated findFunction in DOMSource.
	* SourceBuffer.java (getInlineInstance): Gets inlines
	from DOMSource.
	(createTags): Ditto.
	* InlineBuffer.java: Applied GNU formatting.
	(createTags): Gets inlines from DOMSource.

2007-01-03  Rick Moseley  <rmoseley@redhat.com>

	* testfiles/test_looper.xml: Fixes to DOMIMage.java and
	CDTParser.java; see bz #3832.

2007-01-03  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (getFunctionXXX): Removed. Use 
	DOMImage.findFunction() instead.
	(generateProcStackTrace): Switch to calling 
	DOMImage.findFunction(). Clear the DOMSource cache after
	the new SourceWindow is finished.

2006-12-31  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (refreshVars): Catch the reading of out-of-scope
	variables by looking for "" and "\0" in addition to a null Variable object.
	Fixes #3819.

2006-12-30  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Handles line
	highlighting better.

2006-12-28  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (setCurrentLine): Removed; replaced in
	functionality by highlightLine().
	(highlightLine): Cleaned up a little.
	(setScope): Removed redundant call to create DOMTags from 
	source code. Call highlightLine() instead of setCurrentLine().
	(loadUnmarkedText): Added. Loads unmarked text into
	this SourceBuffer.
	(loadFile): Moved some code into loadUnmarkedText().
	Better supports loading unmarked text from the innermost
	stack frame containing source filename information.
	* InlineBuffer.java (setCurrentLine): Call super.highlightLine()
	instead of setCurrentLine().
	* SourceWindow.java (populateStackBrowser): Ditto.

	(updateShownStackFrame): Remove checks for null source
	file name. Added some comments.
	* SourceBuffer.java (loadFile): Ditto.
	(highlightLine): Added some comments. Removed more
	redundant code.
	

2006-12-27  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (updateShownStackFrame): Display the source
	filename in the window, even if the DOMSource is null. 
	* SourceBuffer.java (loadFile): If the DOMSource for the current
	scope is null, attempt to just load the plaintext from the
	source file if we can get it. Fixes #3813.

2006-12-20  Stan Cox  <scox@redhat.com>

	* SourceBuffer.java (getVariable): Add NameNotFoundException.
	(refreshVars): Likewise.
	* InlineBuffer.java (getVariable): Add NameNotFoundException.

2006-12-16  Adam Jocksch  <ajocksch@redhat.com>

	* CurrentStackView.java (observers): Is now a LinkedList.
	* View.java (getFunctions): Now returns a list.
	* MixedView.java (getFunctions): Ditto.
	* SourceView.java (getFunctions): Ditto.
	(refreshVars): Now takes and returns a List.
	* SourceBuffer.java (functions): Is now a LinkedList.
	(getFunctions): Now returns a List.
	* SourceWindow.java: Refactored to reflect above changes.
	* VariableWatchView.java (observers): Is now a LinkedList.
	(variables): Ditto.
	* prefs/SyntaxPreference.java (syntaxListeners): Ditto.

2006-12-14  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java (buildTree): Won't get null StackFrames
	anymore, removed redundancies. Compare Tasks using their TID.
	* SourceBuffer.java (highlightLine): Return before doing anything
	if the scope of this Buffer has no source. If the incoming StackFrame
	has no debuginfo, try and find a frame in the stack that does.
	* SourceWindow.java (populateStackBrowser): Cleaned up, removed
	redundant checks. Fixes #3723.

2006-12-13  Rick Moseley  <rmoseley@redhat.com>

	* testfiles/test_looper.xml: Fixed error in function def's for DOM.

2006-12-13  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java (buildTree): Updated call to StackFrame.toPrint
	passing true.

2006-12-12  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (highlightLine): Assign a default empty string for
	this scope's source filename. Fixes #3706.
	* SourceWindow.java (populateStackBrowser): Catch more null 
	StackFrames. Assume some stacktrace function names could be null
	even if the objects aren't. Fixes #3696.

2006-12-07  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (SourceBuffer): If the incoming StackFrame is 
	null, do a minimum initialization and print an error.
	* SourceWindow.java (populateStackBrowser): Do a bare minimum
	initialization of the SourceWindow if the stack is null.
	* CurrentStackView.java (buildTree): Taking #3677 into account, check
	to see if the entire stack trace for all threads is null, if so dump
	an error into the StackView.

2006-12-06  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java: Remove @author.
	* tags/Tagset.java: Ditto.
	
	* tags/Tag.java: Add copyright.
	* tags/Tagset.java: Ditto.
	* tags/TagsetManager.java: Ditto.

2006-12-06  Mike Cvet  <mcvet@redhat.com>

	* InlineSourceView.java: Removed @author tag.
	* SourceBuffer.java: Ditto.
	* SourceWindowFactory.java: Ditto. 
	* InlineBuffer.java: Ditto.
	* SourceView.java: Ditto.

2006-12-06  Phil Muldoon  <pmuldoon@redhat.com>

	* tags/TagsetManager.java: Remove autogenerated @author tag.

2006-12-06  Mike Cvet  <mcvet@redhat.com>

	* VariableWatchView.java (variables): Added.
	(view): Refactored from SourceWindow parent.
	(VariableWatchView): Removed SourceWindow parameter.
	(setView): Added.
	(addTrace): Append new Variable to variables Vector.
	(removeTrace): Remove Variable to variables Vector.
	(refreshList): Added. Clears the model and re-parses the variables'
	values from SymTab. Addresses #1717.
	* SourceView.java (removeVar): Use Variable.getText() rather than 
	toString().
	(refreshVars): Calls buffer to refresh variable list.
	* SourceBuffer.java (refreshVars): Iterates through the incoming Vector
	and re-parses values for contained Variables.
	* SourceWindow.java (populateStackBrowser): Set VariableWatchView's 
	SourceView, and remind it to update values after a Proc state transition.

2006-12-06  Rick Moseley  <rmoseley@redhat.com>

	* testfiles/test_looper.xml: New test file to incorporate changes for
	CDTParser.java and DOMFactory.java.

2006-12-05  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (setCurrentLine): Check for null frame data.
	* SourceWindow.java: Removed references to SourceWindow state.
	(SourceWindowListener.currentStackChanged): Prevent nulls, fixing #3619.
	* SourceView.java (SourceViewListener.mouseMotionEvent): Remove
	reference to SourceWindow state macro.

2006-12-04  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (setCurrentLine): Don't bother highlighting
	anything if the function from this frame is in the wrong file.
	(highlightLine): Check for filenames, only highlight in the 
	correct file. Fixes #3622.
	(createTags): Look for FUNCTION_CALL TagType for function declaration.
	* SourceView.java (scrollToFunction): Remove String parsing and handling
	code, already done by the parser.
	* SourceWindow.java (populateStackBrowser): Removed redundant view reset.
	(updateShownStackView): More intelligently handle null DOMSources and 
	DOMSources belonging to different files. Load DOMSource if the new frame
	is from different files. Set new currentFrame here.
	(currentStackChanged): Set new currentFrame later.

2006-11-29  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java: (numSteppingThreads): Removed.
	(stepInstruction): Removed reference to above. Now lets RunState
	decide how many tasks are stepping.
	(doStep): Ditto.
	(doNext): Ditto.
	(doFinish): Ditto.
	(getNumSteppingThreads): Removed.

2006-11-27  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (highlightLine): Added additional code to take
	care of earlier calls in the stack trace, for highlighting the
	calling line of outer frames. Fixes #3582.

2006-11-23  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Moved some code around;
	preventing redundant variable creation. Fixed a bug where mixed 
	debuginfo/non-debuginfo programs didn't highlight properly.
	(currentStackChanged): If the Task that the incoming StackFrame belongs
	to has also changed from the last StackFrame's, then update the 
	Register, Memory, and Disassembly windows with the new Task information
	if they have been initialized and are open. Fixes #3302.
	(toggleRegisterWindow): Set RegisterWindow closed boolean to false.
	(toggleMemoryWindow): Set MemoryWindow closed boolean to false.
	(toggleDisassemblyWindow): Set DisassemblyWindow closed boolean to false.

2006-11-22  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doFinish): Added code to prepare for step-over work.
	(doNext): Ditto.

2006-11-22  Rick Moseley  <rmoseley@redhat.com>

	* testfiles/test_looper.xml: Update new base DOM for CDTParser code
	changes.
	* testfiles/test_main_looper.c: Added comments header for further
	parser testing.

2006-11-22  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (createSourceWindow): Updated calls to 
	getRunState() from getStateModel().
	(SourceWinListener.lifeCycleQuery): Ditto. 
	* SourceWindow.java (SW_state): No longer used.
	(stepInstruction): Removed call to SW_state, update RunState instead.
	(procReblocked): Ditto.
	(doRun): Ditto.
	(doStep): Ditto.
	(executeTasks): Ditto.
	(doNext): Ditto.
	(updateShownStackFrame): Updated to use RunState's state instead of 
	this window's SW_state.
	(toggleDisassemblyWindow): Add the DisassemblyWindow's LockObserver to
	RunState's Observer list.
	(toggleRegisterWindow): Ditto for RegisterWindow.
	(toggleMemoryWindow): Ditto for MemoryWindow.
	(LockObserver.update):  Commented. Hugely simplified. Relies on
	the RunState for all state manipulation. Only called when the last Task
	to be blocked has been blocked. No longer differentiates stepping 
	re-blocks from running re-blocks.
	(getState): Removed.
	(stepCompleted): Removed.
	(getRunState): Refactored from getStateModel().
	(LockObserver): Added Javadoc.
	* SourceView.java (SourceViewListener.mouseMotionEvent): Updated call
	to get the state from the RunState belonging to the SourceWindow.

	* StackFactory.java (createStackFrame): Moved original to new method taking
	an extra int parameter. Kept a delegate to new method with int being zero.

2006-11-20  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (createSourceWindow): Updated to make
	better use of RunState and figure out when a new Window is needed.
	(SourceWinListener.lifeCycleQuery): Figure out when to remove HashTable
	reference to this Proc.
	(SourceWinListener): Remove unnecessary field.
	(unblockProc): Remove HashTable reference if needed.
	(stateTable): Added. Global static table for referencing RunStates to
	processes for all windows.
	(map): Added. HashMap for mapping Procs to SourceWindows.
	
	* SourceWindow.java (LockObserver.update): Callback for Observer.
	(getLockObserver): Added. Pokes the SourceWindow when threads have been
	reblocked for whatever reason, prompting some sort of information 
	re-generation depending on the window state.
	(SourceWinBlocker): Removed. Obsoleted by RunState + LockObserver.
	(lock): Added. The LockObserver for this window.

2006-11-17  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (stepInstruction): Remove TextTags from
	source code.

2006-11-16  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java: (resetView): Added.
	(buildTree): Added.
	(CurrentStackView): Updated to use buildTree.

	* SourceWindow.java: (populateStackBrowser): Big cleanup;
	removed unnecessary optimizations, simplified. Rebuilds
	the CurrentStackView after every call, for now.
	(doNext): Added some code in preparation for step-out.
	(BreakPoint): Added. Breakpoint class.

2006-11-16  Stan Cox  <scox@redhat.com>

	* SourceWindow.java: Rename frysk.lang to frysk.value.
	* SourceView.java: Rename frysk.lang to frysk.value.
	* InlineSourceView.java: Rename frysk.lang to frysk.value.
	* SourceBuffer.java: Rename frysk.lang to frysk.value.
	* VariableWatchView.java: Rename frysk.lang to frysk.value.
	* InlineBuffer.java: Rename frysk.lang to frysk.value.

2006-11-15  Rick Moseley  <rmoseley@redhat.com>

	* testfiles/test_looper.xml: New for unit testing.
	* testfiles/test_main_looper.c: New for unit testing.

2006-11-15  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (stackTop): Changed from stackBottom.
	(createActions): Edited to use new stackTop instead of stackBottom.
	(createMenus): Ditto.
	(createToolBar): Ditto.
	(resensitize): Ditto. Removed code to re-sensitize unused buttons.
	(doAsmNext): Brings up the instruction stepping dialog.

2006-11-13  Mike Cvet  <mcvet@redhat.com>

	* CurrentLineSection.java: Removed.
	* StackLevel.java: Removed.
	* SourceBuffer.java (setCurrentLine): Removed reference to StackLevel.
	(highlightLine): Ditto.

2006-11-12  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (procReblocked): Moved work to StateModel.
	(doStep): Ditto.
	(doStop): Ditto.
	(stepCompleted): Ditto. 
	(doRun):  Ditto.
	(stepInstruction): Ditto.
	(executeTasks): Ditto.
	(SourceWinBlocker..run): Ditto.
	(finishSourceWin): Removed some initializations.
	(SourceWinBlocker.SourceWinBlocker): Updated to call methods in
	StateModel.
	(generateProcStackTrace): Ditto.
	(numSteppingThreads): Ditto.
	(SourceWinBlocker.existingTask): Ditto.
	
	* StepDialog.java (.buttonEvent): Updated to call refactored SourceWindow
	methods.

2006-11-11  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (lineLoopCount): Added. Keeps track of the
	number of instructions executed by each thread.
	(stepIn): If lineLoopCount reaches a certain level, we should assume
	that the line just won't change, and re-block everything.
	(updateShownStackFrame): If the selected frame has line number equal
	to zero, don't do anything.
	(populateStackView): Commented.

2006-11-10  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (setCurrentLine): Mark only the innermost frame.
	(createTags): Strip spaces before creating TextMark. Fixes #3499.
	Check for nulls before parsing.
	(setScope): Use an iterator to iterate through Vector. Check to see if
	the source file needs to be loaded. Fixes #3503.
	(highlightLine): Added. Tags and unTags based on StackFrame.
	(SourceBuffer): Initialize functions Vector.
	(loadFile): Check for nulls in source. Call createTags() on frames
	with debuginfo.
	
	* SourceWindow.java (doStep): Call removeTags() after unblocking.
	(updateShownStackFrame): Won't load a file if not needed. Scrolls by
	line number instead of TextMark when possible. Fixes #3470, #3471.
	(SourceWindowListener.currentStackChanged): Update currentFrame.
	(populateStackBrowser): Lots of new case handling. Makes sure that
	currently selected frames are updated properly.
	(removeTags): Added. Remove relevant StackFrame TextTags from the
	source text.
	(doStep): Call removeTags().
	(doRun): Call removeTags().

	* SourceView.java (mouseMotionEvent): Don't attempt a Variable reading
	if the SourceWindow is not stopped. Fixes #3504.
	

2006-11-07  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (finishSourceWin): Set the window title properly.
	* SourceView.java (mousedOverText): Make sure that the mouse is over a
	new tag in the source code before going off parsing trying to see if it
	is a variable. Fixes #3472.
	* SourceBuffer.java (getVariable): Added.

2006-11-06  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (generateProcStackTrace): Made sure the DOMFrysk gets
	generated before every Task is stack-traced.

2006-11-06  Nurdin Premji  <npremji@redhat.com>

	* SourceWindow.java (unblockProc): Removed requestDeleteTerminatingObserver
	* SourceWindowFactory.java (unblockProc): Ditto.

2006-11-05  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (stepIn): Updated ProcBlockObserver unblock call.
	(step): Ditto.

2006-11-03  Nurdin Premji  <npremji@redhat.com>

	* SourceWindow.java (step): Changed to reflect ProcBlockObserver changes.
	ProcBlockObserver now has a private task observer rather than implementing
	the tasks observers.
	(unblockProc): Ditto.
	(executeTasks): Ditto.
	* SourceWindowFactory.java (unblockProc): Ditto.

2006-11-03  Adam Jocksch  <ajocksch@redhat.com>

	* SourceView.java (scrollToFunction): Changed the withinMargin
	parameter of scrollToMark to 0.49 in an attempt to increase accuracy.

2006-11-03  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java: Moved lots of SourceWindow work to the 
	SourceWindow itself. Removed most imports.
	(createSourceWindow):Initializes the LibGlade for the SourceWindow, 
	keeps track of all SourceWindows and their observers. Now calls
	SourceWinBlocker from the SourceWindow itself.
	(SourceWinListener): Removed setting of SW_active.
	(unblockProc): Updated SourceWindowBlocker. Removed unnecessary call
	to Task.unBlock(InstructionObserver). Added call to 
	Task.requestDeleteTerminatingObserver.
	(SW_active): Removed.
	(taskCount): Removed.
	(taskStepCount): Removed.
	(errorLog): Removed.
	(SourceWinBlocker): Moved to SourceWindow.
	(getFunctionXXX): Ditto.
	(generateProcStackTrace): Ditto.
	(finishSourceWin): Ditto.
	(handleTask): Ditto.
	* SourceWindow.java (getFunctionXXX): Moved over from 
	SourceWindowFactory.
	(SW_active): Added.
	(runningState): Removed.
	(steppingState): Removed.
	(errorLog): Added.
	(unblockProc): Removed unnecessary boolean set.
	(SourceWinBlocker.existingTask): Moved to SourceWindow. Switch 
	statement to catch which state the SourceWindow is in at call time:
	instruction stepping, stepping in, over, out, or running. Updated
	calls to generateProcStackTrace().
	(SourceWinBlocker.updateAttached): 
	(SourceWinBlocker.existingTask.run): Update call to 
	generateProcStackTrace().
	(SourceWinBlocker.SourceWinBlocker): Set the ProcBlockObserver for
	the SourceWindow to this.
	(handleTask): Moved to SourceWindow.
	(step): Updates SW_state to INSTRUCTION_STEP. Returns for empty list.
	(stepIn): Added. Handles calls from InstructionObserver callbacks to check
	and see if the latest instruction has changed the currently-executing line
	in the source file.
	(stepOver): Added.
	(SourceWinBlocker): 
	(SourceWindow): Initializes glade and swProc. Most of work moved to
	finishSourceWin().
	(getState): Added. Returns SourceWindow state.
	(getSteppingState): Removed.
	(stepOut): Added.
	(procReblocked): Updated to use SW_state to find the state of the 
	SourceWindow. Removed setSensitive() calls and now calls resensitize().
	(stepCompleted): Ditto. Removed setSensitive() calls and now calls desensitize().
	(doRun): Ditto.
	(executeTasks): Updated to use SW_state to find the state of the 
	SourceWindow.
	(finishSourceWin): Moved from SourceWindowFactory. Initializes most
	fields of this class; took the work from the constructor.
	(generateProcStackTrace): Moved over from SourceWindowFacotory.
	Replaces most parameters by using global variables from this class. Don't
	re-build the DOM after each call, unnecessary.
	(doStep): Grabs all threads belonging to this Proc, checks to see if 
	their line number is listed. If not, adds an entry into new HashMaps 
	for them and unblocks them. Removed setSensitive() calls and now calls 
	desensitize().
	(dwflMap): Added.
	(lineMap): Added.
	(desensitize): Added.
	(resensitize): Added.

2006-11-02  Mike Cvet  <mcvet@redhat.com>

	* ThreadSelectionDialog.java (ThreadSelectionDialog): Calls
	updated getSwProc().
	* StepDialog.java: Added.
	* SourceWindowFactory.java (SourceWinBlocker.existingTask): 
	Built in ability to handle step events and re-generate 
	SourceWindow content upon completion of stepping for all 
	Tasks.
	(finishSourceWin): Calls update getSwProc().
	(SourceWinListener.lifeCycleQuery): Ditto.
	(handleTask): Taken out of a second unnecessary CustomEvents
	 event.
	(generateProcStackTrace): Make sure dom is re-generated
	each call.
	* SourceWindow.java (unblockProc): Added a 
	requestDeleteTerminatingObserver call to handle the update 
	to ProcBlockObserver.
	(step): Added. Unblocks tasks under an InstructionObserver.
	(stepCompleted): Added. Re-sensitizes the SourceWindow after
	step completion.
	(executeTasks): Refactored from executeThreads(). Removed
	obsolete boolean checks.
	(SourceWindow): Added a StepDialog reference. General clean-up
	of constructor and class.
	(createActions): Added Listener for StepDialog.
	(toggleStepDialog): Added.
	(createMenus): Added MenuItem for StepDialog.
	(mainThreadReblocked): Removed.
	(setMyTask): Removed.
	(getMyTask): Removed.
	(getSwProc): Refactored from getMyproc().
	(setSwProc): Refactored from setMyProc().
	(stepMainThread): Removed.
	(createActions): Removed toggleMainThread Action.
	(procReblocked): Changed to protected.

2006-11-01  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (SourceWinBlocker.existingTask): 
	Checks to see if this request is from an instruction step,
	and handles that case appropriately.
	* SourceWindow.java (toggleThreadDialog): Removed HashSet
	intialization and moved it to the constructor.
	(doStop): Remove all threads from the runningThreads
	HashSet and then block them.
	(unblockProc): Add all threads to runningThreads, unless
	they're already running via other means.
	(InstructionObserver): Removed. Handled in 
	SourceWindowFactory.SourceWinBlocker instead.
	(getSteppingState): Added.
	(stepped): Added.
	(stepMainThread): Added.
	(toggleMainThread): Removed.

2006-10-31  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView.java (CurrentStackView): Updated to use
	StackFrame.toPrint().
	* ThreadSelectionDialog.java (ThreadSelectionDialog): Created
	new SourceWindow variable.
	(.buttonEvent): Call SourceWindow callbacks upon button events
	and window closure.
	* SourceWindowFactory.java (getFunctionXXX): Removed debug
	printing.
	* SourceWindow.java (runningThreads): Changed from a HashMap
	to a HashSet.
	(unblockProc): Moved observer boolean reset call out of the loop.
	(doStop): Calls requestAdd() instead of requestAddObservers().
	(toggleThreadDialog): Removed LifeCycleListener, handled now by
	the ThreadSelectionDialog.
	(executeThreads): Cleaned up to work with HashSet. Fixed iterator
	removal problem. Added check to see if all Tasks are being blocked
	to avoid non-blocking problem.

2006-10-27  Mike Cvet <mcvet@redhat.com>

	* SourceBuffer.java (loadFile): Check all StackFrames during
	the first initialization for debuginfo.
	* SourceWindow.java (createActions): Create the toggleAction
	for the thread dialog.
	(toggleThreadDialog): Added.
	(executeThreads): Added. Handles independant thread stopping
	and starting.
	* SourceWindowFactory (finishSourceWin): Removed DOMFrysk 
	initialization code. Moved to generateProcStackTrace.
	(generateProcStackTrace): Re-arranged DOMFrysk initialization
	and stack backtrace generation. DOMFrysk now takes a StackFrame.
	Better handling of traces with some frames missing debuginfo.
	Fixes #212434.
	* ThreadSelectionDialog.java: New class. Dialog window for thread
	stopping and starting.

2006-10-26  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (handleTask): Cleaned up, no longer
	updates task_count from here.
	* SourceWindow.java (procReblocked): Update new running state.
	(unblockProc): Ditto.

2006-10-25  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (SourceWindow): Changed ProcAttachedObserver
	to ProcBlockObserver.
	(unblockProc): Reset the boolean in ProcBlockObserver, remove
	the call to Task.requestUnblock () since it's handled by the
	next call to delete.
	(doStop): Update to work with ProcBlockObserver - call to 
	block the main task.
	* SourceWindowFactory.java (createSourceWindow): Changed 
	ProcAttachedObserver to ProcBlockObserver.
	(SourceWinBlocker.existingTask): Update to work with
	ProcBlockObserver.

2006-10-20  Yao Qi  <qiyaoltc@cn.ibm.com>

	* SourceWindow.java (updateShownStackFrame): Check null 
	pointer for argument.

	* CurrentStackView.java (CurrentStackView): Avoid reference
	a null StackFrame object.

2006-10-18  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (SourceWinBlocker.existingTask):
	Update number of Tasks before proceding with blocks.
	* SourceWindow.java (SourceWindow): Changed all references to
	Action to org.gnu.gtk.Action. Similarly for ActionListener.
	Imported frysk.proc.Action; new references to Action refer 
	to this import.
	(toggleMainThread): Added.	Unblocks and re-blocks the main task.
	(InstructionObserver): Added.

2006-10-17  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doStackUp): Catch null TreePath selection.
	(doStackDown): Ditto.
	(doStackBottom): Ditto.
	* SourceBuffer.java (setCurrentLine): Only highlight currently
	selected stack frame. Addresses #3327.

2006-10-16  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (SourceWinListener.lifeCycleQuery):
	Set SW_active to false after the window closes.

2006-10-13  Rick Moseley  <rmoseley@redhat.com>

	* SourceView.java: Popup "Variable out of scope" when variable
	is right-clicked and it is out-of-scope.

2006-10-13  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (updateShownStackFrame): Check for a null
	DOMFunction and DOMSource in selected StackFrame. Made more
	robust for function definitions.
	* SourceView.java (scrollToFunction): Checks for open brace.

2006-10-12  Rick Moseley  <rmoseley@redhat.com>

	* VariableWatchView.java: Fixed stacktrace when last item in 
	window is deleted.
	* SourceView.java: Only show "Add to Variable Watches/
	Remove from Variable Watches" when necessary.

2006-10-12  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Don't rebuild the 
	StackView from scratch on subsequent calls (via stop/start). 
	Made public. Now called from global ProcAttachedObserver on 
	Proc re-block. Addresses #3346.
	(getDOM): Added.
	(SourceWindow): Create a new global ProcAttachedObserver object.
	(doRun): Makes a call to unblockProc() - runs the process from 
	the blocked state.
	(unblockProc): Added - Deletes the blocking observer from each of
	the Proc's Tasks.
	(doStop): Moved individual de/sensitization of widgets to 
	procReblocked(). Calls iterateAttach() from the global 
	ProcAttachedObserver to block all Tasks. Desensitizes SourceWindow.
	(procReblocked): Re-de/sensitizes widgets after the Proc being
	observed has been re-blocked by the observer.
	* SourceWindowFactory.java (generateProcStackTrace): Added. Creates
	a new DOMFrysk if necessary; handles stack trace re/generation.
	(finishSourceWin): Calls generateProcStackTrace() for stack trace
	generation.
	(handleTask): Added code to determine whether or not the event is 
	a SourceWindow creation or a Stop/Continue; creates or generates
	information as necessary.

2006-10-12  Rick Moseley  <rmoseley@redhat.com>

	* VariableWatchView.java: Now are able to view float/double values.

2006-10-11  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (createTags): Strip spaces from the function
	string.
	* SourceView.java (scrollToFunction): Get rid of newlines and 
	spaces in the incoming string.
	* SourceWindow.java (updateShownStackFrame): Upon call, send the
	function string to the SourceView to scroll to. Fixes #3327.

2006-10-10  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java: (getVariable): Cleaned up a bit.
	* SourceView.java: Added a new HashMap to uniquely identify
	Variables.
	(removeVar): Added. Removes variable from the HashMap and calls
	to remove the variable trace from the GUI.
	(clickedOnTextArea): Added new menu option for removing Variables.
	* SourceWindow.java: (SourceWindow): New VariableWatchView with
	this as a parameter. 
	(removeVariableTrace): Added - removes the Variable trace from the 
	VariableWatchView.
	(getView): Added. 
	(doStackUp): Fixed up for #3327.
	(doStackDown): Ditto.
	(doStackBottom): Ditto.
	(currentStackChanged): Ditto.
	* VariableWatchView.java: (VariableWatchView): Sets incoming 
	SourceWindow as parent, initializes new TreeStore and Listener.
	(removeTrace): Added. Removes the row from the TreeView.
	(selectionChangedEvent): Added catch for index exception.
	(clickedOnVariable): Added. Creates new menu when a row is clicked
	from the TreeView.
	(handleClick): Added. Tells the parent to remove the clicked Variable.
	(mouseEvent): Added. Determines whether the mouse event is worth
	pursuing.
	

2006-10-09  Rick Moseley  <rmoseley@redhat.com>

	* SourceView.java: Fix only one digit of line #'s being displayed.
	Fix backtrace that is generated when clicking on non-variable area.

2006-10-06  Mike Cvet  <mcvet@redhat.com>

	* InlineBuffer.java (getVariable): Sends scope argument into new
	SymTab.
	* SourceBuffer.java (getVariable): Ditto.

2006-10-05  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (doStackUp): Fixed up to work with multithreaded
	Procs and the TreeView in the StackView.
	(doStackDown): Ditto.
	(doStackBottom): Ditto.

2006-10-05  Rick Moseley  <rmoseley@redhat.com>

	* SourceView.java: Re-arranged right-click variable value menu.
	Do not show "Add Trace" when clicking in white space.
	Changed "Add Trace" to "Add to Variable Watrches".

2006-10-05  Rick Moseley  <rmoseley@redhat.com>
	
	* SourceView.java: Use the Variable.toString() to display variable
	values.

2006-10-05  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (setMyProc): Fixed to update window title.
	Fixes #3309.

2006-10-04  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (isLineBroken): Added a null check.
	* SourceWindowFactory.java (procTable): Changd from taskTable.
	(createSourceWindow): Updated to create a SourceWindow from a Proc
	with multiple Tasks. Uses ProcAttachedObserver to block the Proc.
	(finishSourceWin): Takes a proc. Iterates through each Task and
	generates a StackFrame from it, pushing into an array. Sends 
	StackFrame array into SourceWindow. Removed call to getDwflLineXXX.
	(unblockProc): Refactored from unblockTask. Handles new Proc blocking
	method.
	(getFunctionXXX): Removed unnecessary print statements.
	(SourceWinListener.lifeCycleQuery): Unblocks the Proc instead of Task.
	(SourceWinBlocker): Added - implements ProcObserver.ProcTasks.
	(handleTask): Added.
	* SourceWindow.java (SourceWindow): Takes an array of StackFrames 
	as a parameter.
	(setMyProc): Added.
	(getMyProc): Added.
	(populateStackBrowser): Initializes the stack browser with an array
	of StackFrames; one for each thread belonging to the Proc. Updates
	shown stack frame.
	(toggleRegisterWindow): Handles the RegisterWindow with a Proc.
	(toggleMemoryWindow): Ditto.
	(toggleDisassemblyWindow): Ditto.
	* CurrentStackView.java (CurrentStackView): Initializes stackColumns
	globally. Now takes an array of StackFrames as a parameter, builds
	a TreeView out of them. Changed ListStore to TreeStore.
	(getFirstFrameSelection): Added.

2006-10-04  Rick Moseley  <rmoseley@redhat.com>

	* SourceBuffer.java: Fix off by one line number error for 
	right-click variable values.

2006-10-03  Mike Cvet  <mcvet@redhat.com>

	* CurrentStackView (CurrentStackView): Enabled for x86_64.

2006-10-01  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (getVariable): Now uses frysk.lang.Variable and
	SymTab.
	* SourceBuffer.java (getVariable): Ditto.
	* InlineSourceView.java (mouseEvent): Now shows the variable value
	as an item within the right click menu, also rewired to use
	frysk.lang.Variable.
	* SourceView.java (clickedOnTextArea): Ditto.
	(parent): Made protected.
	* SourceWindow.java: Replaced references of frysk.gui.srcwin.Variable
	with frysk.lang.Variable.
	* VariableWatchView.java: Reformatted.
	(addTrace): Now uses frysk.lang.Variable.
	* Variable.java: Removed, frysk.lang.Variable should be used instead.

2006-09-22  Mike Cvet  <mcvet@redhat.com>

	* SourceBuffer.java (isLineExecutable): Check for a null StackFrame
scope. Addresses #3250.
	(getVariable): Ditto.
	(getLineCount): Ditto.
	(hasInlineCode): Ditto.
	(getInlineInstance): Ditto.
	(loadFile): Ditto.

2006-09-21  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (getVariable): Changed to reflect new parameter to
	Variable constructor.
	* SourceBuffer.java (getVariable): Ditto.
	* SourceView.java (drawMargin): Added additional comments.
	(mousedOverText): Ditto.
	* Variable.java (Variable): Added filepath parameter.
	(getFilePath): Added.

2006-09-20  Tom Tromey  <tromey@redhat.com>

	* CurrentLineSection.java (startOffset): Renamed.
	(CurrentLineSection): Updated.
	(getStartOffset): Renamed.
	(setStartOffset): Likewise.
	* SourceBuffer.java (setCurrentLine): Use renamed getStartOffset.

2006-09-20  Mike Cvet  <mcvet@redhat.com>

	* InlineSourceView.java (InlineSourceView): Passes a StackFrame
	to the new InlineBuffer.
	(toggleChild): Passes in a StackFrame to the new InlineSourceView.
	* InlineBuffer.java (InlineBuffer): Takes a StackFrame, used
	as the current scope.
	(moveDown): Uses StackFrame to set current scope.
	(moveUp): Ditto.
	* SourceBuffer.java (loadFile): Added a boolean and a check to 
	prevent error message being continuously printed to the view.
	* CurrentStackView.java (CurrentStackView): Now displays a stack
	backtrace on tasks without debug info.
	(getCurrentFrame): Made this and the returned variable static.

2006-09-19  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (SourceWindow): Removed StackLevel from 
	parameters.
	(populateStackBrowser): Removed StackLevel.
	* SourceWindowFactory.java (finishSourceWin): Removed creation of 
	StackLevels.
	* CurrentStackView.java (CurrentStackView): Got rid of all references
	to StackLevel and CurrentLineSection. Re-organized to properly detect
	inline code.

2006-09-18  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (populateStackBrowser): Initializes the
	View with a StackFrame.
	(SourceWindow): Got rid of the StackLevel global variable.
	* SourceView.java (SourceView): Changed StackLevel to 
	a StackFrame.
	(SourceView): Ditto.
	(load): Ditto.
	(getScope): Ditto.
	* View.java (load): Ditto.
	(getScope): Ditto.
	* SourceBuffer.java (scope): Changed StackLevel variable
	to a StackFrame.
	(SourceBuffer): Changed StackLevel to a StackFrame.
	(SourceBuffer): Ditto.
	(setCurrentLine): Ditto. Updated calls properly.
	(setScope): Ditto.
	(setScope): Ditto.
	(getScope): Ditto.
	* MixedView.java (MixedView): Changed StackLevel to a
	StackFrame.
	(load): Ditto.
	(getScope): Ditto.
	* InlineBuffer.java (InlineBuffer): Temporarily removed 
	calls to setScope.
	(moveDown): Ditto.
	(moveUp): Ditto.
	(setCurrentLine): Switched the change line calls to a 
	StackFrame instead of a CurrentLineSection.
	* CurrentStackView.java (StackViewListener): Changed to a
	StackFrame from a StackLevel.
	(notifyObservers): Ditto.
	(selectionChangedEvent): Ditto.
	* SourceWindowFactory.java (finishSourceWin): Properly creates
	StackFrames, and initializes information for each frame on the 
	call stack, rather than just the top StackLevel.
	(SourceWinBlocker.addFailed): Logging call made directly to errorLog
	rather than the EventLogger.

2006-09-16  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java: Added Javadoc.

2006-09-15  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (conWin): Imported and made variables for
	ConsoleWindow - now represented by the SourceWindow.
	(createMenus): Added code to display the ConsoleWindow from the 
	menu - commented out for now, pending bugs.
	(toggleConsoleWindow): Added.
	(toggleDisassemblyWindow): Added a catch for 64-bit architectures,
	on which the disassembler does not work properly, yet. Fixes #3203.
	(toggleMemoryWindow): Ditto.

2006-09-14  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (toggleDisassemblyWindow): Added a toggleAction
	for the DisassemblyWindow.
	(createActions): Set up the toggleAction for above.
	(createMenus): Added menu items for the above window.
	(toggleDisassemblyWindow): Added.

2006-09-08  Mike Cvet  <mcvet@redhat.com>

    * CurrentStackView.java (CurrentStackView): Added architecture
    checks to address #3198.

2006-09-08  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java (finishSourceWin): Creates a new
	StackFrame to send to the SourceWindow. Removed some unneeded 
	comments and information.
	* CurrentStackView.java (CurrentStackView): Temporarily removed lots
	of old and redundant code, and added plumbing for the new StackFrame
	parameter.
	* SourceWindow.java (SourceWindow): Now takes in a StackFrame for 
	useful information.
	(populateStackBrowser): Also takes a StackFrame as a parameter.
	* CurrentLineSelection.java: Applied GNU formatting.

2006-07-27  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java: Cleaned up global variables; now works
	properly with the TaskBlockCounter.
	(createSourceWindow): Added null checks and counter checks for
	multiple windows watching the same process.
	(unblockTask): Decrements the block counter, properly cleans up
	after an exit.
	* SourceWindow.java (toggleRegisterWindow): Calls RegisterWindow
	properly through the new factory.
	(toggleMemoryWindow): Ditto for MemoryWindow.

2006-07-26  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java: Added static SourceWindow variable.
	(finishSourceWin): Edited to use above variable.
	* SourceWindow.java: Removed some unnecessary imports and
	global variables for the Memory and Register windows, which is
	now taken care of by their respective factories.
	(SourceWindow): Remove Register and Memory window initialization.
	(attachEvents): Remove listeners for the above windows.
	(doRun): Removed references to the above windows.
	(doStop): Ditto.
	(toggleMemoryWindow): Allows MemoryWindowFactory to take care of
	initialization, showing, hiding, and task assigning.
	(toggleRegisterWindow): Ditto for RegisterWindowFactory.

2006-07-21  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Minor change of source window title.

2006-07-17  Rick Moseley  <rmoseley@redhat.com>

	* SourceWindow.java: Corrected misspelling of "occurrence".

2006-07-11  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (SourceWindow): Added initialization for the
	memory window, removed import for WindowManager.
	(addEvents): Now uses local register window.
	(doRun): Ditto.
	(doStop): Ditto.
	(toggleMemoryWindow): Ditto.

2006-07-07  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Now initializes the register
	window.
	(addEvents): Changed to use new local register window.
	(doRun): Ditto.
	(doStop): Ditto.
	(toggleRegisterWindow): Ditto.
	* SourceWindowFactory.java (finishSourceWindow): No longer hides the
	session manager if a source window already exists, also calls
	grabFocus().

2006-07-06  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (finishSourceWindow): No longer calls
	setKeepAbove(true) as this makes the dialog modal.

	* SourceWindowFactory.java (finishSourceWindow): Now calls grabFocus
	and setKeepAbove(true) for the source window.

	* SourceView.java: Applied GNU formatting.
	(exposeEvent): Refactored so that in the future it will be easier to
	enable hover-over-variable display.
	(mousedOverText): Now saves the variable in the object and
	tells the window to refresh if we've moved from a variable to no
	variable or vice versa.

2006-07-05  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (createSourceWindow): Now checks to 
	see if the task is blocked, and if it is does not add a blocker.

	* SourceWindow.java (SourceWindow): Now sets status bar text.
	(doStop): Ditto.
	(doRun): Ditto.

	* SourceBuffer.java (hasInlinedCode): Now correctly handles the case
	where no debugging information is present.

	* CurrentStackView.java: Applied GNU formatting.
	(CurrentStackView): Now handles the case where DOM information in the
	stack frame is null, signifying a frame with no debugging
	information.
	* SourceBuffer.java: Applied GNU formatting.
	(getVariable): Now handles case where there is no DOM for the current
	frame.
	(getLineCount): Ditto.
	(loadFile): Ditto.
	* SourceWindow.java (SourceWindow): Commented out unused DOMFrysk
	variable.
	(updateShownStackFrame): Now handles frames with no debug information.
	* SourceWindowFactory.java: Applied GNU formatting.
	(finishSourceWindow): Now handles cases where there is no debugging
	information for the current process.
	* StackLevel.java: Applied GNU formatting.
	(NO_LINE): Added.
	(StackLevel): Now handles cases where this is no debug information for
	the current stack.

2006-06-30  Mike Cvet  <mcvet@redhat.com>

	* SourceWindow.java (toggleMemoryWindow): Added toggle for MemoryWindow.
	(createActions): Added Action for MemoryWindow.
	(createMenus): New MenuItem for MemoryWindow.
	(attachEvents): Added Listener for MemoryWindow.
	(doRun): Set running status for MemoryWindow.
	(doStop): Ditto.
	* SourceWindow.java: Formatted with new GNU formatter.

2006-06-28  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (finishSourceWindow): Now pops up a WarnDialog if
	a IOException occurs while creating the DOM.
	(unblockTask): Added, refactored out of multiple occurances in the code.

	* SourceWindow.java (showFindBox): Now sets focus to be on the 
	search text box, fixes bug 2854.

2006-06-27  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (doStackUp): No longer uses the outdate widget
	from glade, now uses the local CurrenStackView variable.
	(doStackDown): Ditto.
	(doStackBottom): Ditto.

	* SourceWindowFactory.java (finishSourceWindow): If a source window
	has been previously opened for this task restore it and hide the
	session manager.
	(SourceWinListener.lifeCycleQuery): Now unblocks the task when the 
	source window closes.

2006-06-22  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (finishSourceWindow): Now hides the
	session manager before showing the source window.
	(SourceWinListener.lifeCycleQuery): Reshows the session manager when
	the window exits.

	* SourceWindow.java (createActions): Now sets program control actions
	to insensitive since they are currently not implemented.
	(attachEvents): Set mode box to insensitive since it is currently not
	properly implemented.

2006-06-22  Mike Cvet  <mcvet@redhat.com>

	* SourceWindowFactory.java: Observer add failures are now logged properly.

2006-06-22  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (finishSourceWin): Now calls requestUnblock
	before removing the observer.

2006-06-21  Phil Muldoon  <pmuldoon@redhat.com>

	* SourceWindowFactory.java (finishSourceWin): Use
	NoDebugInfoDialog for warning.

2006-06-20  Mark Wielaard  <mark@klomp.org>

	* SourceWindowFactory.java (finishSourceWin): Fix if block.

2006-06-20  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (finishSourceWin): No longer throws
	an exception if a blocker is not found.

	* SourceWindowFactory.java (finishSourceWin): No longer uses
	DialogManager to launch the error dialog, now creates it's own.

	* SourceWindowFactory.java (getFunctionXXX): Changed the heuristic for
	finding the current function, since the previous one would break if 
	weren't stopped on the function entry address.

	* SourceWindowFactory.java (finishSourceWin): Now uses proper call
	to showErrorDialog and calls System.exit(1) if ErrorDialog.QUIT is
	returned.

2006-06-19  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (finishSourceWin): Initialized dom with
	null.

	* SourceWindowFactory.java (finishSourceWin): Now creates a dialog
	rather than trying to throw an exception to be caught, since nothing
	will be able to catch the exception.

	* SourceWindowFactory.java (finishSoruceWin): Now throws a
	NoDebugInfoException if the dom cannot be created.

	* SourceWindowFactory.java (finishSourceWin): Fixed bug where
	observers are no longer removed from a task if there aren't any
	attached blockers following failure to get a dom object.

2006-06-16  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (createSourceWinFromStoppedTask):
	Created, behaves the same as createSourceWindow except it assumes
	that the task is already blocked.

2006-06-15  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (getFunctionXXX): Added as an interim way
	of getting the function on a file and line number.
	(finishSourceWin): Uses getFunctionXXX rather than a hardcoded
	DOMFunction.

2006-06-13  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (createSourceWin): Stores a reference to
	the blocker for the task in a hash map so we can detatch from it when
	we're done.
	(finishSourceWin): If no DOM can be created, now tells task to resume
	execution.

	* SourceWindowFactory.java (finishSourceWin): Now uses the parent proc
	for a key in the hashmap rather than the task itself.

	* SourceWindowFactory.java (SourceWindowBlocker): Added.
	(createSourceWin): Now pushes event onto the core event loop and
	exits,
	(finishSourceWin): Added, is called after task is  blocked.

2006-06-07  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (loadFile): No longer tries to parse DOM, merely
	creates tags from information contained in the DOM.
	* SourceWindowFactory.java (setTestFilesPath): Removed.
	(clearTestFilesPath): Removed.
	(createSourceWindow): Now uses DOMFactory to create the DOM and no
	longer pulls in test files.

2006-05-17  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java: Comment out println calls.
	* cparser/Tokenizer.java: Ditto.

2006-05-10  Adam Jocksch  <ajocksch@redhat.com>

	* CurrentStackView.java (CurrentStackView): Now adds accessibility
	information.
	* SourceView.java (SourceView): Ditto.
	* VariableWatchView.java (VariableWatchView): Ditto.
	* SourceWindowFactory.java (SourceWindowFactory): Made some modifications
	to inline code positions to better line up with code examples.

2006-05-03  Phil Muldoon  <pmuldoon@redhat.com>

	* tags/Tagset.java (Tagset): Add a no parameter constructor
	to satisfy ObjectFactory.load() reflection class loading.
	* tags/Tag.java (Tag): Ditto. 
	* tags/TagsetManager.java (removeTagset): Added. Remove tag set 
	from storage and manager.
	(save): Added. Save all tag sets registered with the manager.
	(load): Added. Load all tag sets in Tagsets directory.
	(TagsetManager): Added lookup UniqueHashMap.
	(getTagsetByName): Added. Allow Tagset name lookup.

2006-05-01  Phil Muldoon  <pmuldoon@redhat.com>

	* tags/Tagset.java (save): Implement from SaveableXXX interface.
	(load): Ditto. 
	* tags/Tag.java (save): Implement from SaveableXXX interface.
	(load): Ditto. 

2006-04-28  Phil Muldoon  <pmuldoon@redhat.com>

	* tags/TagsetManager.java (TagsetManager): Use ObservableLinkedList
	instead of Vector.
	(getListTagsets): Added. Return linked list.
	* tags/Tagset.java (Tagset): Extend GuiObject. Call super()
	in constructor.

2006-04-24  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactor.java (createSourceWindow): Uncommented
	hack to stop process since register get works with modified kernel,
	this will need to be replaced by a proper start/stop method.

2006-04-12  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (toggleRegisterWindow): Now uses WindowManager
	to launch the register window.
	* SourceWindowFactory.java (createSourceWindow): Added commented out
	observer that stops the current task, this will evetually need to be
	replaced with a less hackish API.

2006-04-10  Adam Jocksch  <ajocksch@redhat.com>

	* SoureWindow.java (createActions): Changed type of find and
	toggleRegisterWindow actions to ToggleAction, made it so a
	repeated triggering of the find event will show/hide the bar.
	(createSearchBar): No longer sets icons for next/prev buttons,
	resets the text for highlight all after setting icon.
	(showFindBox): Added.

2006-04-10  Adam Jocksch  <ajocksch@redhat.com>

	* tags/TagsetManager.java (getTagsets): Added overloaded version
	that returns all tagsets registered with manager.

	* SourceWindow.java (setMyTask): Refactored out Register window
	creation code.
	(createActions): Created action for toggling register window.
	(createMenus): Creates "View" menu with option to toggle register
	window.
	(toggleRegisterWindow): Added.

2006-04-06  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (setMyTask): Now creates a register window for the task.
	(doRun): Sets the register window to be insensitive.
	(doStop): Sets the register window to be sensitive.

2006-04-05  Adam Jocksch  <ajocksch@redhat.com>

	* tags/Tagset.java (Tagset): Now takes a version string of the command
	this tagset applies to.
	(getVersion): Added.
	(addTag): Added.
	(getTags): Added.
	(containsTag): Added.
	(equals): Added.
	* tags/TagsetManager.java (containsTagset): Added.
	* tags/Tag.java: Added.

	* tags/TagsetManager.java: (addTagset): Now properly adds tag to
	tagset.

	* tags: Added.
	* tags/TagsetManager.java: Added.
	* tags/Tagset.java: Added.

	* SourceWindow.java (attachEvents): Now adds mouse listener to the
	toolbar goto box that selects the text in the box when the mouse is
	clicked on it.

2006-04-04  Adam Jocksch  <ajocksch@redhat.com>

	* SourceView.java (scrollToFunction): Now scrolls so the function is
	near the top of the window.
	* SourceWindow.java (attachEvents): Now adds completion to the goto box,
	for jump to function purposes.
	(doJumpToFunction): Added.
	(SourceWinListener.entryEvent): If parse for line number fails, now
	jumps to function, also removed clearing of text.

2006-04-03  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (scrollToLine): Now uses a value of 0.35 as the
	second parameter, so the line the user wanted to scroll to appears
	closer to the top of the widget.
	* SourceWindow.java (SourceWindowListener.entryEvent): Now also jumps
	to a line number when the user enters that number; no longer needs to
	be prefixed by "line ".

	* SourceWindow.java (SourceWindow): Removed call to populateFunctionBox.
	(addEvents): Now adds an EntryListener to the toolbar entry.
	(gotoLine): Now takes a line to jump to, passes that line to source view.
	(doScrollToFunction): Removed.
	(updateShownStackFrame): Removed call to populateFunctionBox.
	(doStop): Sets the sensitivity of the toolbar goto box.
	(doRun): Ditto.
	(populateFunctionBox): Removed.
	(SourceWindowListener.buttonEvent): No longer checks for goto button.
	(EntryEvent): If the event came from the toolbar, try to parse it to
	jump to a line.
	(comboBoxEvent): Now is only responsible for switching the mode of the
	source window.

	* CurrentStackView.java (CurrentStackView): No longer shows headers,
	also added function names to the information displayed.
	* InlineBuffer.java (InlineBuffer): No longer takes a DOMSource.
	(moveDown): refactored to reflect changes to StackLevel.
	* InlineSourceView.java (InlineSourceView): No longer takes a
	DOMSource.
	* SourceView.java (toggleChild): Refactored to reflect new 
	InlineSourceView constructor.
	* SourceWindow.java (addEvents): Removed events for goto line.
	(createSearchBar): Removed initializations for goto line.
	* SourceWindowFactory.java (createSourceWindow): Now adds functions
	to the StackLevels.
	* StackLevel.java (StackLevel): Now takes a DOMFunction instead of
	a DOMSource.
	(getFunc): Added.
	* cparser/CDTParser.java (ParserCallBack.acceptFunctionDeclaration):
	removed debugging output.

2006-03-31  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (createTags): Commented out section for adding
	comment texttags, is still broken in some corner cases. Will leave
	disabled until fix is in place.
	* InlineBuffer.java (createTags): Ditto.
	* SourceWindowFactory.java (createSourceWindow): Changed executable
	lines for file test2.cpp due to edits.
	* cparser/CDTParser.java (ParserCallBack.acceptVariable):
	No longer assumes that the variable name and it's type are on the 
	same line.
	(ParserCallBack.acceptFunctionDeclaration): Ditto, also assumes
	that not all parameters are on the same line.
	(enterFunctionBody): Ditto.
	* testfiles/test2.cpp: Added varaible declaration that spans two lines.

2006-03-29  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (createTags): Now uses DOMTagTypes as tag names,
	skips of FUNCTION_BODY tags.
	* SourceBuffer.java (init): Now initializes tags using DOMTagTypes,
	also added listener for template syntax highlighting.
	(createTags): Now uses type of tag to create TextTag, FUNCTION_BODY
	tags no longer trigger syntax highlighting, rather they add the
	function to the interal vector of funcions.
	* SourceWindow.java (SourceWindow): Reordered initialization steps
	so that events are the last thing to be initialized.
	(doScrollToFunction): Removed "_FUNC" postfix.
	(populateFunctionBox): No longer tries to remove "_FUNC" postfix.
	* cparser/CDTParser.java 
	(ParserCallBack.enterFuncitonBody): Now adds a FUNCTION tag
	for syntax highlighting and a FUNCTION_BODY tag containing the
	complete parameter list for jump-to-function purposes.
	(ParserCallBack.enterMethodBody): Ditto.
	(ParserCallBack.acceptTemplateParameterReference): Implemented.
	* prefs/SyntaxPreferenceGroup.java (TEMPLATE): Added.

2006-03-28  Rick Moseley  <rmoseley@redhat.com>
	* cparser/CDTparser.java: Added Frysk comment header.
	* cparser/Token.java: Ditto.
	* cparser/Tokenizer.java: Ditto.
	* prefs/SourceWinPreferenceGroup.java: Ditto.
	* prefs/SyntaxPreference.java: Ditto.
	* prefs/SyntaxPreferenceGroup.java: Ditto.

2006-03-28  Rick Moseley  <rmoseley@redhat.com>
	* CurrentLineSection.java: Added Frysk comment header.
	* CurrentStackView.java:  Ditto.
	* InlineBuffer.java: Ditto.
	* MixedView.java: Ditto.
	* SourceWindowFactory.java: Ditto.
	* VariableWatchView.java: Ditto.
	* View.java: Ditto.

2006-03-27  Adam Jocksch  <ajocksch@redhat.com>

	* sourceBuffer.java (init): Added tags for macro highlighting and
	attaches a TagListener to the macro sytnax highlighting preference.
	(createTags): Creates macro tags.
	* cparser/CDTParser.java 
	(ParserCallBack.acceptMacro): Added method body.
	* prefs/SyntaxPreferenceGroup.java (NAMESPACE): Added.
	* testfiles/test6.cpp (THIS_IS_A_MACRO): Added.

	* SourceBuffer.java (init): Added tags for namespace and include
	statement syntax highlighting, adds listeners for these tags to the
	associated preferences.
	(createTags): Creates tags for namespace and include statement syntax
	highlighting.
	* cparser/CDTParser.java
	(ParserCallBack.enterNamespaceDefinition): Added method body.
	(ParserCallBack.acceptNamespaceReference): Ditto.
	(ParserCallBack.acceptUsingDirective): Ditto.
	(ParserCallBack.acceptUsingDeclaration): Ditto.
	(ParserCallBack.enterInclusion): Ditto.
	* prefs/SyntaxPreferenceGroup.java (NAMESPACE): Added.
	(INCLUDES): Ditto.
	* testfiles/test6.cpp: Updated to reflect a more complicated code
	example.

2006-03-24  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Now creates a VariableWatchView
	as well as initializing the stack browser before initializing events.
	(addVariableTrace): Now delegates work to VariableWatchView.
	(populateStackBrowser): Now creats a CurrentStackView.
	(addEvents): Adds listener to the CurrentStackView.
	(updateShownStackFrame): Now gets stackLevel direct from event.
	(SourceWinListener): Now implements StackViewListener.
	(SourceWinListener.currentStackChanged): Added.
	(SourceWinListener.selectionChangedEvent): Removed.
	* VariableWatchView.java: Added.
	* CurrentStackView.java: Added.

2006-03-19  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java (setMyTask): Do not append Task.getStateString
	to the name; value should have been private to Task.

2006-03-17  Adam Jocksch  <ajocksch@redhat.com>

	* cparser/CDTParser.java (parse): Now parses file with QUICK_PARSE and
	COMPLETE_PARSE to highlight the most items possible.

2006-03-16  Adam Jocksch  <ajocksch@redhat.com>

	* cparser/CDTParser.java (parse): Changed the parsing mode to
	QUICK_PARSE, as this mode seems to lead to more accurate parsing
	and syntax highlighting of the code.

2006-03-15  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (addFunction): Removed since parsers now directly
	manipulate the DOM.
	(addVariable): Ditto.
	(addKeyword): Ditto.
	(addClass): Ditto.
	(load): Now passes in DOMSource to parser.
	(getText): Removed.
	(getLineOffset): Removed.
	* InlineBuffer.java (getText): Removed.
	(getLineOffset): Ditto.
	* StaticParser.java (parse): Now takes a DOMSource object.
	* cparser/CDTParser.java (parse): Changed to reflect change to interface.
	(ParserCallBack): Functions now directly manipulate the DOM, rather than
	calling methods in SourceBuffer.
	* cparser/CTagsParser.java (parse): Changed to reflect interface,
	also commented out areas that add tags since they use the old API. Will
	update this parser when it becomes needed.
	* cparser/SimpleParser.java (parse): Ditto.

	* InlineBuffer.java (getText): Added.
	(getLineOffset): Ditto.
	* SourceBuffer.java (addFunction): Now uses getLineOffset.
	(addVariable): Ditto, also uses getText.
	(addKeyword): Ditto.
	(addClass): Ditto.
	(getText): Added.
	(getLineOffset): Ditto.
	* cparser/CDTParser.java (parse): Enabled parsing for return statements.

2006-03-14  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (createTags): Now goes through list of comments
	and creates tags for them as well.
	* SourceBuffer.java (createTags): Ditto.
	(addComment): Now adds a comment into the protected static HashMap,
	since we want to keep a copy but don't want to burden the DOM.
	(init): Comment tag now initialized again, and listener is added.
	(CommentList): Added, data structure to keep track of comments for a file.
	* StackLevel.java (isParsed): Now passes call on to DOMSource.
	(setParsed): Ditto.
	* cparser/CDTParser.java (parse): Now does secondary scan of file 
	to pick up comments, code copied from SimpleParser.java.
	* cparser/SimpleParser.java (Tokenizer): Refactored out into it's own class.
	(Token): Ditto.
	* cparser/Token.java: Added.
	* cparser/Tokenizer.java: Added.
	* prefs/SyntaxPreferenceGroup.java: Added field for Comments.

2006-03-13  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (init): Updated loading of preferences to 
	reflect making Syntax Highlighting related preferences a
	subgroup.
	* SourceView.java (initialize): Ditto.
	* prefs/SourceWinPreferenceGroup (SourceWinPreferenceGroup):
	Now takes int for preference tab.
	* prefs/SyntaxPreferenceGroup (SyntaxPreferenceGroup): Ditto.

2006-03-09  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (getVariable): Now adds check for the DOMLine
	being null since this occurs in corner cases.

	* SourceWindowFactory.java (createSourceWindow): Removed debugging
	output.

2006-03-08  Adam Jocksch  <ajocksch@redhat.com>
	
	* SourceWindow.java (createToolbar): Fixed tooltip for continue execution.
	(SourceWindowListener::comboEvent): Changed to reflect changes in mode
	selection box.

2006-03-03  Adam Jocksch  <ajocksch@redhat.com>

	* InlineSourceView.java (refresh): Renamed to recalculateVisibleScopes.
	* MixedView.java (refresh): Removed.
	* SourceView.java (refresh): Removed.
	(drawMargin): Now uses member variables that are set by the preference
	listeners.
	(initialize): Adds listeners to appropriate preferences.
	(calculateMargin): Added.
	* View.java (refresh): Removed.

	* InlineSourceView.java (refresh): Now gets number of inline 
	levels from new preferences model.
	(toggleChild): Ditto.
	* SourceBuffer.java (init): Now adds listeners to appropriate
	preferences.
	(finalize): Removed.
	(TagPeferenceListener): Added.
	* SourceView.java (refresh): Now pulls values from new preference model.
	(drawMargin): Ditto.
	* SourceWindow.java (refresh): Removed.
	(setShowToolbar): Added.
	(launchPreferenceWindow): Now uses new Preference Window.
	* prefs/ColorPreferenceEditor.java: Removed.
	* prefs/LNFPreferenceViewer.java: Ditto.
	* prefs/PreferenceList.java: Ditto.
	* prefs/PreferenceViewer.java: Ditto.
	* prefs/PreferenceWindow.java: Ditto.
	* prefs/SourceWinPreferenceGroup.java: Added.
	* prefs/SyntaxPreference.java: Now extends ColorPreference, also removed
	constants.
	(SyntaxPreference): Now takes a string and default values for color, weight,
	style.
	(addListener): Added.
	(updateTag): Removed.
	(revert): Added.
	* prefs/SyntaxPreferenceGroup.java: Added.
	* prefs/SyntaxPreferenceViewer.java: Removed.
	* prefs/TagPreference.java: Removed.

2006-02-23  Adam Jocksch  <ajocksch@redhat.com>

	* prefs/TagPreference.java: Added.

	* prefs/BooleanPreference.java: Moved to frysk.gui.common.prefs, .
	* prefs/PreferenceManager.java: Ditto.
	* prefs/IntPreference.java: Ditto.
	* prefs/ColorPreference.java: Ditto.
	* prefs/FryskPreference.java: Ditto, now implements Saveable,
	replacing saveValues and setModel.

2006-02-22  Adam Jocksch  <ajocksch@redhat.com>

	* MixedView.java (MixedView): Now adds source windows to scrolled
	widgets so that you can scroll laterally.
	* SourceBuffer.java (SourceBuffer): Added constructor that takes
	the mode to be displayed.
	(finalize): Added, removes this buffer's texttags from the preferences
	that update them.
	* SourceView.java (SourceView): Added constructor that takes the
	mode to be displayed.
	* SourceWindow.java (switchToAsmMode): Now uses new SourceView
	constructor.
	* prefs/ColorPreference.java (ColorPreference): Now adds tag to
	an internal vector of tags if non-null.
	(setModel): Now iteratres through all tags and updates them.
	(saveValues): Ditto.
	(appendTags): Added.
	(removeTag): Added.
	* prefs/PreferenceManager.java (addPreference): If the duplicate
	preference is a color preference, it now concatenates the new
	observer's list of tags with the old one's.
	(getColorPreference): Added private version that takes a string.
	* SyntaxPreference.java (updateTags): Extracted to save the
	properties of all the tags.

2006-02-15  Adam Jocksch  <ajocksch@redhat.com>

	* Sourcewindow.java: (createSearchBar): No longers sets label text,
	adds size groups to necessary items.
	(SourceWindowListener.ButtonEvent): Added check to make sure button
	was actually clicked.

2006-02-08  Phil Muldoon  <pmuldoon@redhat.com>

	* srcwin/SourceWindow.java: Revert i8n.

2006-02-03  Adam Jocksch  <ajocksch@redhat.com>

	* CodeItem.java: Removed, merged contents into Variable.java.

2006-02-02  Adam Jocksch  <ajocksch@redhat.com>

	* SourceView.java: Created inner class to handle listener
	responsabilities.
	(mouseEvent): Removed.
	(findNext): Now does the scrolling in this method.
	(findPrevious): Ditto.
	(scrollToFound): Removed.
	(scrollToFunction): Added.
	(getFunctions): Added.
	(getScope): Ditto.
	(drawMargin): Removed commented out debugging output.
	(mouseMotionEvent): Removed.
	(isTextArea): Added.
	(isMargin): Added.
	(clickedOnMargin): Added.
	(clickedOnTextArea): Ditto.
	(mouseOverMargin): Ditto.
	(mouseOverText): Ditto.
	(getIterFromWindowCoords): Ditto.
	* SourceWindow.java: Created inner class to handle listener
	responsabilities.
	(SourceWindow): Now sets the icon of the window to be the Frysk
	icon.
	(buttonEvent): Removed.
	(entryEvent): Removed.
	(comboBoxEvent): Removed.
	(resetSearchBox): Added.
	(populateStackBrowser): Made private.
	(SelectionChangedEvent): Removed.
	(addListeners): Now assigns listeners to the inner class.
	(hideFindBox): Added.
	(gotoLine): Ditto.
	(doFindNext): Ditto.
	(doFindPrev): Ditto.
	(doHighlightAll): Ditto.
	(doScrollToFunction): Ditto.
	(switchToSourceMode): Ditto.
	(switchToAsmMode): Ditto.
	(switchToMixedMode): Ditto.
	(switchToSourceAsmMode): Ditto.
	(updateShownStackFrame): Ditto.
	* View.java (scrollToFound): Removed.
	

2006-02-01  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (populateStackBrowser): Fixed infinite loop.

	* CurrentLineSection.java: Added, is able to represent the
	"current line" as an arbitrary number of contiguous sections.
	* InlineBuffer.java (setCurrentLine): Refactored to use 
	CurrentLineSection.
	* SourceBuffer.java (setCurrentLine): Ditto.
	(load): Ditto.
	* SourceWindow.java (populateStackBrowser): Ditto.
	* StackLevel.java (StackLevel): Ditto.
	(getStartingLineNum): Removed.
	(getEndingLineNum): Ditto.
	(setStartingLineNum): Ditto.
	(setEndingLineNum): Ditto.
	(getColEnd): Ditto.
	(setColEnd): Ditto.
	(getColStart): Ditto.
	(setColStart): Ditto.
	(getCurrentLine): Added.
	(setCurrentLine): Added.

2006-01-31  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (getVariable): Now added check to see if line
	was null, fixed NPE that can occur when mouse past end of text.
	(hasInlinedCode): Ditto.
	(getNumberOfAssemblyLines): Added.
	* SourceView.java (initialize): Now sets font to monospace.
	* SourceWindow.java (comboBoxEvent): Added code to set mode of the
	view to MIXED when appropriate.

	* SourceWindowFactory.java (createSourceWindow): Removed debugging 
	output, now will print stack trace and exit if source window glade
	file cannot be found.
	* MixedView.java (MixedView): Switched mode setting to use new
	interface.
	(load): Ditto.
	* SourceBuffer.java: Changed state from being a boolean to being an
	int with 3 possible values: source, assembly, or mixed.
	(isLineExecutable): Refactored to reflect above change.
	(isLineBroken): Ditto.
	(toggleBreakpoint): Ditto.
	(getVariable): Ditto.
	(getLineCount): Ditto.
	(hasInlineInstance): Ditto.
	(setScope): Single parameter version now uses above int-based mode
	system, dual parameter version now has switch statement for the three
	modes.
	(setShowAssembly): Refactored to setMode(int).
	* SourceView.java (setMode): Refactored to take an int instead of a
	booean.
	* SourceWindow.java (comboBoxEvent): Added section to deal with Mixed
	mode, added comments.

2006-01-30  Adam Jocksch  <ajocksch@redhat.com>

	* View.java (scrollToFunction): Added.
	(scrollToLine): Added.
	(getFunctions): Added.
	(getScope): Added.
	(showAll): Added.
	(getParent): Added.
	* MixedView.java: Added new interface methods.
	(MixedView): Created.
	(refresh): Added, calls refresh on children.
	(findNext): Now searches through the source, then assembly.
	(highlightAll): Now highlights every match in both buffers.
	(load): Loads data for both buffers.
	(getScope): Funnels call down to source buffer.
	* SourceView.java: Added new interface methods.
	* SourceWindow.java (comboBoxEvent): Now deals with the case where 
	the SOURCE/ASM option is chosen, as well as delegating the function
	goto cababilities to the View.
	(populateStackBrowser): Removed casts made possible by interface changes.
	(populateFunctionBox): Now uses getFunctions from View.

	* SourceBuffer.java (setScope): No longer takes boolean for assembly
	code, now to set assembly code you must call setShowAssembly, old
	version was made private.
	(setShowAssembly): Added.
	* SourceView.java (load): No longer takes boolean for assembly code.
	(setMode): Now calls setShowAssembly rather than setScope.

	* SourceBuffer.java (isLineExecutable): Now returns true for every line
	less than or equal to the last line if assembly code is being shown.
	(isLineBroken): Returns false if assembly code is being shown, will
	have to review this later as to breakpoints in assembly code.
	(toggleBreakpoint): Returns false if assembly code is being shown,
	see above comment.
	(getVariable): Always returns null if assembly code is being shown,
	since variables do not make sense in that context.
	(getLineCount): If assembly is being shown returns the length
	of the buffer, rather than the contents of the DOM.
	(hasInlineCode): Now returns false if assembly code is being shown for
	now, will this change once we're displaying mixed mode with inlined code?
	(setScope): Now sets member variable indicating whether assembly code
	is being displayed.
	* SourceView.java (setMode): Now calls refresh on the widget after
	showing assembly code.

2006-01-27  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (setScope): Now takes boolean as to whether the
	assembly should be shown rather than the source.
	(loadAssembly): Added.
	* SourceView.java (load): Added second method that takes boolean 
	indicating whether assembly code is to be shown rather than source
	code.
	(setMode): Added.
	* SourceWindow.java (comboBoxEvent): Now looks for changes in the
	viewing mode.
	(addEvents): Now adds listener to the mode combobox.

	* AssemblyView: Removed, will be worked in as part of SourceView.
	* InlineAssemblyView: Ditto, but with  InlineSourceView.
	* InlineView.java: Removed.

	* SourceViewWidget.java: Refactored to SourceView.java.
	* InlineViewer.java: Refactored to InlineSourceView.java.
	* View.java: Added.
	* SourceView.java: Refactored from SourceViewWidget.java, now implements
	View.java.
	* AssemblyView.java: Added.
	* MixedView.java: Added.
	* InlineView.java: Added.
	* InlineSourceView.java: Added.
	* InlineAssemblyView.java: Added.

2006-01-25  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (setScope): Now checks for the existence of tags
	before removing them.
	* SourceWindow.java (SourceWindow): Now initializes trace view widget.
	(addVariableTrace): Now adds variable name and a default value to the
	trace window.
	(selectionChanged): Now checks for no selection existing.
	* SourceWindowFactory.java: No longer initlializes variables in
	static constructor.
	(setDummyPath): Renamed to setTestFilesPath.
	(clearDummyPath): Renamed to clearTestFilesPath.
	(createSourceWindow): Added search to find proper test file path

	* SourceBuffer.java (addVariable): Re-hardcoded offsets for different
	variable types due to change to sample files.
	(init): Now sets strikethrough on optimized variable tag.
	* SourceWindowFactory.java (createSourceWindow): Re-hardcoded
	executable lines and current line due to changes in sample files.
	* testfiles/common.h: Removed declaration of myClass.
	* testfiles/test6.cpp: Added declaration of myClass.

2006-01-23  Adam Jocksch  <ajocksch@redhat.com>

	* SourceViewWidget.java (mouseMotionEvent): Now checks for the existance
	of variables when the cursor is over the Text area of the widget and 
	changes the cursor to a hand if there is a variable there.

	* SourceViewWidget.java: Now implements MouseMotionListener.
	(initialize): Now adds this as a MouseMotionListener.
	(mouseMotionEvent): Added, changes the cursor over the margin and
	over lines that contain inline code.

2006-01-20  Adam Jocksch  <ajocksch@redhat.com>

	* prefs/PreferenceViewer.java (showPreferenceEditor): Removed public to
	fix warning.
	(saveAll): Ditto.

	* InlineViewer.java (refresh): Now calls getIntPreferenceValue rather
	than getIntPreference.
	(toggleChild): Ditto.
	* SourceViewWidget.java (refresh): Calls to get___Preference replaced
	with get___PreferenceValue.
	(drawMargin): Ditto.
	* SourceWindow (refresh): Ditto.
	* prefs/IntPreference.java (setCurrentValue): Added.
	* prefs/LNFPreferenceViewer.java (LNFPreferenceViewer): Now creates
	checkboxes and spinner for toolbar, line number, executable, and
	inline code depth preferences.
	(saveAll): saves preferences for toolbar, line number, executable mark
	and inline code depth.
	(toggleEvent): Added.
	(spinEvent): Added.
	* prefs/PreferenceManager.java: Now initializes toolbar preference
	using addPreference rather than directly inserting into the HashMap.
	(getBooleanPreferenceValue): Added.
	(getIntPreferenceValue): Added.
	(getColorPreferenceValue): Added.
	(getBooleanPreference): Now returns the preference, rather than the value.
	(getIntPreference): Ditto.
	(getColorPreference): Ditto.
	* prefs/PreferenceWindow.java: Now stores both lnf and syntax pref
	viewers.
	(buttonEvent): Both viewers are now saved, not just the current one.
	(setupButtons): Now initializes both viewers, although neither is added
	to the window.
	(updateShownPrefs): Now uses the previously initialized preference
	viewers.

2006-01-19  Adam Jocksch  <ajocksch@redhat.com>

	* prefs/PreferenceWindow.java (preferenceWindow): Now calls addListeners
	prior to calling setupButtons so that the initial selection is handled
	properly.

	* prefs/ColorPreference.java (setModel): No longer calls saveValues, now
	sets tag properties.
	* prefs/PreferenceList.java (selectionChangedEvent): Changed type of 
	preference being retrieved to ColorPreference from SyntaxPreference.
	* prefs/PreferenceWindow.java (updateShownPrefs): Fixed typo for name
	of glade widget and syntax highlighting option, now shows all widgets
	after they've been added.

	* prefs/PreferenceWindow.java (updateShownPrefs): Now actually changes
	the preference editor being displayed based on the selection.

	* prefs/PreferenceViewer.java (saveAll): Added.
	* prefs/LNFPreferenceViewer.java: Added.

	* prefs/PreferenceWindow.java (setupButtons): No longer creates a 
	SyntaxPreferenceViewer on startup.
	* prefs/IntPreference.java: Rearranged constants to fix ecj warning.

	* prefs/BooleanPreference.java: Moved constant declarations so that
	they're before the first use; solves ecj warning.
	* prefs/ColorPreference.java: Ditto.
	* prefs/ColorPreferenceEditor (setCurrentPref): Now takes argument
	of type ColorPreference rather than SyntaxPreference, also sets
	state of weight and style buttons based on input.
	(toggleEvent): Added cast to SyntaxPreference, see comment for more
	details.
	* prefs/SyntaxPrefList.java: Renamed to PreferenceList.java.
	* prefs/PreferenceList.java (PreferenceList): Now takes an array of
	Strings to use as names.
	* prefs/PreferenceViewer.java: Added.
	* prefs/PreferenceWindow.java (show): No longer re-calls setupButtons,
	as this was causing an Exception if the prefs window was launched
	more than once.
	* prefs/SyntaxPreference.java (setModel): Now updates tag weight and
	style.
	* prefs/SyntaxPreferenceViewer.java: Now implements PreferenceViewer.
	(showSyntaxPrefEditor): Changed to showPreferenceEditor.
	

2006-01-18  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (InlineViewer): No longer takes a Preferences.
	(refresh): Now uses PreferenceManager.
	(toggleChild): Ditto.
	* PreferenceConstants.java: Removed.
	* PreferenceWindow.java: Moved to prefs/PreferenceManager.
	* prefs: Added.
	* SourceBuffer.java: Reformatted.
	(updatePreferences): Removed, tags are now updated automatically.
	(init): Now creates preferences for the various tags.
	* SourceViewWidget.java: Reformatted.
	(SourceViewWidget): No longer takes Preference object.
	(refresh): Now uses PreferencesManager to pull preference data.
	(drawMargin): Ditto.
	(initialize): Initializes some higher-level preferences.
	* SourceWindow.java: Reformatted.
	(SourceWindow): No longer creates preferences object.
	* prefs/BooleanPreference.java: Added.
	* prefs/ColorPreference.java: Ditto.
	* prefs/ColorPreferenceEditor.java: Ditto.
	* prefs/FryskPreference.java: Ditto.
	* prefs/IntPreference.java: Ditto.
	* prefs/PreferenceManager.java: Ditto.
	* prefs/SyntaxPrefsList.java: Ditto.
	* prefs/SyntaxPreference.java: Ditto.
	* prefs/SyntaxPreferenceViewer.java: Ditto.

2006-01-11  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (createSourceWindow): Now prints out
	Exception stack trace upon glade error.

2005-12-21  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (refresh): Now correctly sets the color of the
	search results tag to the background, rather than foreground.
	* SourceViewWidget.java (scrollToLine): Fixed off-by-one error.
	* SourceWindow.java (handlButtonClicked): Now correctly returns
	for empty search targets as well as malformed input in the goto
	line box.
	(entryEvent): No longer searches on empty (or whitespace) text.

	* InlineViewer.java (refresh): Now performs adjustments for changes in
	the number of inline scopes that can be visible at any one time (fixes
	bug #2075).
	(moveDown): Renamed to moveDownPostOrder.
	(moveDownPreOrder): Added.
	(expandLowestChild): Uncommented.

	* InlineViewer.java (refresh): Added.
	(expandLowestChild): Added, commented out for now since it isn't used.
	* SourceViewWidget.java: Added child member variable of type 
	InlineViewer.
	(refresh): Now calls refresh on the inlined scopes.
	(setSubscopeAtCurrentLine): Now saves the passed InlineViewer as the
	child of this Widget so that it can be updated when preferences change.

2005-12-20  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (createEllipsis): Now adds a tooltip to the
	ellipsis that explains the concept of hidden inlined code more clearly.
	* PreferenceWindow.java (setupButtons): Now sets the value of the spinner
	for inline code levels to the value in the preferences model.
	(buttonEvent): Now saves the status of the spinbutton for number of inline
	levels into the preferences model.

	* Various javadoc additions to all files.

	* InlineBuffer.java (loadLines): Now sets the ellipsis anchor to null
	since the contents are being overwritten.
	(getLineCount): Is now conditional on the presence of the ellipsis,
	since that will add an extra line to the code being displayed.
	(getLastLine): Ditto.
	* InlineViewer.java (createEllipsis): Added.
	(moveUp): Now uses createEllipsis.
	(moveDown): Ditto.
	* SourceBuffer.java (loadFile): Now sets anchor to be null since 
	buffer contents are about to be overwritten.

	* InlineViewer.java (moveUp): Refactored to use createEllipsisAnchor in 
	InlineBuffer.java.
	(moveDown): Ditto.
	* InlineBuffer.java (createEllipsisAnchor): Added.
	* SourceViewWidget.java (setSubscopeAtCurrentLine): Refactored to use
	createAnchorAtCurrentLine method in SourceBuffer.
	(clearSubscopeAtCurrentLine): Refactored to use	clearAnchorAtCurrentLine
	in SourceBuffer.
	* SourceBuffer.java (createAnchorAtCurrentLine): Added.
	(clearAnchorAtCurrentLine): Added.

2005-12-14  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Removed initialization of IconManager.
	* SourceWindowFactory: Removed references to image paths since this is 
	now handled by IconManager.

	* SourceWindow.java (createSearchBar): Now pulls icons from stock,
	rather than from file.

2005-12-13  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java: Started then commented out new way of keeping track
	of the child anchors.
	* SourceWindow.java: Moved constants to IconManager.
 	(SourceWindow): Now calls IconManager to initialize the icons.
	(createActions): No longer creates icons.
	(createToolbar): Temporarily ditto, until IconManager can load these
	icons too.

2005-12-12  Adam Jocksch  <ajocksch@redhat.com>

	* PreferenceConstants.java: (Inline): Added values for the number of
	inline code levels to display and the default value for it.
	* InlineViewer.java (toggleChild): Now pulls the level of depth from the
	preferences model.
	(drawLineNumber): Needs to return (x) - 1 if we're showing ellipsis, not
	(x) + 1.

2005-12-09  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (moveUp): Implemented details.
	* InlineViewer.java (moveUp): Ditto.

	* InlineViewer.java (moveDown): Now reparents the inlined code (if it
	exists) so that gtk doesn't clear it away when we change the text.
	* SourceViewWidget.java (toggleChild): Changed to use new getSource
	method in DOMFunction.
	(setSubscopeAtCurrentLine): Checks to see if the widget has a parent,
	and if so removes it.
	* InlineBuffer.java (moveDown): Added code to create new StackLevel.

2005-12-08  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (InlineViewer): Initializes base depth to 1.
	(setSubscopeAtCurrentLine): Now correctly has parameter type as
	SourceViewWidget, otherwise does not override superclass.
	(doSetSubscope): Added.
	(clearSubscopeAtCurrentLine): Added.
	(toggleChild): Arbitrary limit set to three levels for now, added
	debugging output.
	(removeLowestChild): Added debugging output.
	* SourceViewWidget.java: Added myContext member variable.
	(drawMargin): Now uses member myContext variable, to avoid repeated
	garbage collection of GC variables.

	* dom/: Moved to frysk-core, updated imports in .java files to
	match.

2005-11-24  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (InlineViewer): Removed boolean hasEllipsis parameter.
	(setSubscopeAtCurrentLine): Added.
	(toggleChild): Added.
	(removeLowestChild): Added.
	(moveDown): Added.
	(moveUp): Added.
	* SourceWindowFactory.java (createSourceWindow): Added another level to
	the stack, all but the top and bottom are now inlined to test the inline
	code functionality.

2005-11-23  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (getInlineInstance): Added.
	(getCurrentLine): Removed.
	(setCurrentLine): Added.
	* SourceBuffer.java (setCurrentLine): Changed to protected,
	left gravity of end of current line mark set to false.
	* SourceViewWidget.java: Changed the TextChildAnchor to protected.	

	* InlineBuffer.java (hasInlineCode): Now uses getCurrentLine.
	(getCurrentLine): Added.
	
	* InlineBuffer.java (hasInlineCode): Now implemented.
	* PreferenceConstants.java: Added constants for variables that are out of
	scope, renamed unavailable variabels to optimized variables.
	* SourceBuffer.java: Changed unavailable variable tag to optimized
	variable tag, added tag for out of scope variables, removed inline
	code tag.
	(init): Removed initialization of inline scope tag, added creation
	of out of scope tag.
	(updatePreferences): Ditto, except for updating rather than
	initializing.
	(addVariable): Hardcoded some out of scope variable information.
	(createTags): Now looks for out of scope variable tags in DOM.
	* SourceViewWidget.java (toggleChild): Now uses constant for image
	node name.
	* SourceWindowFactory.java (createSourceWindow): Now adds info
	for inline code 2 levels deep.
	
2005-11-22  Adam Jocksch  <ajocksch@redhat.com>

	* PreferenceConstants.java: Added constants for unavailable variables.
	* SourceBuffer.java (addVaraible): Hacked some things in to simulate
	unavailable variables.
	(createTags): Creates unavailable variable tags.
	(init): Creates unavailable variable tag.

	* SourceViewWidget.java (mouseEvent): Now ignores clicks next to
	an area of inlined code, rather than causing the inlined code to
	be collapsed.

2005-11-21  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (InlineBuffer): Now takes a DOMSource instead of a
	StackLevel.
	(getVariable): Added.
	* InlineViewer.java (InlineViewer): Now takes a DOMSource instead of a 
	StackLevel.
	* SourceViewWidget.java (toggleChild): Refactored to reflect above
	change to InlineViewer constructor.
	* SourceWindowFactory.java (createSourceWindow): Fixed current line
	for example code.

	* InlineViewer.java (mouseEvent): Added, currently does not allow
	breakpoint or trace related functionality due to ambiguities
	regarding inlined code.
	* SourceViewWidget.java (mouseEvent): Now checks to make sure there is
	inline code before creating an InlineViewer.
	* SourceWindowFactory.java (createSourceWindow): Fixed 
	NullPointerException as a result of not incrementing a variable.

2005-11-17  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindowFactory.java (createSourceWindow): Moved inline code to
	first level of scope, added DOMFunctions for all the functions.

	* InlineBuffer.java (isLineExecutable): Now only returns false, since
	we are disabling the case of settting a breakpoint in disbled code
	since we're not sur what to do with it.
	(isLineBroken): Ditto.
	(toggleBreakpoint): Ditto.

	* InlineBuffer.java (isLineExecutable): Added.
	(isLineBroken): Added.
	(toggleBreakpoint): Added.
	* InlineViewer.java (drawMargin): Fixed off-by-one for line numbers.
	* SourceBuffer.java (toggleBreakpoint): Now checks to make sure line
	is executable.

	* InlineBuffer.java (createTags): Added.
	* SourceBuffer.java: Made most member variable protected.

	* SourceBuffer.java (isLineExecutable): Removed debugging output.
	(setCurrentLine): Ditto.
	(loadFile): Ditto.

	* SourceViewWidget.java (drawMargin): Now calculates the height of the
	current line taking whether or not there's inline code into
	consideration, not doing this was leading to errors in the margin after
	a block of expanded inline code.

	* InlineBuffer.java (getLastLine): Added.
	(getFirstLine): Added.
	* InlineViewer.java (drawLineNumber): Added.
	* SourceBuffer.java (getLastLine): Added.
	* SourceViewWidget.java (refresh): Now pulls the width of the drawing
	area from getLastLine rather than getLineCount, since in the case of
	inline code these two will not be the same.
	(drawMargin): Extracted out protected drawLineNumber method.

2005-11-16  Adam Jocksch  <ajocksch@redhat.com>

	* InlineBuffer.java (InlineBuffer): Removed debugging output.
	(getLineCount): Added.
	* InlineViewer.java (toggleChild): Removed.
	(load): Removed.
	(moveDown): Remvoed.
	(getScope): Removed.
	(setScope): Remvoed.
	(setSubScopeAtCurrentLine): Removed.
	(clearSubScopeAtCurrentLine): Removed.
	(drawMargin): Removed.
	* SourceBuffer.java (getLineCount): Removed boolean parameter since it
	was unused.
	* SourceViewWidget.java (mouseEvent): Now checks to see if there is
	inline code being displayed, and if there is compensates for it.
	(toggleChild): Moved the setting of expanded to before the 
	InlineInstance is added.
	(drawMargin): Fixed bug with the line numbers being off, combined two
	if blocks dealing with the current line.
	* InlineHandler.java: Removed.	

	* InlineBuffer.java: Added.
	* InlineViewer.java (InlineViewer): Now takes StackLevel and
	DOMInlineInstance.
	(toggleChild): Commented out for now.
	(moveDown): Ditto.
	(setSubScopeAtCurrentLine): Ditto.
	(drawMargin): Corrected bug where r,g, and b for a color were all being
	populated by the r component.
	* SourceBuffer.java (SourceBuffer): Created constructor that just 
	initializes, but doesn't load data.
	(getInlineInstance): Added.
	(init): Removed section that loads data.
	(loadFile): Changed to protected, extracted out loadLines function.
	(loadLines): Refactored out of loadFile.
	(createTags): Changed to protected.
	* SourceViewWidget.java (SourceViewWidget): Added constructor that takes
	an already existing SourceBuffer.
	(toggleChild): Refactored to use new InlineViewer constructor.
	(drawMargin): Executable marks not drawn on lines where the is expanded
	inline code.

2005-11-15  Adam Jocksch  <ajocksch@redhat.com>

	* SourceViewWidget.java (toggleChild): Removed references to InlineHandler.
	* SourceWindowFactory.java (createSourceWindow): Adds inline isntance
	reference to appropriate lines in dummy DOM, changed the way that
	functions are added to the image.
	(printDOM): Added.

	* SourceWindow.java (setMyTask): Now sets the title to contain the
	proc command, the task #, and the status.

	* PreferenceConstants.java: Removed extraneous comment.
	* PreferenceWindow.java: Added comments to uncommented methods.
	* SourceBuffer.java: Commented uncommented methods.
	(init): Made private.
	(createComment): Added TODO, since nothing calls this right now.
	* SourceCodeLine.java: Removed.
	* SourceWindow.java: Commented Uncommented methods and reoganized layout.
	(setMyTask): Now puts name of task in window title, added TODO in regards
	to safeness of method.
	* SourceWindowFactory.java: Commented methods.
	(SourceWinListener): Made class private.

2005-11-14  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (InlineViewer): Added SourceWindow parameter to
	reflect refactorings in SourceViewWidget.
	* SourceBuffer.java (setScope): Clears all previous textmarks from
	the buffer before loading new info.
	* SourceViewWidget.java (SourceViewWidget): Added SourceWindow parameter.
	(mouseEvent): Added menu option for adding a trace on a variable.
	(drawMargin): Now uses Widget.getLayout instead of creating one from scratch
	* SourceWindow.java (SourceWindow): Sets the text for the variable trace
	window as well as the title for the current source.
	(populateStackBrowser): Removed title from column.
	(addVariableTrace): Added, but currently does nothing.
	(load): Updates the text of the label over the source when a new file is
	loaded.
	* SourceWindowFactory.java (createSourceWindow): Removed debugging output.
	* Variable.java (getNext): Removed.
	(setNext): Removed.
	(getPrev): Removed.
	(setPrev): Removed.
	* VariableList.java: Removed.

2005-11-09  Adam Jocksch  <ajocksch@redhat.com>

	* PreferenceWindow.java (PreferenceWindow): Fixed bug in finding glade file.
	* SourceBuffer.java (createTags): Now looks for FUNCTION_BODY tag, puts
	mark in buffer so we can jump to it.
	(setScope): Clears function vector when new scope is loaded.
	(addFunction): Adds FUNCTION_BODY tags into DOM.
	* SourceWindow.java (SourceWindow): Now takes glade path in constructor
	in order to pass it to the Preference Window.
	(populateFunctionBox): Extracted out of constructor.
	* SourceWindowFactory.java (createSourceWindow): Now passes glade path
	to the SourceWindow constructor.

	* SourceWindowFactory.java (createSourceWindow): Now marks proper lines
	as executable.

	* SourceWindowFactory.java (createSourceWindow): Now reads in all
	.cpp files, rather than relying on data in DOMTestGUIBuilder.

	* SourceWindowFactory.java: dummyPath now defaults to the source
	directory, since the user may not be running from a 'make install'

	* SourceWindowFactory.java (createSourceWindow): Now correctly removes
	window/task pair from hashmap when the window is closed.

2005-11-08  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java: Now inherits from Window.
	(getMyTask): Added.
	(setMyTask): Ditto.
	(SourceWindow): Now takes glade object instead of array of paths.
	(populateStackBrowser): Checks to make sure line isn't null before
	checking for inline code.
	* SourceWindowFactory.java (createSourceWindow): No longer recreates
	window if it already exists, as well as creating the LibGlade object
	needed by the SourceWindow.

	* SourceWindow.java: Now correctly adds "/" inbetween glade dir and
	file name.

	* SourceViewWidget.java: Removed excess import.
	
	* testfiles/test3.cpp: Added a #define.

2005-11-07  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (hasInlineCode): Added debugging output.
	* SourceViewWidget.java (refresh): Made margin wider to include inline
	instance markers
	(drawMargin): Fixed bug where margin was only appearing in shades
	of grey, also made changes to reflect above change to refresh.
	* SourceWindow.java (SourceWindow): Now sets current line, also added
	hack to get around eclipse ecj 3.1 compiler warnings.
	
	* StackLevel.java: Added comments to methods/members
	(StackLevel): Introduced new constructor that allows partial/multi
	-line "current line"s.
	(getColStart): Added.
	(setColStart): Ditto.
	(getColEnd): Ditto.
	(setColEnd): Ditto.
	(getEndLine): Ditto.
	(setEndLine): Ditto.
	(getLine): Refactored to getStartingLine.
	* SourceWindow.java: Refactored to reflect change of getLine to 
	getStartingLine in StackLevel.
	
	* SourceBuffer.java (hasInlineCode): Removed debug output.
	(init): Now automatically calls getCurrentLine.
	(setScope): Ditto.
	(setCurrentLine): Made private, now takes starting/ending
	lines/columns.
	* SourceViewWidget (setCurrentLine): Removed.
	* SourceWindow (selectionChangedEvent): Removed call to setCurrentLine
	in SourceBuffer.
	* StackLevel.java (StackLevel): Now inializes column variables.

	* testfiles/common.h: Added.
	* testfiles: Changed files so that they could all be compiled into
	an executable.

2005-11-03  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Now takes array of image paths.
	(createActions): Now looks for images in multiple directories.
	(createSearchBar): Ditto.
	* SourceWindowFactory.java: Added.
	
	* SourceWindow.java (SourceWindow): Now prints out more informative error
	message if glade file not found.

	* SourceWindowFactory.java: Now sets default value for glade and image
	paths to look in installed directory, then source directory.
	
	* SourceWindowFactory.java: Fixed default values of glade and image paths,
	typo in earlier version.

	* SourceWindow.java (createToolBar): Workaround to display tooltips
	implemented.
	
	* SourceViewWidget.java (mouseEvent): Added menu items for adding traces
	to variable and customizing actions to be taken on a breakpoint. These
	currently do nothing but serve as a reminder to implement them later.

2005-11-02  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java: Now stores StackLevel, not just encapsulated
	DOMSource.
	(setScope): Added.
	(loadFile): Now checks to see if the source has already been parsed,
	and if so does not parse it again.
	* SourceViewWidget.java (SourceViewWidget): Now takes StackLevel, excess
	constructors removed.
	(load): Instead of a new SourceBuffer being created setScope is now called
	on the existing one.
	* SourceWindow.java (SourceWindow): Refactored to reflect change to 
	SourceViewWidget constructor.
	* StackLevel.java: Added 'parsed' member variable.
	(isParsed): Added.
	(setParsed): Added.

2005-11-01  Adam Jocksch  <ajocksch@redhat.com>
	
	* InlineViewer.java (drawMargin): Changed to use prefixes for colors
	stored in preference model.
	* PreferenceConstants.java: Instead of storing three keys for r,g, and b
	values now only one prefix is stored, onto which r g or b is appended;
	also the default value is now stored as a org.gnu.gdk.Color.
	* PreferenceWindow.java (buttonEvent): Refactored out saveColorButton,
	saveWeightCheck, and saveStyleCheck methods.
	(setupButtons): Refactored out setupColorButton, setupBoldCheckBox, and
	setupItalicsCheckBox methods.
	* SourceBuffer.java: Renamed itTag to variableTag.
	(updatePreferences): Refactored out updateTagColor and updateTagStyle
	methods.
	* SourceViewWidget.java (refresh): Refactored to use prefixes in 
	PreferenceConstants.java.
	(drawMargin): Ditto.

2005-10-31  Adam Jocksch  <ajocksch@redhat.com>

	* SourceViewWidget (mouseEvent): Changed variable display to be triggered
	by a menu, added breakpoint status to right click in margin. (bug 
	#1685, bug #1686).

	* SourceBuffer.java (createTags): Refactored to use new DOMTagTypes
	class.
	(addFunction): Ditto.
	(addVariable): Ditto.
	(addKeyword): Ditto.
	(addClass): Ditto.

2005-10-28  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java: Removed excess imports.
	(drawMargin): Removed unused variables for inline background.
	* SourceBuffer.java (addFunction): Re-implemented to use DOM.
	(addVariable): Ditto.
	(addKeyword): Ditto.
	(addClass): Ditto.
	(load): Now adds newline to buffer for lines with no text.
	(createTags): Now accepts tags with type 'function'.
	* cparser/CDTParser.java: Refactored calls to TextBuffer methods to use
	revised syntax.
	* cparser/CTagsParser.java: Ditto.
	* cparser/SimpleParser.java: Ditto.
	* testfiles/test6.cpp: Updated to sync with data in DOMTestGUIBuilder.

2005-10-27  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (isLineExecutable): Fixed off by one error.
	* SourceViewWidget.java (drawMargin): Moved compensation for off by one
	error into isLineExecutable, rather than dealing with it here.
	* SourceWindow.java: Added stop action, removed 'running' flag, changed
	run action to Action from ToggleAction.
	(createActions): Initialize stop action.
	(createMenus): Create stop action menu item.
	(createToolBar): Create stop action toolitem.
	(doRun): Now only toggles mode into 'running'.
	(doStop): Added, toggles status out of 'running'.
	

2005-10-27  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (isLineExecutable): Implimented to use the DOM.
	(isLineBroken): Ditto.
	(toggleBreakpoint): Ditto.
	(getVariable): Fixed off by one error when getting line, now returns a 
	Variable object containing information.
	* SourceViewWidget.java (drawMargin): Fixed off by one error for executable
	marks.
	* SourceWindow.java (populateStackBrowser): Changed title of side browser
	to "Stack".
	(SourceWindow): Removed reference to function combobox.

2005-10-26  Adam Jocksch  <ajocksch@redhat.com>

	* SourceBuffer.java (load): Removed extraneous newlines.
	(createTags): Fixed numerous errors with casting of DOM elements, as well
	as creation of class tags.
	* SourceViewWidget.java (load): Assigns newly created source buffer to
	member buf, stops GTK error.
	* SourceWindow.java: Added dom and stack member variables.
	(SourceViewWindow): Rearranged calls so that view is created before
	functions are parsed.
	(populateStackBrowser): Moved creation of source window to after we've
	found the bottom of the stack.
	* testfiles/test.cpp: Added '#include "common.h".
	* testfiles/test2.cpp: Ditto.
	* testfiles/test3.cpp: Ditto.
	* testfiles/test4.cpp: Ditto.
	* testfiles/test5.cpp: Ditto.
	* testfiles/test6.cpp: Ditto, changed name of function to bleh from main.
	

2005-10-26  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java (moveDown): Commented out pending reorganization
	under the DOM.
	(moveUp): Ditto.
	(init): Ditto.
	* InlineViewer.java (load): Commented out pending reorganization under
	the DOM.
	(moveDown): Ditto.
	(setSubscopeAtCurrentLine): Ditto.
	* SourceBuffer.java: Removed unncessesary member variables.
	(SourceBuffer): Now takes a DOMSource.
	(SourceBuffer): Removed constructors that took Handles and TextTagTables.
	(init): No longer initializes Vector for lines or sets priority on the
	function tag, as well as adding call to load.
	(isLineExecutable): Reimplimented using the DOM.
	(isLineBroken): Remvoed code, needs to be reimplimented using the DOM.
	(toggleBreakpoint): Ditto.
	(getVariable): Partially reimplimented using DOM, still returns null.
	(addFunction): Commented out pending rewrite using DOM.
	(addVariable): Ditto.
	(addComment): Ditto.
	(addClass): Ditto.
	(addLiteral): Renamed to addKeyword, and Ditto.
	(getLineCount): Reimplimented to use the DOM.
	(hasInlineCode): Renamed from hasInlineLines, and Ditto.
	(load): Changed to private, reimplimented to use DOM.
	(createTags): Added.
	(toggleExpanded): Removed.
	(getNumInlinedLines): Removed.
	(SourceLineReader): Removed.
	* SourceViewWidget.java (SourceViewWidget): Now takes DOMSource.
	(load): Refactored to use DOM.
	(drawMargin): Remvoed commented out code, refactored parts to use DOM.
	* SourceWindow.java (SourceWindow): Partially reimplimented to use DOM.
	(populateStackBrowser): Ditto.
	(selectionChanged): Ditto.
	* StaticParser.java (parse): Reordered arguments for no good reason.
	* cparser/CDTParser.java: Changed references of addLiteral to addKeyword.
	(mainGui): Ditto.
	* PCLocation.java: Refactored to StackLevel.java

2005-10-25  Rick Moseley  <rmoseley@redhat.com>

	* testfiles/test6.cpp: new for testing DOM/GUI

2005-10-24  Adam Jocksch  <ajocksch@redhat.com>

	* ColorConverter.java: Added javadoc comments.
	* InlineHandler.java: Ditto.
	(moveDown): Now returns void.
	(moveUp): Ditto.
	* InlineViewer.java: Refactored to reflect above changes to moveUp and
	moveDown.
	* SourceBuffer.java: Changed back to using CDTParser, hopefully will have
	bug resolved soon.
	* SourceViewWidget.java:
	(setSubscopeAtCurrentLine): Now sets expanded to true.
	(clearSubscopeAtCurrentLine): Ditto.
	(toggleChild): Refactored to account for changes to InlineHandler.
	* SourceWindow.java: Added tips member variable.
	(SourceWindow): Initialize Tooltips.
	(createSearchBar): Changes tooltips to use member instance (jg bug
	#319415)
	* cparser/CDTParser.java (parse): Removed debug output

2005-10-20  Adam Jocksch  <ajocksch@redhat.com>

	* PCLocation.java (getInlineScope): Added.
	(getParentScope): Ditto.
	(hasInlineScope): Ditto.
	* InlineHandler.java (moveDown): Removed debugging output, refactored to
	use above refactorings to PCLocation, fixed bug with next scope being
	loaded instead of inline scope.
	(showScopes): Added.
	(moveUp): Refactored code out into showScopes, 
	* SourceViewWidget.java: Created hasInlineCode member.
	(load): Now sets hasInlineCode.
	(showMargins): Inline code mark is now only drawn if hasInlineCode is set.
	* InlineViewer.java (load): Now sets hasInlineCode.
	(moveDown): Now properly loads next inline level, not next level on stack.
	(showMargin): Inline code mark not drawn if no code present (identical to
	fix in SourceViewWidget.java).

2005-10-19  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (load): Changed formatting.
	* SourceBuffer.java (loadFile): Removed old redundant lines,
	switched back to SimpleParser due to bug #1503.
	* SourceWindow.java (createToolbar): Added toolbar.enable().
	(createSearchBar): Added call to enable tooltips.
	(doStackUp): Implemented core logic of functions, now works.
	(doStackDown): Ditto.
	(doStackBottom): Ditto.
	(selectionChangedEvent): Added code to refresh SourceViewWidget.
	* cparser/CDTParser.java: Added debug output.

2005-10-17  Adam Jocksch  <ajocksch@redhat.com>

	* PreferenceWindow.java (setupButtons): Show toolbar now defaults to false.
	
	* SourceWindow (SourceWindow): Find box is no longer shown on start,
	fixing bug #1480, toolbar is only shown according to user preference.
	(refresh): Added change to fix said bug.
	(setupStackBrowser): No longer shows find box if it is hidden.

2005-10-14  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java: Added Copyright/License information.
	
	* InlineViewer.java: Ditto.
	
	* PCLocation.java: Ditto.
	
	* PreferenceConstants.java: Ditto.
	
	* SourceBuffer.java: Ditto.
	
	* SourceWindow.java (SourceWindow): Moved code to create PCLocation out
	of constructor.
	(populateStackBrowser): Made public, now recreates the SourceViewWidget
	when stacks are refreshed.
	
	* SourceWinRunner (main): Now creates PCLocation data.

2005-10-13  Adam Jocksch  <ajocksch@redhat.com>

	* PCLocation.java: Added inlineScope and parentScope variables.
	(setNextScope): Removed.
	(setPrevScope): Removed.
	(link): Renamed to addNextScope.
	(addInlineScope): Added.
	
	* InlineHandler.java: All methods now refernece PCLocation.inlineScope over
	PCLocation.nextScope.
	(moveDown): No longer assumes existance of inlined scopes.
	
	* SourceViewWidget.java (load): No longer stays expanded when new file is 
	loaded.
	
	* SourceWindow.java: Now implements TreeSelectionListener.
	Member variable dataColumns added.
	(SourceWindow): Creation of PCLocation objects now uses refactored methods.
	(SourceWindow): Call to populateStackBrowser(PCLocation) added.
	(populateStackBrowser): Added.
	(addEvents): Adds TreeSelectionListener to stack browser.
	(selectionChangedEvent): Added.
	

2005-10-12  Adam Jocksch  <ajocksch@redhat.com>

	* Messages.java: Moved to ../common.

	* messages.properties: Ditto.

	* Updated all necessary files to reflect above refactoring.

2005-10-12  Adam Jocksch  <ajocksch@redhat.com>

	* Messages.java: Now uses PropertyResourceBundle and gets path to
	messages.properties from Config.PKGDATADIR.

2005-10-12  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Now takes an array of possible
	paths to glade files as well as a path for image files.

2005-10-11  Adam Jocksch  <ajocksch@redhat.com>

	* glade: Moved all glade files (frysk_source.glade{p},
	frysk_source_prefs.glade{p}) to ../glade.

2005-10-11  Adam Jocksch  <ajocksch@redhat.com>

	* testfiles: Added.

	* testfiels/test.cpp: Added.

	* testfiels/test2.cpp: Added.

	* testfiles/test3.cpp: Added.

	* testfiles/test4.cpp: Added.

	* testfiles/test5.cpp: Added.

2005-10-11  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (createActions): Accelerators are now added to 
	each action.
	(createMenus): Removed commented out accelerator code.
	(createToolbar): Removed unnecessary comments.

2005-10-07  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java: Removed member CurrentBottom, added firstVisible
	and lastVisible.
	(init): Changed to match above refactoring.
	(moveDown): Number of scopes visible now based on prefernce, changed
	to reflect this.
	(moveUp): Ditto.

	* InlineViewer.java (load): Added check to automatically hide ellipses.
	(moveDown): Added.
	(setSubscopeAtCurrentLine): Sets so the child does not show ellipses.

2005-10-05  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (load): Added note of how many scopes hidden to 
	ellipsis.
	(setSubscopeAtCurrentLine): Now sets expanded to be true
	(drawMargin): Fixed off by one error when ellipsis were shown.

	* PCLocation.java (getDepth): Added.

2005-10-04  Adam Jocksch  <ajocksch@redhat.com>

	* PreferenceConstants.java: Added default values for r,g,b triplets.
	
	* SourceBuffer.java (updatePreferences): Uses default values from 
	PreferenceConstants.java.
	
	* SourceViewWidget.java (refresh): Ditto.
	
	* PreferenceWindow.java (setupButtons): Ditto.

2005-10-04  Adam Jocksch  <ajocksch@redhat.com>

	* GladeConstants.java: Deleted.
	
	* SourceWindow.java: Ditto.
	
	* PreferenceWindow.java: Constants refactored back in.
	Renamed constants referring to 'Literals' to refer to 'keywords'.
	
	* glade/frysk_source_prefs.glade: Changed name of literal* widgets to
	keyword*.

2005-10-03  Adam Jocksch  <ajocksch@redhat.com>

	* GladeConstants.java: Added.
	
	* SourceWindow.java: Refactored constants to GladeConstants.java.
	
	* SourceViewWidget.java: Ditto.
	
	* PreferenceWindow.java: Ditto.
	
	* PreferenceConstants.java: Added.
	
	* SourceViewWidget.javaL Refactored constants to PreferenceConstants.java.

2005-10-03  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (launchPreferenceWindow): Now calls refresh in 
	SourceWindow.
	(refresh): Added.
	
	* PreferenceWindow.java (setupButtons): Status of "Show Toolbar" now
	updated.
	(buttonEvent): Status of "Show Toolbar" saved into prefs model.

2005-09-30  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer (drawMargin): Added code to draw margin for scopes with
	ellipsis visible.

2005-09-30  Adam Jocksch  <ajocksch@redhat.com>

	* SourceViewWidget.java (drawMargin): Changed to protected.
	(drawMargin): Fixed bug where gap for inline code in line numbers wasn't
	being obeyed (bug #1398)
	(setSubscopeAtCurrentLine): Added checks for pre-existing child anchor.
	(clearSubscopeAtCurrentLine): Nullifies old child anchor.
	(mouseEvent): Removed unecesary refresh.
	
	* InlineHandler.java (moveDown): Fixed bug where upper scope wouldn't
	change.
	(moveDown): Removed unnecesary refresh commands.
	(moveUp): Ditto.
	
	* InlineViewer.java (drawMargin): Added.
	(toggleChild): Calls now set expanded.

2005-09-29  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java (moveDown): Refactored ellipsis code into 
	InlineViewer::load.
	(moveUp): Ditto.
	
	* InlineViewer (load): Added ellipsis code from InlineHandler.
	(InlineViewer): Added constructor that takes boolean flag to show
	ellipsis.

2005-09-29  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java (moveDown): Extracted sections into 
	SourceViewWidget::setSubscopeAtCurrentLine.
	(moveUp): Ditto, also moved common fields out of if statements.
	(moveUp(SourceViewWidget)): Refactored parts into 
	SourceViewWidget::clearSubscopeAtCurrentLine
	
	* SourceViewWidget.java (setSubscopeAtCurrentLocation): Added.
	(clearSubscopeAtCurrentLocation): Ditto.
	
	* InlineViewer (setSubscopeAtCurrentLoction): Added.
	

2005-09-29  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java (moveDown): Moved the ellipsis into the InlineViewer.
	(moveUp): Ditto.

2005-09-28  Adam Jocksch  <ajocksch@redhat.com>

	* InlineHandler.java (moveUp): Fixed errors keeping track of current scope.
	(moveDown): Ditto.
	(moveDown): Added ellipsis w/ tooltip when levels of code are hidden.
	
	* SourceViewWidget.java (toggleChild): Removed debugging output.
	(drawMargin): First attempt at putting a background behind the 'i' in margin.
	
	* SourceBuffer.java (setCurrentLine): Removed debugging output.
	
	* cparser/CDTParser.java (ParserCallBack): Removed debugging output.

2005-09-26  Adam Jocksch  <ajocksch@redhat.com>

	* InlineViewer.java (load): Added.

	* InlineHandler.java: Added.

	* SourceViewWidget.java (load): Removed debug output.
	Now initializes InlineHandler to deal with inlined code.
	(toggleChild): Now uses InlineHandler::toggleTopmost;
	(drawMargin): refactored to removed excess variables.
	(drawMargin): Changed sign for inlined code to 'i'.

	* SourceWindow.java (SourceWindow): Changed example text to load.

	* PCLocation.java (getInlineData): Refactored to getNextScope.

2005-09-26  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java: Commented out (for now) unused import to fix warning.

	* PCLocation.java: Added depth identifier.
	Changed next/prevScope to protected.

2005-09-26  Adam Jocksch  <ajocksch@redhat.com>

	* PCLocation.java: Added.

	* SourceBuffer.java: Changed start/endCurrentLine to TextMarks.
	(setCurrentLine): Changed to reflect above change to TextMark.
	(getCurrentLine): Ditto.

	* SourceViewWidget.java: Added member 'inlined' for inlined code.
	(SourceViewWidget):  Changed handling of mouse events in margin to 
	expand inlined code.
	(load): Added.
	(toggleChild): Added.
	(drawMargin): Commented out unused (for now) variables.
	(getHeight): Added.

	* SourceWindow.java (SourceWindow): Use PCLocation to load data into
	SourceViewWidget.

2005-09-22  Andrew Cagney  <cagney@redhat.com>

	* SourceWindow.java: Import frysk.Config, instead of
	frysk.bin.Config.

2005-09-15  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (createMenus): Added casts to fix compilation error.
	(createToolbar): Ditto.

2005-09-14  Adam Jocksch  <ajocksch@redhat.com>

	* StaticParser.java (parse): Removed public identifier to get rid of compiler warning.

	* SourceViewWidget.java: Added constants for class specifier properties.
	(drawMargin): Added colored margins for expanded inline code.
	
	* SourceBuffer.java (updatePreferences): Changed to reference new constants in SourceViewWidget.java.

2005-09-14  Adam Jocksch  <ajocksch@redhat.com>

	* SourceCodeLine.java: Added ability to have inlined code.
	(addInlinedLine): Added.
	(getInlinedLines): Ditto.
	(hasInlinedLines): Ditto.
	(isExpanded): Ditto.
	(getNumInlinedLines): Ditto.

	* SourceBuffer.java: Added Inline Code, class identifier, and Member Variable tags.
	(loadFile): Added small test of inlining code to hardcoded line.
	(loadFile): Made switch to CDTParser from SimpleParser.
	(updatePreferences): Loads values for class and inline tags.
	(addFunction): Added overloaded version that takes offset from start of file.
	(addVariable): Changed to treat variable offset as from start of file
	(addLiteral): Added overloaded version that takes offset from start of file.
	(addLiteral): Fixed typo in name of previous version.
	(addClass): Added.
	(hasIndentedLines): Added.
	(isExpanded): Added.
	(toggleExpanded): Added.
	(getNumInlinedLines): Added.
	(getLineCount): Added overloaded version that can optionally include inlined code.

	* SourceViewWidget.java: Added constants for inline code color.
	(SourceViewWidget): For MouseListener type of button now filtered at lower level.
	(SourceViewWidget): Left clicks now detected in margin, used to trigger inline expansion.
	(drawMargin): Pushed common variables to higher scope in function.
	(drawMargin): Added ability to skip over expanded inlined code.
	(drawMargin): Draws mark, color in margin if line contains inlined code.

	* SourceWindow.java (SourceWindow): Now try a second location for glade file.

	* Variable.java: Changed isGlobal to isMember.
	(isGlobal): Refactored to isMember.

	* cparser/CDTParser.java: Added.

2005-09-13  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Fixed typo in loading glade file.  

2005-09-13  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java (SourceWindow): Changed glade path to refer to frysk.bin.Config.GLADEPATH.

2005-09-09  Adam Jocksch  <ajocksch@redhat.com>

	* cparser/CTagsParser.java: Added comments.
	(escapeChars): Removed.
	
	* SourceViewWidget.java: Created new constants for comment, global tags
	
	* SourceBuffer.java (getNextLine): Removed extraneous variables.
	Refactored strings into constants.
	
	* SourceWindow.java (SourceWindow): Window now hidden until loading complete.
	Excess constants pruned.

2005-09-09  Andrew Cagney  <cagney@redhat.com>

	* Move com/redhat/fedora/frysk/gui/srcwin/ to frysk/gui/srcwin/.

2005-09-08  Andrew Cagney  <cagney@redhat.com>

	* cparser/CDTParser.java: Delete.
	* cparser/SimpleParser.java: Ditto.
	* SourceBuffer.java: Revert switch to CDTParser.

2005-09-07  Adam Jocksch  <ajocksch@redhat.com>

	* SourceWindow.java: moved from com.redhat.fedora.frysk.gui
	* cparser/SimpleParser.java (parse): added support for bitshift and quote characters
	* cparser/CDTParser.java: Added
	* SourceBuffer.java (loadFile): changed to use CDTParser
	(addFunction): Added overloaded method to take char offset from start of file
	(addVaraible): Changed to use only character offset, not line number

2005-09-07  Adam Jocksch  <ajocksch@redhat.com>

	* cparser/SimpleParser.java: Added to repository

	* SourceBuffer.java (loadFile): Changed to use SimpleParser instead of CTagsParser

	* SourceWindow.java (createActions): Changed icon for run action to run.png

2005-09-06 Adam Jocksch <ajocksch@redhat.com>

	* cparser: removed all but CTagsParser.java

	* VariableLocation.java: changed to Variable.java
	now inherits from CodeItem

	* CodeItem.java: Added

	* StaticParser.java: Added

2005-09-01 Adam Jocksch <ajocksch@redhat.com>
	
	* SourceWindow.java: added createActions, createMenus
	(createToolbar): toolbar now created from Action objects
	(attachEvents): removed calls to attach to menu/toolbar items
	(doRun): status of Actions now toggled
	(debuggerCommand): removed
	(menuEvent): removed
	(toolButtonEvent): removed
	removed MenuListener and ToolButtonListener interfaces

2005-08-23 Adam Jocksch <ajocksch@redhat.com>
	
	* SourceViewWidget.java (mouseEvent): Added code to toggle breakpoint

2005-08-22 Adam Jocksch <ajocksch@redhat.com>
	
	* SourceViewWidget.java: Added "mouseEvent"
	(initialize): Added self as a MouseEvent Listener
	
	* SourceBuffer.java (processFunction): fixed repeated parsing bug
	
	* VariableList.java: Added
	
	* VariableLocation.java: Added

2005-08-17 Adam Jocksch <ajocksch@redhat.com>
	
	* SourceBuffer.java (updatePreferences): replaced set*Color
	(SourceBuffer): Moved initialization of TextTags here from getData
	
	* PreferenceWindow.java 
	(setupButtons): added syntax highlighting options
	(buttonEvent): Saves syntax highlighting options
	
	*SourceViewWidget.java 
	(refresh): added call to SourceBuffer::updatePreferences

2005-08-18 Adam Jocksch <ajocksch@redhat.com>

	* SourceWindow.java: Added dummy methods for debugger calls
	(menuItemEvent): Added listeners to menu items

2005-07-15  Adam Jocksch <ajocksch@redhat.com>
	
	* SourceText.java 
	(SourceTest): Removed previously commented-out observer
	
2005-07-14  Adam Jocksch  <ajocksch@redhat.com>

	* SourceTest.java - added to repository, runs Source window mockup
	
	* SourceBuffer.java - Added displaying of line numbers next to lines
	
	* SourceViewWidget.java - Removed double-click/right-click add breakpoints to fix JVM crashes on quit

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
End:
