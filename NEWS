
			Frysk
			-----

		http://sourceware.org/frysk/

Frysk is an execution-analysis technology being developed using Java
and C++.  It is aimed at providing developers and system
administrators with the ability to examine and analyze multi-host,
multi-process, and multi-threaded systems while they are running.

--

Release 0.3, 2008-05-09

- Exported a prototype of low level watchpoint api on IA32,X8664 
   (PPC* will be covered by IBM)
- Implemented the watch command which exposes the watchpoint api in fhpd.
- Updated various frysk man pages.
- Created ProcRunUtil and re-based fcatch,fstep,ferror ontop of it.
- Added ability to kill procs from fhpd.
- Solidified passing parameters to start/run commands and reusing history.
- Added support for elf symbol look-ups.
- Removed the CDT parser from frysk.
- Rewritten ftrace to use more frysk infrastructure.
- Adapted frysk symbol search code so that it can be used by breakpoints, 
   as well as expression evaluation.
- Improved and tested stepping, particularly stepping through signal handlers.
- Imported a newer version of upstream elfutils.
- Fixed breakpoints to work correctly through forks.

--

Post-Release 0.2 Updates:

-> 2004-04-24 - New support in FHPD: sysroot

   Frysk now also supports finding libraries in a special system
   directory heirarchy as well as the previously supported source files
   and debuginfo files.  This is specified via the -sysroot option.

--

-> 2004-04-16 - New command in FHPD: watch

   Use to set watchpoints on expressions or variables. This stops
   program execution when memory location associated with the
   expression is written to or read from.

--

Release 0.2, 2008-04-02:

This initial release of frysk includes:

-> command line utilities:

   fauxv      - print the auxiliary vector (new)
   fcatch     - catch and print the stack of a crashing process
   fcore      - extract a core file from a running process (faster, more correct)
   fdebuginfo - list debug-info requirements of a process (new)
   fdebugrpm  - install debug-info requirements of a process (new)
   ferror     - catch and back-trace error calls (new)
   fexe       - print the executable path
   fmaps      - print the address map (new)
   fstack     - print each thread's stack (supports in-line back-traces)
   fstep      - single-step a process
   ftrace     - trace a processes system and (new) library calls

   Known limitations: large resident set size; large executable size.

-> Prototype command line debugger: fhpd

   For single threaded programs, FHPD can: print the value, type, and
   location, and modify the value of, arbitrarily located variable
   (complex DWARF location expressions); correctly handle very-large
   integers (>64-bit) and large floats (80-bit); display in-line
   information in back-traces; control processes with the commands
   load, core, dump, run, step, break, go, detach, kill, list, focus.

   In addition to the command-line utility restrictions, the HPD has
   the following known limitations: disassembler missing; limited
   type-cast support in expressions; limited multi-thread support.

-> Prototype visual debugging and monitoring tool (frysk)

   Known limitations: work-flow limited to live processes (examining
   core files, or creating processes is possible but very
   non-intuitive).

-> Prototype test-suite (funit)

   Known limitations: test that are working in-tree fail when
   installed.

--
