# This file is part of the program FRYSK.
#
# Copyright 2005, 2006, 2007, Red Hat Inc.
# Copyright 2007 Oracle Corporation.
#
# FRYSK is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# FRYSK is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with FRYSK; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
# 
# In addition, as a special exception, Red Hat, Inc. gives You the
# additional right to link the code of FRYSK with code not covered
# under the GNU General Public License ("Non-GPL Code") and to
# distribute linked combinations including the two, subject to the
# limitations in this paragraph. Non-GPL Code permitted under this
# exception must only link to the code of FRYSK through those well
# defined interfaces identified in the file named EXCEPTION found in
# the source code files (the "Approved Interfaces"). The files of
# Non-GPL Code may instantiate templates or use macros or inline
# functions from the Approved Interfaces without causing the
# resulting work to be covered by the GNU General Public
# License. Only Red Hat, Inc. may make changes or additions to the
# list of Approved Interfaces. You must obey the GNU General Public
# License in all respects for all of the FRYSK code and other code
# used in conjunction with FRYSK except the Non-GPL Code covered by
# this exception. If you modify this file, you may extend this
# exception to your version of the file, but you are not obligated to
# do so. If you do not wish to provide this exception without
# modification, you must delete this exception statement from your
# version and license this file solely under the GPL without
# exception.

# Empty default rule so that any missing files are ignored by make.
# Instead the command that needs to use the missing file will die.
# Doing this means that .Po files that contain missing .java files get
# re-generated, but doing this might also also mean that things
# occasionally and mysteriously die with non-existant files.
.DEFAULT:
	@echo " >>>>> .DEFAULT: $@ <<<<<"

# CCASCOMPILE isn't documented (and is called CPPASCOMPILE in automake 1.10)
# So use our own definition.
FRYSK_ASCOMPILE = $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)

# Initialize everything to empty and then use += to add things in.

noinst_SCRIPTS =
SUFFIXES =
BUILT_SOURCES = 
CLEANFILES = $(BUILT_SOURCES)
CLEANDIRS =
MOSTLYCLEANFILES = core.[1-9]*
noinst_PROGRAMS =
noinst_DATA =
bin_PROGRAMS =
bin_SCRIPTS =
sbin_PROGRAMS =
sbin_SCRIPTS =
pkgdata_PROGRAMS =
pkglib_PROGRAMS =
pkglib_SCRIPTS =
pkglibdir = $(libdir)/@PACKAGE@
pkglib32_PROGRAMS =
pkglib32dir = $(lib32dir)/@PACKAGE@
pkglib64dir = $(lib64dir)/@PACKAGE@
gladedir = $(pkgdatadir)/glade
helpdir = $(datadir)/gnome/help/frysk/C
imagesdir = $(pkgdatadir)/images
GENERATED_DO_NOT_JLINT =
noinst_LIBRARIES =
man_MANS =
LDADD = 
ANTLR_BUILT =
SCRIPT_BUILT =
JAVAH_BUILT =

check_SCRIPTS =
check_PROGRAMS =
TESTS =
# Space separated list of .jar files that contain java code.x
GEN_CLASSPATH =
# Space separated list of directories that contain java code.
GEN_SOURCEPATH = $(srcdir) $(top_builddir)
empty=
space=$(empty) $(empty)
JAVAROOT = classes

GEN_GCC_BUILDTREE_RPATHS = $(top_builddir)/elfutils/libdw

# The list of libraries for the GCJ programs is different to that of
# the standalone .c programs.  Accumulate the GCJ list in
# GEN_GCJ_LDADD_LIST.

GEN_GCJ_LDADD_LIST =

# Take the LDADD list and transform it into a dynamic shared library
# list.  This can then, in turn be converted into an in-build-tree
# RPATH to wire into in-build-tree program that need to access those
# shared libraries.

# Convert LDADD's .a into -L<dir> -llib
GEN_GCJ_SO_FLAGS = \
	$(foreach lib, $(GEN_GCJ_LDADD_LIST), \
		$(if $(filter -L%,$(lib)), $(lib)) \
		$(if $(filter -l%,$(lib)), $(lib)) \
		$(if $(filter %.a,$(lib)), \
			$(patsubst %,-L%,$(dir $(lib))) \
			$(patsubst lib%.a,-l%,$(notdir $(lib))) \
			) \
		)
# Just the directories.
GEN_GCJ_SO_DIRS = \
	$(patsubst -L%,%,$(filter -L%, $(GEN_GCJ_SO_FLAGS)))
# Add absolute versions of each directory.
GEN_GCJ_BUILDTREE_RPATHS = \
	$(patsubst %/./,%, $(patsubst %/.,%, \
		$(foreach lib, $(GEN_GCJ_SO_DIRS), \
			$(if $(filter /%,$(lib)), $(lib)) \
			$(if $(filter .%,$(lib)), \
				$(patsubst %,@abs_top_builddir@/%, $(lib)) \
				$(lib) \
				) \
			) \
		))
GEN_GCJ_BUILDTREE_RPATH = \
	$(subst $(space),:,$(sort $(GEN_GCJ_BUILDTREE_RPATHS)))
GEN_GCJ_BUILDTREE_RPATH_FLAGS = \
	-Djava.library.path=$(GEN_GCJ_BUILDTREE_RPATH) \
	-Wl,-rpath,$(GEN_GCJ_BUILDTREE_RPATH):$(GEN_GCC_BUILDTREE_RPATHS)

# Prevent GCJ from creating child processes (or at least a feeble
# attempt) -- children are created for both demangling and for
# addr2line lookups.  Without this FRYSK and GCJ end up fighting over
# who owns SIGCHLD.
GEN_GCJ_NO_SIGCHLD_FLAGS = \
	-Dgnu.gcj.runtime.NameFinder.demangle=false \
	-Dgnu.gcj.runtime.NameFinder.use_addr2line=false

# Get some common macro definitions

ACLOCAL_AMFLAGS = -I common/m4

# Make up some javacflags

SOURCEPATH = $(subst $(space),:,$(strip $(GEN_SOURCEPATH)))
CLASSPATH = $(subst $(space),:,$(strip $(GEN_CLASSPATH)))
DBPATH = $(subst $(space),:,$(strip \
	$(patsubst %.jar,%.db,$(filter %.jar,$(GEN_CLASSPATH))) \
	$(foreach dir,$(patsubst %/$(JAVAROOT),%,$(filter-out %.jar,$(GEN_CLASSPATH))),$(dir)/$(notdir $(dir)).db) \
	))

# XXX: GCJ: I think there should be a -Wextraneous-throws; I think
# -Wno-deprecated is backward; I think -Wredundant-modifiers is broken
# with gcc4.  It appears to complain about abstract methods in a
# non-abstract class when the class actually is abstract.

AM_GCJFLAGS = \
	$(patsubst %,-I%,$(GEN_SOURCEPATH) $(GEN_CLASSPATH)) \
	-fPIC \
	$(ZZZ)


AM_CXXFLAGS = \
	-I$(srcdir) \
	-I$(srcdir)/../frysk-imports/include \
	-I$(top_builddir) \
	-I$(srcdir)/../frysk-imports/elfutils/libelf \
	-I$(srcdir)/../frysk-imports/elfutils/libdw \
	-I$(srcdir)/../frysk-imports/elfutils/libdwfl \
	-I$(srcdir)/../frysk-imports/libunwind/include \
	-I$(top_builddir)/../frysk-imports/libunwind-i386/include \
	-I$(top_builddir)/../frysk-imports/libunwind-x86_64/include \
	-I$(top_builddir)/../frysk-imports/libunwind-ppc64/include \
	-I$(top_builddir)/../frysk-imports/libunwind-ppc32/include \
	-fPIC \
	$(ZZZ)

AM_CFLAGS = \
	-I$(top_srcdir)/../frysk-imports/include \
	-I$(srcdir) \
	-I$(top_builddir) \
	-fPIC \
	-fasynchronous-unwind-tables \
	$(ZZZ)

AM_CCASFLAGS = \
	-I$(top_srcdir)/../frysk-imports/include \
	$(ZZZ)


# Within the BUILT_SOURCES, need to force some dependencies.  For
# instance: JAVAH isn't run until all script-generated files it may
# need to import have been generated.

# Use GMAKE's order-only prerequisite feature.

.PHONY: built-sources
built-sources: $(BUILT_SOURCES)
$(ANTLR_BUILT): | $(SCRIPT_BUILT)
$(JAVAH_BUILT): | $(SCRIPT_BUILT) $(ANTLR_BUILT)


# Rules for building a .java file from any of a .mkclass file, a
# .mkenum file, or a .shenum script.  This lets us specify CLASS.java
# directly in the BUILT_SOURCES list.

MKENUM = $(srcdir)/common/mkenum.sh

SUFFIXES += .mkenum
.mkenum.java:
	rm -f $*.tmp
	mkdir -p `dirname $*`
	$(SHELL) $(MKENUM) < $(srcdir)/$*.mkenum > $*.tmp $@
	chmod a-w $*.tmp
	mv -f $*.tmp $@

SUFFIXES += .shenum
.shenum.java:
	rm -f $*.tmp
	mkdir -p `dirname $*`
	CC='$(CC)'; export CC ; \
	$(SHELL) $< | $(SHELL) $(MKENUM) > $*.tmp $@
	chmod a-w $*.tmp
	mv -f $*.tmp $@


# Rules for generating a file by running a shell script.

SUFFIXES += .java-sh
.java-sh.java:
	rm -f $*.tmp
	mkdir -p `dirname $*`
	CC='$(CC)'; export CC ; \
	$(SHELL) $< > $*.tmp $@
	chmod a-w $*.tmp
	mv -f $*.tmp $@
SUFFIXES += cxx-sh
.cxx-sh.cxx:
	rm -f $*.tmp
	mkdir -p `dirname $*`
	CC='$(CC)'; export CC ; \
	$(SHELL) $< > $*.tmp $@
	chmod a-w $*.tmp
	mv -f $*.tmp $@
SUFFIXES += ..c-sh
.c-sh.c:
	rm -f $*.tmp
	mkdir -p `dirname $*`
	CC='$(CC)'; export CC ; \
	$(SHELL) $< > $*.tmp $@
	chmod a-w $*.tmp
	mv -f $*.tmp $@


# Similar to autoconf's config.status --file=NEW:OLD but with all
# variables expanded.

# Don't be confused by top_builddir and top_srcdir, they are actually
# the directory corresponding to current sub-directory (frysk-gui,
# frysk-core, ...).  Instead there is root_srcdir.

SUBST_SED = sed \
		-e 's,[@]prefix[@],@prefix@,g' \
		-e 's,[@]bindir[@],@bindir@,g' \
		-e 's,[@]libdir[@],@libdir@,g' \
		-e 's,[@]datadir[@],@datadir@,g' \
		-e 's,[@]builddir[@],@top_builddir@,g' \
		-e 's,[@]srcdir[@],@top_srcdir@,g' \
		-e 's,[@]root_srcdir[@],$(dir $(top_srcdir)),g' \
		-e 's,[@]abs_root_srcdir[@],$(dir $(abs_top_srcdir)),g' \
		-e 's,[@]abs_builddir[@],@abs_top_builddir@,g' \
		-e 's,[@]abs_srcdir[@],@abs_top_srcdir@,g' \
		-e 's,[@]gladedir[@],$(gladedir),g' \
		-e 's,[@]helpdir[@],$(helpdir),g' \
		-e 's,[@]imagesdir[@],$(imagesdir),g' \
		-e 's,[@]pkgdatadir[@],$(pkgdatadir),g' \
		-e 's,[@]pkglibdir[@],$(pkglibdir),g' \
		-e 's,[@]pkglib32dir[@],$(pkglib32dir),g' \
		-e 's,[@]pkglib64dir[@],$(pkglib64dir),g' \
		-e 's,[@]pkgincludedir[@],$(pkgincludedir),g' \
		-e 's,[@]GEN_PACKAGENAME[@],$(GEN_PACKAGENAME),g' \
		-e 's,[@]VERSION[@],$(VERSION),g' \
		-e 's,[@]target_cpu[@],@target_cpu@,g'

SUBST = \
	mkdir -p `dirname $@` ; \
	rm -f $@.tmp ; \
	touch $@.tmp ; \
	case "$<" in \
		*.java|*.cxx|*.c) \
			echo '// Generated from: $<'	>> $@.tmp ; \
			echo ''				>> $@.tmp ; \
			;; \
		*.sh) \
			echo '\#! /bin/sh'		>> $@.tmp ; \
			echo '\# Generated from: $<'	>> $@.tmp ; \
			echo ''				>> $@.tmp ; \
			chmod a+x $@.tmp ; \
			;; \
		*.py) \
			echo '\#! /usr/bin/env python'	>> $@.tmp ; \
			echo '\# Generated from: $<'	>> $@.tmp ; \
			echo ''				>> $@.tmp ; \
			chmod a+x $@.tmp ; \
			;; \
	esac ; \
	$(SUBST_SED) < $< 				>> $@.tmp ; \
	chmod a-w $@.tmp ; \
	mv -f $@.tmp $@

SUFFIXES += ..java-in
.java-in.java:
	$(SUBST)
SUFFIXES += .cxx-in
.cxx-in.cxx:
	$(SUBST)
SUFFIXES += ..c-in
.c-in.c:
	$(SUBST)
TestRunner.java: common/TestRunner.java-in
	$(SUBST)
$(GEN_SOURCENAME)/JUnitTests.java: files-java.list
	mkdir -p $(GEN_SOURCENAME)
	rm -f $@.tmp
	touch $@.tmp
	echo >> $@.tmp 'package $(GEN_PACKAGENAME);'
	echo >> $@.tmp 'import java.util.LinkedList;'
	echo >> $@.tmp '/** JUnit tests for $(GEN_DIR) directory.  */'
	echo >> $@.tmp 'public class JUnitTests'
	echo >> $@.tmp '{'
	echo >> $@.tmp '  public static LinkedList get ()'
	echo >> $@.tmp '  {'
	echo >> $@.tmp '    LinkedList list = new LinkedList ();'
	grep \
		-e '\/Test[A-Z].*\.java$$' \
		-e '\/Stress[A-Z].*\.java$$' \
		files-java.list \
	| sed -e "s|$(srcdir)/||" -e "s|^./||" \
	| grep -v \
		-e 'TestLib' \
		-e 'TestCase' \
		-e 'TestBed' \
	| sed \
		-e 's,/,.,g' \
		-e 's,.java$$,.class,' \
		-e 's,\(.*\),    list.add(\1);,' \
	>> $@.tmp
	echo >> $@.tmp '    return list;'
	echo >> $@.tmp '  }'
	echo >> $@.tmp '}'
	mv -f $@.tmp $@

# Generate one or more .h files, one per named class, and using CNI,
# from the corresponding .java file.  Anonymous classes are pruned.

# Need to store the intermediate .class files in a separate directory
# as otherwise GCJ will include a possibly out-dated .class file
# instead of the latest .java file leading to screwed up dependencies.

.java.h:
	b=`basename $*` ; \
	d=`dirname $*` ; \
	tmpdir=$$b.tmp ; \
	rm -rf $$tmpdir ; \
	mkdir -p $$tmpdir ; \
	$(GCJCOMPILE) -C -d $$tmpdir '$<' || exit 1 ; \
	classes=`cd $$tmpdir; find $$d/$$b*.class \
		    -name '*\$$[0-9]*' -prune \
		    -o -name $$b.class -print \
		    -o -name $$b'\$$*'.class -print \
		    | sed -e 's,.class$$,,'`; \
	echo $$classes ; \
	for class in $$classes ; do \
		outputdir=`dirname $$class`; \
		outputfile=`basename $$class`.h; \
		echo "$$class => $$outputdir/$$outputfile"; \
		rm -f $$outputdir/$$outputfile ; \
		$(GCJH) -I $$tmpdir \
			-o $$outputdir/$$outputfile \
			$(GCJHFLAGS) $$class ; \
	done ; \
	rm -rf $$tmpdir

# Shared library rule (for moment assume that .a contains PIC code).
SUFFIXES += .so
.a.so:
	soname=`basename $@` ; \
	$(CC) -shared -o $@.tmp \
		-Wl,--whole-archive,$<,--no-whole-archive \
		-Wl,--soname,$$soname,-z,-defs
	if readelf -d $@.tmp | fgrep -q TEXTREL; then exit 1; fi
	mv $@.tmp $@

# Clueless automake: Use a phony DATA entry to convince AUTOMAKE that
# it really should install a .so file into LIBDIR.  The obvious
# choice, lib_LIBRARIES, attracts an error because .so isn't a valid
# extension (serious!); mean while LTLIBRARIES insists that the world
# should use LIBTOOL.

solibdir = $(libdir)
solib_PROGRAMS =

# The shared java directory (typically /usr/share/java/; contains
# things like .jar files.

javadir = $(datadir)/java
java_DATA =

# Assembler rule.

.S.o:
	$(FRYSK_ASCOMPILE) -c -o $@ $<

# Hack to save us constantly editing this file.  The assumption is
# that all .java and .cxx files are always built.  Recursively call
# make to ensure that Makefile is up-to-date.

$(srcdir)/Makefile.gen: $(srcdir)/common/Makefile.gen.sh
	cd $(srcdir) && ./common/Makefile.gen.sh $(GEN_ARGS)
.PHONY: autogen
autogen: clean
	$(SHELL) $(srcdir)/autogen.sh

# Given a .jar, just convert it into a .o, and a .db

SUFFIXES += .jar
.jar.o:
	$(GCJCOMPILE) -fjni -c $<

# Since automake only adds GCJCOMPILE to Makefile.in when its seen
# .java source, provide our own definition.
GCJCOMPILE ?= $(GCJ) $(AM_GCJFLAGS) $(GCJFLAGS)

SUFFIXES += .db
.jar.db:
	$(GCJ_DBTOOL) -n $@.tmp
	$(GCJ_DBTOOL) -a $@.tmp $*.jar lib$*.so
	mv $@.tmp $@

# Given a .java file convert it to a .o file.

# XXX: GCJ has a bug where it totally scrambles nested classes with
# identical names.  Reject any code with duplicate class names.

# XXX: GCJ has a bug where, when given a -Werror fail, it still exits
# with success.  Hack around this by, when -Werror was specified,
# saving the message in a log file and then checking that it is empty.

.java.o:
if HAVE_JV_SCAN
	dups=`$(JV_SCAN) --list-class $< \
		| tr '[ ]' '[\n]' \
		| sed -n -e 's,^.*$$\([A-Z]\),\1,p' \
		| sort | uniq -d` ; \
	if test x"$$dups" != x ; then \
		echo "Duplicate class names tickle a GCJ bug: $$dups" ; \
		exit 1 ; \
	fi
endif
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`; \
	if $(GCJCOMPILE) -MT $@ -MD -MP -MF "$$depbase.Tpo" -c -o $@ $< 2>&1 \
	   | tee $*.log ; then : ; else \
		rm $*.log ; \
		exit 1 ; \
	fi ; \
	if test -s $*.log \
	   && expr " $(GCJCOMPILE) " : '.* -Werror ' > /dev/null ; then \
		rm -f "$$depbase.Tpo"; \
		rm -f $*.log ; \
		rm -f $@ ; \
		exit 1 ; \
	fi ; \
	mv -f "$$depbase.Tpo" "$$depbase.Po"; \
	rm -f $*.log

# Rule for generating ANTLR output that compiles cleanly using the
# current compiler.  The problem here is that raw ANTLR output
# contains compiler warnings such as unused-variable - fix this by
# running the generated files through the compiler and then "fix" the
# warnings.  Reuse the tmp directory for successive runs on related .g files.

ANTLR = $(JAVA) \
	-classpath @abs_builddir@/../frysk-imports/antlr.jar \
	antlr.Tool

SUFFIXES += .antlred .g
.g.antlred:
	@echo ""
	@echo Creating working directory ...
	@echo ""
	@d=`dirname $*` ; t=$*.tmp ; set -xe ; \
	mkdir -p $$t/$$d
	@echo ""
	@echo Running antlr in output directory to pick up previously generated files ...
	@echo ""
	@d=`dirname $*` ; t=$*.tmp ; set -xe ; \
	cd $$d ; $(ANTLR) -o `basename $$t`/$$d @abs_srcdir@/$*.g
	@echo ""
	@echo Setting up generated files ...
	@echo ""
	@b=`basename $*` ; d=`dirname $*` ; t=$*.tmp ; set -xe ; \
	for gen in $$t/$$d/*.java ; do \
	    b=`basename $$gen .java` ; \
	    mv $$gen $$t/$$b.gen ; \
	    i=@abs_srcdir@/$$d/$$b.sed ; \
	    o=$$t/$$b.sed ; \
   	    if test -r $$i ; then \
		cp $$i $$o.sed ; \
	    else \
		cp /dev/null $$o ; \
	    fi ; \
	done
	@echo ""
	@echo Running repeated builds ...
	@echo ""
	@d=`dirname $*` ; t=$*.tmp ; set -xe ; \
	edits=true ; \
	while $$edits ; do \
	    edits=false ; \
	    for gen in $$t/*.gen ; do \
		b=`basename $$gen .gen` ; \
	        echo "Applying fixes for $$b ..." ; \
		for fix in $$t/*.sed ; do \
		    f=`basename $$fix .sed` ; \
		    sed -f $$fix $$t/$$f.gen > $$t/$$d/$$f.java ; \
		done ; \
		echo "Parsing compiler warnings from $$b..." ; \
		rm -f $$t/*.antlr-fixes ; \
	        rm -rf $$t/classes ; mkdir -p $$t/classes ; \
		if test "x@HAVE_ECJ_TRUE@" = x ; then \
		    $(GIJ) 2>&1 \
			--classpath $(ECJ_JAR):$(CLASSPATH) \
			org.eclipse.jdt.internal.compiler.batch.Main \
			\
			-d $$t/classes \
			-warn:+semicolon \
			-sourcepath  $$t:$(SOURCEPATH) \
			-classpath $(CLASSPATH) \
			$$t/$$d/$$b.java || true ; \
		else \
		    $(GCJCOMPILE) 2>&1 \
			-C \
			-I $$t \
			-d $$t/classes \
			$$t/$$d/$$b.java || true ; \
		fi | ( \
		    cd $$t ; \
		    $(AWK) -f @abs_srcdir@/common/antlr-warnings.awk \
		) ; \
		echo "Merging `sort -n $$t/*.antlr-fixes 2>/dev/null | uniq | wc -l` fixes" ; \
		for fix in $$t/*.antlr-fixes ; do \
		    b=`basename $$fix .antlr-fixes` ; \
		    test -r "$$t/$$b.sed" || continue ; \
 		    sort -n $$t/$$b.sed $$fix | uniq > $$t/$$b.tmp ; \
		    if ( set -x ; cmp -s $$t/$$b.tmp $$t/$$b.sed ) ; then \
			echo "***" ; \
			echo "*** $$t/$$b.sed already contains all fixes!" ; \
			echo "*** Assuming errors are real." ; \
			echo "***" ; \
			continue ; \
		    fi ; \
		    mv -f $$t/$$b.tmp $$t/$$b.sed ; \
 		    edits=true ; \
	        done ; \
	    done ; \
	done || true
	@echo ""
	@echo Installing generated files files ...
	@echo ""
	@d=`dirname $*` ; t=$*.tmp ; set -xe ; \
	for f in $$t/$$d/*.java $$t/$$d/*.txt ; do \
	    b=`basename $$f` ; \
	    cp $$f $$d/$$b ; \
	done
	rm -rf $*.antlred
	touch $*.antlred

# Get things building on 64-bit-X-32-bit environment.  Mainly need to
# remove any attempt to force the compile to 64-bit.

if DO_ARCH32_TEST
ARCH32_COMPILE = $(subst $(space)-m64$(space), ,$(COMPILE)) -m32
ARCH32_CXXCOMPILE = $(subst $(space)-m64$(space), ,$(CXXCOMPILE)) -m32
ARCH32_FRYSK_ASCOMPILE = $(subst $(space)-m64$(space), ,$(FRYSK_ASCOMPILE)) -m32
ARCH32_LINK = $(subst $(space)-m64$(space), ,$(LINK)) -m32
ARCH32_CXXLINK = $(subst $(space)-m64$(space), ,$(CXXLINK)) -m32
endif


SUFFIXES += .fig .jpg .pdf .eps .gif .txt
.fig.jpg:
	mkdir -p `dirname $@`
	$(FIG2DEV) -L jpeg $< $@
.fig.pdf:
	mkdir -p `dirname $@`
	$(FIG2DEV) -L pdf $< $@
.fig.eps:
	mkdir -p `dirname $@`
	$(FIG2DEV) -L eps $< $@
.fig.gif:
	mkdir -p `dirname $@`
	$(FIG2DEV) -L gif $< $@
.fig.txt:
	mkdir -p `dirname $@`
	echo "@center See the @sc{pdf} or @sc{html} documentation." > $@

# .Po files contain generated build dependencies.  Automake has no way
# to efficiently detect a file rename or remove, and consequently, the
# need to update .Po files that contain the no-longer-exists file.
# Hack this by scrubbing .Po files as part of make clean -- this
# abuses the developer's reflex to type: make - barf; make clean;
# make :-)

clean-local: clean-local-po
.PHONY: clean-local-po
clean-local-po:
	find $(GEN_DIRS) -name '*.Po' -exec cp /dev/null \{\} \;

# Remove any directories, why isn't this part of automake?

clean-local: clean-local-dirs
.PHONY: clean-local-dirs
clean-local-dirs:
	rm -rf $(CLEANDIRS)

# For distclean, which is meant to leave a 100% pristine source tree,
# remove everything listed in .cvsignore.

distclean-local: distclean-cvsignored
.PHONY: distclean-cvsignored
distclean-cvsignored:
	cd $(srcdir) ; \
	find . -type f -name .cvsignore -print \
	| while read f ; do \
		( cd `dirname $$f` && rm -rf `cat .cvsignore` ) ; \
	done

# Create a list of .java files that need to be compiled.  It turns out
# that it is faster to just feed all the files en-mass to the compiler
# (then compile each individually).  Put the list into a file to avoid
# having too-long an argument list.  Remember to filter out duplicate
# directories (as occurs when building in the source tree).  An
# explicit clean rule is needed as CLEANFILES can't handle directories.

CLEANFILES += files-java.list
CLEANDIRS += $(JAVAROOT)
files-java.list: files.list
	if test -s $(top_srcdir)/files.list ; then \
	    sed -n < $(top_srcdir)/files.list > $@.tmp \
		-e 's,\(^.*\.java$$\),$(top_srcdir)/\1, p' -e 't' \
		-e 's,\(^.*\)\..*java.*,$(top_builddir)/\1.java, p' -e 't' \
		-e 's,\(^.*\)\..*enum$$,$(top_builddir)/\1.java, p' -e 't' ; \
	    echo $(GEN_SOURCENAME)/JUnitTests.java >> $@.tmp ; \
	    mv $@.tmp $@ ; \
	else \
	    cp /dev/null $@ ; \
	fi
${GEN_DIRNAME}.jar: files-java.list
	rm -rf $(JAVAROOT)
	mkdir -p $(JAVAROOT)
	$(JAVAC) -d $(JAVAROOT) $(JAVACFLAGS) \
		@$(top_builddir)/files-java.list \
		2>&1 | tee $*.log
	if test -s $*.log \
	   && expr " $(GCJCOMPILE) " : '.* -Werror ' > /dev/null ; \
	then rm $*.log ; false ; \
	fi
	rm -f $*.log
	cd $(JAVAROOT) ; \
		find * -name '*.class' -print \
		| $(JAR) -@ -cf $@
	mv $(JAVAROOT)/$@ $@

# When ECJ is available, use it as an extra lint pass.  GCJ has the
# habit of silently compiling invalid Java code (garbage in, garbage
# out), fortunately ECJ rejects it.

# This is part of all-local, since, if this fails the build won't fly.

all-local: checked-ecj-compile
CLEANFILES += checked-ecj-compile files-java-gen.list
CLEANDIRS += ecj
checked-ecj-compile: files-java.list $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	rm -rf ecj
	mkdir -p ecj
if HAVE_ECJ
	echo Compiling all the generated files.
	( test -s files-java.list && $(GIJ) \
		--classpath $(ECJ_JAR):$(CLASSPATH) \
		org.eclipse.jdt.internal.compiler.batch.Main \
		\
		-d ecj \
		-warn:+semicolon \
		-sourcepath $(SOURCEPATH) \
		-classpath $(CLASSPATH) \
		@files-java.list \
		2>&1 ) | tee $@.log
	if test -s $@.log ; \
	then rm $@.log ; false ; \
	fi
	rm -f $@.log $(top_builddir)/files-{java,genjava}.list.ecj
endif
	touch $@

# Check that everything, well except for a few exceptions, is using
# frysk.junit and not the junit stuff directly.  Depend on the
# directories .jar file as that is updated when ever any java files
# change.

check-local: checked-for-import-junit-framework
.PHONY: checked-for-import-junit-framework
checked-for-import-junit-framework: $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	@echo "" ; \
	if for dir in $(GEN_DIRS) ; do \
		find $(srcdir)/$$dir ./$$dir \
			-type f -name '[a-zA-Z]*.java' -print \
			-o -name inua -prune \
			-o -name junit -prune ; \
	   done | xargs -r grep -H -n -e 'import *junit\.framework' ; \
	then \
		echo "FAIL: code uses frysk.junit" ; \
		exit 1 ; \
	else \
		echo "PASS: code uses frysk.junit" ; \
	fi

# Check that everything is calling fail() with a parameter.

check-local: checked-for-parameterless-junit-fail
.PHONY: checked-for-parameterless-junit-fail
checked-for-parameterless-junit-fail: $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	@if for dir in $(GEN_DIRS) ; do \
		find $(srcdir)/$$dir ./$$dir \
			-type f -name '[a-zA-Z]*.java' -print \
			-o -name inua -prune \
			-o -name junit -prune ; \
	   done | xargs -r grep -H -n -e 'fail *()' ; \
	then \
		echo "FAIL: code does paramterize all fail() calls" ; \
		exit 1 ; \
	else \
		echo "PASS: code parameterizes all fail() calls" ; \
	fi

# Check for NULL== or null== in code base

check-local: checked-for-null-equals
.PHONY: checked-for-null-equals
checked-for-null-equals: $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	@if for dir in $(GEN_DIRS) ; do \
		find $(srcdir)/$$dir \
			-type f -name '[a-zA-Z]*.java' -print \
			-o -type f -name '[a-zA-Z]*.cxx' -print \
			-o -type f -name '[a-zA-Z]*.c' -print \
			-o -name inua -prune \
			-o -name junit -prune ; \
	    done | xargs -r egrep -H -n \
		-e '\(NULL *==' \
		-e '\(null *==' ; \
	then \
		echo "FAIL: Code does not use NULL==" ; \
		exit 1 ; \
	fi ; \
	echo "PASS: code does not use NULL=="

# Check for lingering ECLIPSE code stubs and the like

check-local: checked-for-at-author
.PHONY: checked-for-at-author
checked-for-at-author: $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	@if for dir in $(GEN_DIRS) ; do \
		find $(srcdir)/$$dir \
			-type f -name '[a-zA-Z]*.java' -print \
			-o -name inua -prune \
			-o -name junit -prune ; \
	    done | xargs -r grep -H -n -e '@author' ; \
	then \
		echo "FAIL: code does not contain @author" ; \
		exit 1 ; \
	fi ; \
	echo "PASS: code does not contain @author"

# Check for lingering ECLIPSE code stubs and the like

check-local: checked-for-eclipse-residue
.PHONY: checked-for-eclipse-residue
checked-for-eclipse-residue: $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	@if for dir in $(GEN_DIRS) ; do \
		find $(srcdir)/$$dir \
			-type f -name '[a-zA-Z]*.java' -print \
			-o -name inua -prune \
			-o -name junit -prune ; \
	    done | xargs -r grep -H -n \
		-e 'TODO Auto-generated method stub' ; \
	then \
		echo "FAIL: code does not contain ECLIPSE residue" ; \
		exit 1 ; \
	fi ; \
	echo "PASS: code does not contain ECLIPSE residue"

# Check that the file has a valid copyright notice.

check-local: checked-for-copyright-notice
.PHONY: checked-for-copyright-notice
checked-for-copyright-notice: $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	@rm -f $@.tmp ; \
	for dir in Makefile.am configure.ac $(GEN_DIRS) ; do \
		find $(srcdir)/$$dir \
			-type f -name '[a-zA-Z]*.java' -print \
			-o -type f -name '[a-zA-Z]*.cxx' -print \
			-o -name inua -prune \
			-o -name junit -prune ; \
	done | xargs -r grep -H -n -L -e 'Copyright' \
	| sed -e 's,$$,: 1: Missing copyright,' \
	| tee $@.tmp ; \
	if test -s $@.tmp ; then \
		rm -f $@.tmp ; \
		echo "FAIL: code has Copyright notice" ; \
		exit 1 ; \
	fi ; \
	rm -f $@.tmp ; \
	echo "PASS: code has Copyright notice"

# Check that no .xml (i.e., man page) contains a reference to
# @pkglibdir@.

all-local: checked-for-pkglibdir-in-manpage
CLEANFILES += checked-for-pkglibdir-in-manpage
checked-for-pkglibdir-in-manpage: files.list $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	( cd $(srcdir) ; \
		grep -e '\.xml$$' files.list \
		| xargs -r grep -H -n -e '[@]libdir[@]' -e '[@]pkglibdir[@]' \
	) > $@.tmp || :
	if test -s  $@.tmp ; then \
		sed -e 's,$$,: Reference to pkglibdir or libdir in xml file,' $@.tmp ; \
		rm -f $@.tmp ; \
		exit 1 ; \
	fi
	mv $@.tmp $@

# Check that java.util.Vector isn't being used - old school.

all-local: checked-for-java-util-vector
CLEANFILES += checked-for-java-util-vector
checked-for-java-util-vector: files-java.list $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	xargs -r grep -H -n -e 'java.util.Vector' \
		< files-java.list \
		> $@.tmp \
		|| :
	if test -s $@.tmp ; then \
		sed -e 's,$$,: Vector is old-school,' $@.tmp ; \
		exit 1 ; \
	fi
	mv $@.tmp $@

# Check that java.util.Hasntable isn't being used - old school.

# all-local: checked-for-java-util-hashtable
CLEANFILES += checked-for-java-util-hashtable
checked-for-java-util-hashtable: files-java.list $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	xargs -r grep -H -n -e 'java.util.Hashtable' \
		< files-java.list \
		> $@.tmp \
		|| :
	if test -s $@.tmp ; then \
		sed -e 's,$$,: Hashtable is old-school,' $@.tmp ; \
		exit 1 ; \
	fi
	mv $@.tmp $@

# Check for direct references to /proc, /proc accesseses should be
# routed through frysk.sys.proc.

# all-local: checked-for-slash-proc
CLEANFILES += checked-for-slash-proc
checked-for-slash-proc: files-java.list $(if $(GEN_DIRS),$(GEN_DIRNAME).jar)
	grep -v frysk/sys < files-java.list \
	    | xargs -r grep -H -n -e '"/proc' \
		> $@.tmp \
		|| :
	if test -s $@.tmp ; then \
		sed -e 's,$$,: use frysk.sys.proc,' $@.tmp ; \
		exit 1 ; \
	fi
	mv $@.tmp $@
