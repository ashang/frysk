# This file is part of the program FRYSK.
#
# Copyright 2007 Oracle Corporation.
# Copyright 2005, 2006, 2007, Red Hat Inc.
#
# FRYSK is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# FRYSK is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with FRYSK; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
# 
# In addition, as a special exception, Red Hat, Inc. gives You the
# additional right to link the code of FRYSK with code not covered
# under the GNU General Public License ("Non-GPL Code") and to
# distribute linked combinations including the two, subject to the
# limitations in this paragraph. Non-GPL Code permitted under this
# exception must only link to the code of FRYSK through those well
# defined interfaces identified in the file named EXCEPTION found in
# the source code files (the "Approved Interfaces"). The files of
# Non-GPL Code may instantiate templates or use macros or inline
# functions from the Approved Interfaces without causing the
# resulting work to be covered by the GNU General Public
# License. Only Red Hat, Inc. may make changes or additions to the
# list of Approved Interfaces. You must obey the GNU General Public
# License in all respects for all of the FRYSK code and other code
# used in conjunction with FRYSK except the Non-GPL Code covered by
# this exception. If you modify this file, you may extend this
# exception to your version of the file, but you are not obligated to
# do so. If you do not wish to provide this exception without
# modification, you must delete this exception statement from your
# version and license this file solely under the GPL without
# exception.

AC_ARG_VAR([GCJFLAGS], [GCJ compiler flags])

dnl This test is used by `elfutils' and as we share its interface we need
dnl to have consistent ABI of any structures possibly containing `off_t'.
dnl This test must come as early as possible after the compiler configuration
dnl tests, because the choice of the file model can (in principle) affect
dnl whether functions and headers are available, whether they work, etc.
AC_SYS_LARGEFILE

AC_PROG_RANLIB

# Use AC_CHECK_PROGS, and not AC_PATH_PROGS and AC_PATH_PROG:
# AC_PATH_PROGS, when given an environment containing a variable like
# <<JAVAC=/path/to/gcj -C>> looses the <<-C>>: AC_PATH_PROG, when
# given an environment containing a variable like <<JAVAC=gcj>> (i.e.,
# path not absolute) ignores it (which is contrary behavior to
# AC_PATH_PROGS).

AC_PROG_CXX([g++4 g++ c++])
if test "x$ac_env_CXXFLAGS_set" != xset; then
  test x"$CXXFLAGS" = "x-g -O2" && CXXFLAGS="-g -O"
  CXXFLAGS="$CXXFLAGS -Wall"
fi

AC_PROG_CC([gcc4 gcc cc])
AM_PROG_CC_C_O
if test "x$ac_env_CFLAGS_set" != xset; then
  test x"$CFLAGS" = "x-g -O2" && CFLAGS="-g -O"
  CFLAGS="$CFLAGS -Wall"
fi

AM_PROG_AS

# XXX: AM_PROG_GCJ doesn't take arguments, hack around it by first
# explictly searching for the GCJ program pushing it into the
# environment where AM_PROG_GCJ will find it.

AC_CHECK_PROGS([GCJ], [gcj4 gcj], [gcj])
AM_PROG_GCJ
if test "x$ac_env_GCJFLAGS_set" != xset; then
  test x"$GCJFLAGS" = "x-g -O2" && GCJFLAGS="-g -O"
fi

# Find all the GCJ utilities.  Prefer gcc4.

AC_CHECK_PROGS([GCJH], [gcjh4 gcjh gjavah])
# gjavah defaults to jni, while gcjh defaults to cni.
# gcjh doesn't support -cni, only -jni.
GCJHFLAGS=""
test x"${GCJH}" = xgjavah && GCJHFLAGS="-cni"
AC_SUBST([GCJHFLAGS])
AC_CHECK_PROGS([JAR], [fastjar4 fastjar jar], [fastjar])
AC_CHECK_PROGS([GCJ_DBTOOL], [gcj-dbtool4 gcj-dbtool], [gcj-dbtool])
AC_CHECK_PROGS([GIJ], [gij4 gij], [gij])

# GCJ for Java 1.5 does not include jv-scan.  If it wasn't found, mark
# it as such.
AC_CHECK_PROGS([JV_SCAN], [jv-scan4 jv-scan], [no])
AM_CONDITIONAL([HAVE_JV_SCAN], test x"${JV_SCAN}" != xno)


# Always use GCJ as the Java compiler.  While other, possibly better,
# alternatives might be available, using those alternatives can (and
# did) lead to problems such as: developers missing problems in the
# base-line build compiler; and developers testing code different to
# what will be shipped.  Having said that, do allow people to override
# this.

JAVAC="${JAVAC:-$GCJ -C}"
AC_SUBST([JAVAC])

# autoconf doesn't yet know about JAVA, so define it ourselves.
m4_define([AC_LANG(JAVA)],
[ac_ext=java
ac_objext=class
ac_compile='$JAVAC $JAVACFLAGS conftest.$ac_ext >&AS_MESSAGE_LOG_FD'
ac_java_werror_flag=no
])
m4_defun([AC_LANG_COMPILER(JAVA)], [])
m4_define([_AC_LANG_ABBREV(JAVA)], [java])

AC_LANG(JAVA)

# Only add -warn flags when the compiler is known to be ECJ.
AC_MSG_CHECKING([java flags])
case "${JAVAC}" in
gcj* | */gcj* ) JAVACFLAGS='-g -classpath $(SOURCEPATH):$(CLASSPATH)' ;;
ecj | */ecj ) JAVACFLAGS='-warn:+semicolon -sourcepath $(SOURCEPATH) -classpath $(CLASSPATH)' ;;
* ) JAVACFLAGS='-g -sourcepath $(SOURCEPATH) -classpath $(CLASSPATH)' ;;
esac
AC_SUBST([JAVACFLAGS])
AC_MSG_RESULT(${JAVACFLAGS})

# See if -fsource=1.4 can be added, if not only use the warning flags.
# If it is available also use it for the GCJFLAGS.

AC_MSG_CHECKING([whether ${JAVAC} accepts -fsource=1.4])
if test "x$ac_env_GCJFLAGS_set" == xset ; then
	GCJ_FSOURCE="no"
	AC_MSG_RESULT([not needed])
else
	JAVACFLAGS_WARN=$JAVACFLAGS
	JAVACFLAGS="$JAVACFLAGS -fsource=1.4"
	AC_COMPILE_IFELSE([public class conftest{}],
		[GCJ_FSOURCE="yes"
		 GCJFLAGS="$GCJFLAGS -fsource=1.4"],
		[GCJ_FSOURCE="no"
		JAVACFLAGS=$JAVACFLAGS_WARN])
	AC_MSG_RESULT([${GCJ_FSOURCE}])
fi

# Some versions of gcj don't support -Wall.  Some versions generate
# good warnings without it.  So explictily test for it.

AC_MSG_CHECKING([whether ${JAVAC} accepts -Wall])
if test "x$ac_env_GCJFLAGS_set" == xset ; then
	GCJ_WALL=no
	AC_MSG_RESULT([not needed])
elif test "x${GCJ_FSOURCE}" == xyes ; then
	# Newer compilers have a good default set of warnings so do
	# not need -Wall.  However, older GCJs barf on stray
	# semicolons so always check for them to help with
	# compatibility.
	GCJ_WALL=-Wextraneous-semicolon
	JAVACFLAGS="$JAVACFLAGS ${GCJ_WALL}"
	GCJFLAGS="$GCJFLAGS ${GCJ_WALL}"
	AC_MSG_RESULT([${GCJ_WALL}])
else
	JAVACFLAGS_WARN=$JAVACFLAGS
	JAVACFLAGS="$JAVACFLAGS -Wall"
	AC_COMPILE_IFELSE([public class conftest{}],
		[GCJ_WALL=yes
		 GCJFLAGS="$GCJFLAGS -Wall"],
		[GCJ_WALL=no
		 JAVACFLAGS=$JAVACFLAGS_WARN])
	AC_MSG_RESULT([${GCJ_WALL}])
fi

# Always use GIJ as the byte code interpreter.  java programs, run
# during the build, need to see the GNU Java environment.  That
# environment classes such as gnu.gcj.RawData which can be found using
# reflection.

JAVA="${JAVA:-$GIJ}"
AC_SUBST([JAVA])

# Check for the ECJ compiler.  If available, enable rules that push
# all the java code through that compiler.  Doing this adds an
# additional (but optional) code check -- ECJ tends to find more
# errors than GCJ. Ignore when gcj support -fsource since then it
# already uses a source -> byte code compiler that is sane.

ECJ_JAR=${ECJ_JAR:-/usr/share/java/eclipse-ecj.jar}
AC_SUBST([ECJ_JAR])
AC_CHECK_PROGS([ECJ], [ecj], [no])
AM_CONDITIONAL(HAVE_ECJ, test x"${ECJ}" != xno -a x"${GCJ_FSOURCE}" != xyes)

# Check for the availablity of fig2dev

AC_PATH_PROG(FIG2DEV, fig2dev)
test "x$FIG2DEV" = x && AC_MSG_ERROR([no fig2dev binary is found in \$(PATH)])

AC_CHECK_PROGS(XMLTO, [xmlto], [no])
test "x${XMLTO}" = xno && AC_MSG_ERROR([no xmlto binary found in \${PATH)])

# Padd PKG_CONFIG_PATH with frysk's local directories.  Be careful to
# use lib|lib64.

lib=`pkg-config --debug 2>&1 |awk -F '/' '/^Scanning.*pkgconfig.$/ { print $(NF - 1); exit; }'`
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/$lib/frysk/pkgconfig

# Check for XMLLINT
AC_CHECK_PROGS([XMLLINT], [xmllint], [no])
test $XMLLINT = no && AC_ERROR([no xmllint program found])
AC_CHECK_PROGS([XMLCATALOG], [xmlcatalog], [no])
test $XMLCATALOG = no && AC_ERROR([no xmlcatalog program found])

# Check for uudecode
AC_CHECK_PROGS([UUDECODE], [uudecode], [no])
test $UUDECODE = no && AC_ERROR([no uudecode program found, please install sharutils package])

FRYSK_USE_LIBUNWIND

case "${libdir}:${lib}" in
  *64*:* )
	# 64-bit in /usr/lib64, 32-bit in /usr/lib
	lib32dir=`echo "${libdir}" | sed s,64,,g`
	lib64dir="${libdir}"
	;;
  *:*64* )
	# 64-bit in /usr/lib, 32-bit in /usr/lib32
	lib32dir="${libdir}32"
	lib64dir="${libdir}"
	;;
  * )
	# 32-bit in /usr/lib, 64-bit in /usr/lib64
	lib32dir="${libdir}"
	lib64dir="${libdir}64"
	;;
esac
AC_SUBST([lib32dir])
AC_SUBST([lib64dir])

FRYSK_DO_ARCH32_TEST
FRYSK_WERROR
FRYSK_COVERAGE

AC_ARG_WITH(libopcodes,
	AS_HELP_STRING([--with-libopcodes], [use libopcodes (disassembler)]),
	[AC_DEFINE(WITH_LIBOPCODES)
	 LIBS="$LIBS -lopcodes"]
	[])
