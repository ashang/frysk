### Makefile template for libunwind/src/

all::

### Variables substituted from configure.

srcdir = @srcdir@
top_srcdir = @top_srcdir@
builddir = @builddir@
top_builddir = @top_builddir@
VPATH = @srcdir@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)

AR = @AR@
ARFLAGS = crv
CC = @CC@
CFLAGS = @CFLAGS@
PICFLAG = -fpic
DEPFLAGS = -MMD -MT $*.os
CCAS = @CCAS@
CCASFLAGS = @CCASFLAGS@
INCFLAGS = -I$(top_builddir)include -I$(top_srcdir)/include -I. -I$(srcdir)
CPPFLAGS = @CPPFLAGS@ 
DEFS = @DEFS@
LDFLAGS = @LDFLAGS@
LDFLAGS_STATIC_LIBCXA = @LDFLAGS_STATIC_LIBCXA@
LIBCRTS = @LIBCRTS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
RANLIB = @RANLIB@

arch = @arch@
host = @host@
libdir = @libdir@
libexecdir = @libexecdir@
mkdir_p = @mkdir_p@
prefix = @prefix@
exec_prefix = @exec_prefix@
target = @target@
target_os = @target_os@

### Version numbers of the shared libraries.

libunwind.so_major = 7
libunwind.so_minor = 0

libunwind-$(arch).so_major = 7
libunwind-$(arch).so_minor = 0

libunwind-setjmp.so_major = 0
libunwind-setjmp.so_minor = 0

### Set of object files for each library.
# These are simply the common files; arch specific are added in the include.

libunwind_ptrace_OBJS = \
        ptrace/_UPT_elf.o \
        ptrace/_UPT_accessors.o \
	ptrace/_UPT_access_fpreg.o \
        ptrace/_UPT_access_mem.o \
	ptrace/_UPT_access_reg.o \
        ptrace/_UPT_create.o \
	ptrace/_UPT_destroy.o \
        ptrace/_UPT_find_proc_info.o \
	ptrace/_UPT_get_dyn_info_list_addr.o \
        ptrace/_UPT_put_unwind_info.o \
	ptrace/_UPT_get_proc_name.o \
        ptrace/_UPT_reg_offset.o \
	ptrace/_UPT_resume.o

libunwind_setjmp_OBJS = \
	setjmp/longjmp.o \
	setjmp/siglongjmp.o

libunwind_OBJS_common = \
	elf$(ELFW).o \
	mi/init.o \
	mi/flush_cache.o \
	mi/mempool.o \
	mi/strerror.o \
	$(arch)/regname.o

libunwind_OBJS_dual = \
	mi/Gdyn-extract.o \
	mi/Gfind_dynamic_proc_info.o \
        mi/Gget_accessors.o \
        mi/Gget_proc_info_by_ip.o \
	mi/Gget_proc_name.o \
        mi/Gput_dynamic_unwind_info.o \
	mi/Gdestroy_addr_space.o \
        mi/Gget_reg.o \
	mi/Gset_reg.o \
        mi/Gget_fpreg.o \
	mi/Gset_fpreg.o \
        mi/Gset_caching_policy.o \
	$(arch)/Gcreate_addr_space.o \
	$(arch)/Gget_proc_info.o \
	$(arch)/Gget_save_loc.o \
	$(arch)/Gglobal.o \
        $(arch)/Ginit.o \
	$(arch)/Ginit_local.o \
	$(arch)/Ginit_remote.o \
        $(arch)/Gis_signal_frame.o \
	$(arch)/Gregs.o \
        $(arch)/Gresume.o \
	$(arch)/Gstep.o

libunwind_OBJS_localize = $(subst /G,/L,$(libunwind_OBJS_dual))

libunwind_OBJS_generic = \
	$(libunwind_OBJS_dual) \
	mi/Gdyn-remote.o

libunwind_OBJS_local = \
	$(libunwind_OBJS_localize) \
        mi/backtrace.o \
        mi/dyn-cancel.o \
	mi/dyn-info-list.o \
	mi/dyn-register.o \
        unwind/Backtrace.o \
	unwind/DeleteException.o \
        unwind/FindEnclosingFunction.o \
	unwind/ForcedUnwind.o \
        unwind/GetBSP.o \
	unwind/GetCFA.o \
	unwind/GetDataRelBase.o \
        unwind/GetGR.o \
	unwind/GetIP.o \
	unwind/GetLanguageSpecificData.o \
        unwind/GetRegionStart.o \
	unwind/GetTextRelBase.o \
        unwind/RaiseException.o \
	unwind/Resume.o \
        unwind/Resume_or_Rethrow.o \
	unwind/SetGR.o \
	unwind/SetIP.o

include $(srcdir)/$(arch)/Make-arch.in
include $(srcdir)/Make-$(target_os).in

ifeq ($(dwarf_target),true)
libunwind_OBJS_common += \
	dwarf/global.o

libunwind_OBJS_dual += \
	dwarf/Gfind_proc_info-lsb.o \
	dwarf/Gexpr.o \
	dwarf/Gfde.o \
	dwarf/Gparser.o \
	dwarf/Gpe.o \
	dwarf/Gstep.o
endif

### Select the set of libraries to build.

ifeq ($(host),$(target))
LIBRARIES = libunwind-$(arch).a libunwind-$(arch).so \
	    libunwind.a libunwind.so \
	    libunwind-setjmp.a libunwind-setjmp.so \
	    libunwind-ptrace.a
all_OBJS = $(libunwind_OBJS_common) $(libunwind_OBJS_generic) \
	   $(libunwind_OBJS_local) $(libunwind_setjmp_OBJS) \
	   $(libunwind_ptrace_OBJS)
else
LIBRARIES = libunwind-$(arch).a libunwind-$(arch).so
all_OBJS = $(libunwind_OBJS_common) $(libunwind_OBJS_generic)
endif

# Collect the set of all directories in which we have objects.
all_DIRS = $(patsubst %/,%,$(sort $(dir $(all_OBJS))))

# Collect the set of dependency files that we'll create during compilation.
# Conditionally include them to get auto-depenencies.
all_DEPS = $(patsubst %.o,%.d,$(all_OBJS))
-include $(all_DEPS)

###

COMPILE = $(CC) $(DEFS) $(INCFLAGS) $(CPPFLAGS) $(CFLAGS)

%.o: %.c
	$(COMPILE) $(DEPFLAGS) -o $@ -c $<

%.os: %.c
	$(COMPILE) $(PICFLAG) -o $@ -c $<

%.o: %.S
	$(COMPILE) $(DEPFLAGS) -o $@ -c $<

%.os: %.S
	$(COMPILE) -DPIC -o $@ -c $<

$(libunwind_OBJS_localize):
	$(COMPILE) $(DEPFLAGS) -DUNW_LOCAL_ONLY -o $@ -c $(srcdir)/$(patsubst %.o,%.c,$(subst /L,/G,$@))

$(libunwind_OBJS_localize:%.o=%.os):
	$(COMPILE) $(PICFLAG) -DUNW_LOCAL_ONLY -o $@ -c $(srcdir)/$(patsubst %.os,%.c,$(subst /L,/G,$@))

### 

LINK = $(CC) -shared -nostartfiles $(LDFLAGS) -Wl,-soname,$@.$($@_major) \
	-o $@.$($@_major).$($@_minor) $^ $(LIBS) 
POSTLINK = $(LN_S) $@.$($@_major).$($@_minor) $@.$($@_major) && \
	$(LN_S) $@.$($@_major).$($@_minor) $@

libunwind-$(arch).a: $(libunwind_OBJS_common) $(libunwind_OBJS_generic)
	-rm -f $@
	$(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@

libunwind-$(arch).so: $(libunwind_OBJS_common:%.o=%.os) \
  $(libunwind_OBJS_generic:%.o=%.os)
	-rm -f $@*
	$(LINK) && $(POSTLINK)

libunwind.a: $(libunwind_OBJS_common) $(libunwind_OBJS_local)
	-rm -f $@
	$(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@

libunwind.so: $(libunwind_OBJS_common:%.o=%.os) $(libunwind_OBJS_local:%.o=%.os)
	-rm -f $@*
	$(LINK) -nostdlib $(LIBCRTS) -lc && $(POSTLINK)

libunwind-setjmp.a: $(libunwind_setjmp_OBJS)
	-rm -f $@
	$(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@

libunwind-setjmp.so: $(libunwind_setjmp_OBJS:%.o=%.os) libunwind.so
	-rm -f $@*
	$(LINK) && $(POSTLINK)

libunwind-ptrace.a: $(libunwind_ptrace_OBJS)
	-rm -f $@
	$(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@

all:: $(LIBRARIES)

check:: all

clean::
	-rm -f $(addsuffix /*.o,$(all_DIRS))
	-rm -f $(addsuffix /*.os,$(all_DIRS))
	-rm -f $(addsuffix /*.d,$(all_DIRS))
	-rm -f $(addsuffix *,$(LIBRARIES))

distclean:: clean

installdirs::
	$(mkdir_p) "$(DESTDIR)$(libdir)"

full_so_name = $*.so.$($*.so_major).$($*.so_minor)
install-%.so: uninstall-%.so
	$(INSTALL_DATA) $(full_so_name) "$(DESTDIR)$(libdir)/$(full_so_name)"
	$(LN_S) $(full_so_name) "$(DESTDIR)$(libdir)/$*.so.$($*.so_major)"
	$(LN_S) $(full_so_name) "$(DESTDIR)$(libdir)/$*.so"

install-%.a:
	$(INSTALL_DATA) $*.a "$(DESTDIR)$(libdir)/$*.a"
	$(RANLIB) "$(DESTDIR)$(libdir)/$*.a"

install:: all installdirs $(addprefix install-,$(LIBRARIES))

uninstall-%.so:
	-rm -f "$(DESTDIR)$(libdir)/$*.so"
	-rm -f "$(DESTDIR)$(libdir)/$*.so.$($*.so_major)"
	-rm -f "$(DESTDIR)$(libdir)/$*.so.$($*.so_major).$($*.so_minor)"

uninstall-%.a:
	-rm -f "$(DESTDIR)$(libdir)/$*.a"

uninstall:: $(addprefix uninstall-,$(LIBRARIES))

.PHONY: all check clean distclean installdirs install uninstall
.NOEXPORT:
