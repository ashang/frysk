### Makefile template for libunwind/tests/

all::

### Version numbers of the shared libraries.

libunwind.so_major = 7
libunwind.so_minor = 0

libunwind-$(arch).so_major = 7
libunwind-$(arch).so_minor = 0

libunwind-setjmp.so_major = 0
libunwind-setjmp.so_minor = 0

### Variables substituted from configure.

srcdir = @srcdir@
top_srcdir = @top_srcdir@
builddir = @builddir@
top_builddir = @top_builddir@
VPATH = @srcdir@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)

CC = @CC@
CFLAGS = @CFLAGS@
DEPFLAGS = -MMD
CCAS = @CCAS@
CCASFLAGS = @CCASFLAGS@
INCFLAGS = -I$(top_builddir)/include -I$(top_srcdir)/include
CPPFLAGS = @CPPFLAGS@ 
DEFS = @DEFS@
LDFLAGS = @LDFLAGS@
LDFLAGS_STATIC_LIBCXA = @LDFLAGS_STATIC_LIBCXA@
LIBCRTS = @LIBCRTS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
RANLIB = @RANLIB@
OBJEXT = @OBJEXT@

arch = @arch@
host = @host@
libdir = @libdir@
libexecdir = @libexecdir@
mkdir_p = @mkdir_p@
prefix = @prefix@
exec_prefix = @exec_prefix@
target = @target@
target_os = @target_os@

### Set of all tests to run.

TESTS = test-proc-info test-static-link test-strerror run-check-namespace

ifeq ($(host),$(target))

TESTS += run-ptrace-mapper run-ptrace-misc run-ptrace-stepper \
	run-ptrace-signull \
	test-async-sig test-flush-cache test-init-remote \
	test-mem test-setjmp test-ptrace
TESTS_dual = Gtest-bt Gtest-exc Gtest-init Gtest-concurrent \
	Gtest-resume-sig Gtest-dyn1 
# Until http://sourceware.org/ml/libc-alpha/2006-11/msg00082.html
# gets finally resolved, fix was present in RawHide glibc-2.5.90-11.
XFAIL_TESTS = run-ptrace-signull

# Get target-specific tests, if any.
-include Make-$(arch).in
endif

TESTS_localize = $(subst G,L,$(TESTS_dual))
TESTS += $(TESTS_dual) $(TESTS_localize)

# Get any dependencies that exist.
-include *.d

###

COMPILE = $(CC) $(DEFS) $(INCFLAGS) $(CPPFLAGS) $(CFLAGS) $(DEPFLAGS) 

%.$(OBJEXT): %.c
	$(COMPILE) -o $@ -c $<

%.$(OBJEXT): %.cxx
	$(COMPILE) -o $@ -c $<

%.$(OBJEXT): %.S
	$(COMPILE) -o $@ -c $<

OBJS_localize = $(addsuffix .$(OBJEXT),$(TESTS_localize)) \
	Lperf-simple.$(OBJEXT)

$(OBJS_localize):
	$(COMPILE) -DUNW_LOCAL_ONLY -o $@ -c $(wildcard $(srcdir)/$(patsubst %.$(OBJEXT),%.*,$(subst L,G,$@)))

### 

LD = $(CC)
LINK = $(LD) $(LDFLAGS) -o $@ $^ $(LDADD) $(LIBUNWIND) $(LIBS) 

LDFLAGS += -L$(top_builddir)/src -Wl,-rpath=$(top_builddir)/src

LIBUNWIND = -lunwind-$(arch)
ifeq ($(host),$(target))
LIBUNWIND += -lunwind
endif

test-proc-info: test-proc-info.$(OBJEXT)
	$(LINK)

test-static-link: LDFLAGS += -static
test-static-link: test-static-link-loc.$(OBJEXT) test-static-link-gen.$(OBJEXT)
	$(LINK)

test-strerror: test-strerror.$(OBJEXT)
	$(LINK)

test-async-sig: LDFLAGS += -pthread
test-async-sig: test-async-sig.$(OBJEXT)
	$(LINK)

test-flush-cache: test-flush-cache.$(OBJEXT)
	$(LINK)

test-init-remote: test-init-remote.$(OBJEXT)
	$(LINK)

test-mem: test-mem.$(OBJEXT)
	$(LINK)

test-setjmp: LDADD = -lunwind-setjmp
test-setjmp: test-setjmp.$(OBJEXT)
	$(LINK)

test-ptrace: LDADD = -lunwind-ptrace
test-ptrace: test-ptrace.$(OBJEXT)
	$(LINK)

run-ptrace-misc: test-ptrace-misc
test-ptrace-misc: test-ptrace-misc.$(OBJEXT) ident.$(OBJEXT)
	$(LINK)

run-ptrace-mapper: mapper

run-ptrace-stepper: test-ptrace-stepper
test-ptrace-stepper: LDFLAGS += -pthread
# FIXME: -fno-exceptions should not be needed, misses foo() with it now.
test-ptrace-stepper.$(OBJEXT): CFLAGS += -g -fasynchronous-unwind-tables -fno-exceptions
test-ptrace-stepper: test-ptrace-stepper.$(OBJEXT)
	$(LINK)

run-ptrace-signull: test-ptrace-signull
test-ptrace-signull.$(OBJEXT): CFLAGS += -g -fasynchronous-unwind-tables -fno-exceptions
test-ptrace-signull: test-ptrace-signull.$(OBJEXT)
	$(LINK)

Gtest-bt: Gtest-bt.$(OBJEXT) ident.$(OBJEXT)
	$(LINK)

Ltest-bt: Ltest-bt.$(OBJEXT) ident.$(OBJEXT)
	$(LINK)

Gtest-exc: Gtest-exc.$(OBJEXT)
	$(LINK)

Ltest-exc: Ltest-exc.$(OBJEXT)
	$(LINK)

Gtest-init: LD = $(CXX)
Gtest-init: Gtest-init.$(OBJEXT)
	$(LINK)

Ltest-init: LD = $(CXX)
Ltest-init: Ltest-init.$(OBJEXT)
	$(LINK)

Gtest-concurrent: LDFLAGS += -pthread
Gtest-concurrent: Gtest-concurrent.$(OBJEXT)
	$(LINK)

Ltest-concurrent: LDFLAGS += -pthread
Ltest-concurrent: Ltest-concurrent.$(OBJEXT)
	$(LINK)

Gtest-resume-sig: Gtest-resume-sig.$(OBJEXT)
	$(LINK)

Ltest-resume-sig: Ltest-resume-sig.$(OBJEXT)
	$(LINK)

Gtest-dyn1: Gtest-dyn1.$(OBJEXT) flush-cache.$(OBJEXT)
	$(LINK)

Ltest-dyn1: Ltest-dyn1.$(OBJEXT) flush-cache.$(OBJEXT)
	$(LINK)

###

Gperf-simple: Gperf-simple.$(OBJEXT)
	$(LINK)

Lperf-simple: Lperf-simple.$(OBJEXT)
	$(LINK)

forker: LDFLAGS += -static

###

all::

check:: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
	        xpass=`expr $$xpass + 1`; \
	        failed=`expr $$failed + 1`; \
	        echo "XPASS: $$tst"; \
	      ;; \
	      *) \
	        echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
	        xfail=`expr $$xfail + 1`; \
	        echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
	        failed=`expr $$failed + 1`; \
	        echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

perf: perf-startup Gperf-simple Lperf-simple forker
	@echo "########## Basic performance of generic libunwind:"
	@./Gperf-simple
	@echo "########## Basic performance of local-only libunwind:"
	@./Lperf-simple
	@echo "########## Startup overhead:"
	@$(srcdir)/perf-startup @arch@

clean::
	-rm -f *.$(OBJEXT)
	-rm -f *.d
	-rm -f $(TESTS)

distclean:: clean

installdirs::

install::

uninstall::

.PHONY: all check perf clean distclean installdirs install uninstall
.NOEXPORT:
