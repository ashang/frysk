// This file is part of the program FRYSK.
//
// Copyright 2007, Red Hat Inc.
//
// FRYSK is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// FRYSK is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with FRYSK; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
// 
// In addition, as a special exception, Red Hat, Inc. gives You the
// additional right to link the code of FRYSK with code not covered
// under the GNU General Public License ("Non-GPL Code") and to
// distribute linked combinations including the two, subject to the
// limitations in this paragraph. Non-GPL Code permitted under this
// exception must only link to the code of FRYSK through those well
// defined interfaces identified in the file named EXCEPTION found in
// the source code files (the "Approved Interfaces"). The files of
// Non-GPL Code may instantiate templates or use macros or inline
// functions from the Approved Interfaces without causing the
// resulting work to be covered by the GNU General Public
// License. Only Red Hat, Inc. may make changes or additions to the
// list of Approved Interfaces. You must obey the GNU General Public
// License in all respects for all of the FRYSK code and other code
// used in conjunction with FRYSK except the Non-GPL Code covered by
// this exception. If you modify this file, you may extend this
// exception to your version of the file, but you are not obligated to
// do so. If you do not wish to provide this exception without
// modification, you must delete this exception statement from your
// version and license this file solely under the GPL without

// Very simple utility to create a program that creates two threads,
// and segfaults with them dead-locked. Useful in creating a multi-
// threaded core file. 

// Included source should not be built as part of the build. Included
// source as part of documentation
//
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *thread1_function();
void *thread2_function();

pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;

// Create two threads. Deadlock them. Wait 5 seconds then
// segfault.
int main(int argc, char **argv) {

    pthread_t thread1, thread2;
    double math = 99.99;
    double smath = math + 1.234;

    int  iret1, iret2;

    // Grab mutex, never leave it go.
    pthread_mutex_lock( &mutex1 );

    // And they're off, start the threads going.
    iret1 = pthread_create( &thread1, NULL, thread1_function, NULL);
    iret2 = pthread_create( &thread2, NULL, thread2_function, NULL);

    // Wait for deadlock
    sleep(5); 

    // now sigsegv
    char *s = "string";
    *s = 'a';

   return 1;
}

void *thread1_function() {

     double math = 99.99;
     double smath = math + 1.234;

     // Wait forever on a mutex that is never unlocked
     pthread_mutex_lock( &mutex1 );
     printf("You should never see this message from thread 1 while running\n");
}

void *thread2_function() {
     
  double math = 11.11;
     double smath = math + 4.321;

     // Wait forever on a mutex that is never unlocked.
     pthread_mutex_lock( &mutex1 );
     printf("You should never see this message from thread 2 while running\n");
}
